<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[OPS Notes By 枯木]]></title>
  <link href="http://kumu-Linux.github.io/atom.xml" rel="self"/>
  <link href="http://kumu-Linux.github.io/"/>
  <updated>2014-07-19T16:35:46+08:00</updated>
  <id>http://kumu-Linux.github.io/</id>
  <author>
    <name><![CDATA[枯木]]></name>
    <email><![CDATA[1988.wulei@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[docker相关命令]]></title>
    <link href="http://kumu-Linux.github.io/blog/2014/07/19/docker-cmd/"/>
    <updated>2014-07-19T16:13:00+08:00</updated>
    <id>http://kumu-Linux.github.io/blog/2014/07/19/docker-cmd</id>
    <content type="html"><![CDATA[<h2>docker help</h2>

<p>容器日常的操作过程中，熟练使用docker的相关命令还是非常重要的，推荐把docker的命令熟读并实践，这样对docker相关功能的理解会很有帮助的。</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo docker   <span class="c"># docker命令帮助</span>
</span><span class='line'>Usage: docker <span class="o">[</span>OPTIONS<span class="o">]</span> COMMAND <span class="o">[</span>arg...<span class="o">]</span>
</span><span class='line'> -H<span class="o">=[</span>unix:///var/run/docker.sock<span class="o">]</span>: tcp://host:port to <span class="nb">bind</span>/connect to or unix://path/to/socket to use
</span><span class='line'>
</span><span class='line'>A self-sufficient runtime <span class="k">for </span>linux containers.
</span><span class='line'>
</span><span class='line'>Commands:
</span><span class='line'>    attach    Attach to a running container                 <span class="c"># 当前shell下attach连接指定运行镜像</span>
</span><span class='line'>    build     Build an image from a Dockerfile              <span class="c"># 通过Dockerfile定制镜像</span>
</span><span class='line'>    commit    Create a new image from a container<span class="s1">&#39;s changes # 提交当前容器为新的镜像</span>
</span><span class='line'><span class="s1">    cp        Copy files/folders from the containers filesystem to the host path</span>
</span><span class='line'><span class="s1">              # 从容器中拷贝指定文件或者目录到宿主机中</span>
</span><span class='line'><span class="s1">    diff      Inspect changes on a container&#39;</span>s filesystem   <span class="c"># 查看docker容器变化</span>
</span><span class='line'>    events    Get real <span class="nb">time </span>events from the server          <span class="c"># 从docker服务获取容器实时事件</span>
</span><span class='line'>    <span class="nb">export    </span>Stream the contents of a container as a tar archive
</span><span class='line'>              <span class="c"># 导出容器的内容流作为一个tar归档文件[对应import]</span>
</span><span class='line'>    <span class="nb">history   </span>Show the <span class="nb">history </span>of an image  <span class="c"># 展示一个镜像形成历史</span>
</span><span class='line'>    images    List images                   <span class="c"># 列出系统当前镜像</span>
</span><span class='line'>    import    Create a new filesystem image from the contents of a tarball
</span><span class='line'>              <span class="c"># 从tar包中的内容创建一个新的文件系统映像[对应export]</span>
</span><span class='line'>    info      Display system-wide information               <span class="c"># 显示系统相关信息</span>
</span><span class='line'>    inspect   Return low-level information on a container   <span class="c"># 查看容器详细信息</span>
</span><span class='line'>    <span class="nb">kill      </span>Kill a running container                      <span class="c"># kill指定docker容器</span>
</span><span class='line'>    load      Load an image from a tar archive              <span class="c"># 从一个tar包中加载一个镜像[对应save]</span>
</span><span class='line'>    login     Register or Login to the docker registry server
</span><span class='line'>              <span class="c"># 注册或者登陆一个docker源服务器</span>
</span><span class='line'>    logs      Fetch the logs of a container             <span class="c"># 输出当前容器日志信息</span>
</span><span class='line'>    port      Lookup the public-facing port which is NAT-ed to PRIVATE_PORT
</span><span class='line'>              <span class="c"># 查看映射端口对应的容器内部源端口</span>
</span><span class='line'>    pause     Pause all processes within a container    <span class="c"># 暂停容器</span>
</span><span class='line'>    ps        List containers                           <span class="c"># 列出容器列表</span>
</span><span class='line'>    pull      Pull an image or a repository from the docker registry server
</span><span class='line'>              <span class="c"># 从docker镜像源服务器拉取指定镜像或者库镜像</span>
</span><span class='line'>    push      Push an image or a repository to the docker registry server
</span><span class='line'>              <span class="c"># 推送指定镜像或者库镜像至docker源服务器</span>
</span><span class='line'>    restart   Restart a running container               <span class="c"># 重启运行的容器</span>
</span><span class='line'>    rm        Remove one or more containers             <span class="c"># 移除一个或者多个容器</span>
</span><span class='line'>    rmi       Remove one or more images
</span><span class='line'>              <span class="c"># 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或-f强制删除]</span>
</span><span class='line'>    run       Run a <span class="nb">command </span>in a new container
</span><span class='line'>              <span class="c"># 在一个新的容器中运行一个命令</span>
</span><span class='line'>    save      Save an image to a tar archive            <span class="c"># 保存一个镜像为一个tar包[对应load]</span>
</span><span class='line'>    search    Search <span class="k">for </span>an image in the docker index   <span class="c"># 在docker index中搜索镜像</span>
</span><span class='line'>    start     Start a stopped containers    <span class="c"># 启动容器</span>
</span><span class='line'>    stop      Stop a running containers     <span class="c"># 停止容器</span>
</span><span class='line'>    tag       Tag an image into a repository        <span class="c"># 给源中镜像打标签</span>
</span><span class='line'>    top       Lookup the running processes of a container <span class="c"># 查看容器中运行的进程信息</span>
</span><span class='line'>    unpause   Unpause a paused container            <span class="c"># 取消暂停容器</span>
</span><span class='line'>    version   Show the docker version information   <span class="c"># 查看docker版本号</span>
</span><span class='line'>    <span class="nb">wait      </span>Block <span class="k">until </span>a container stops, <span class="k">then </span>print its <span class="nb">exit </span>code
</span><span class='line'>              <span class="c"># 截取容器停止时的退出状态值</span>
</span></code></pre></td></tr></table></div></figure>


<p>docker选项帮助</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo docker --help
</span><span class='line'>Usage of docker:
</span><span class='line'>  --api-enable-cors<span class="o">=</span><span class="nb">false                </span>Enable CORS headers in the remote API                  <span class="c"># 远程API中开启CORS头</span>
</span><span class='line'>  -b, --bridge<span class="o">=</span><span class="s2">&quot;&quot;</span>                        Attach containers to a pre-existing network bridge     <span class="c"># 桥接网络</span>
</span><span class='line'>                                           use <span class="s1">&#39;none&#39;</span> to disable container networking
</span><span class='line'>  --bip<span class="o">=</span><span class="s2">&quot;&quot;</span>                               Use this CIDR notation address <span class="k">for </span>the network bridge<span class="s1">&#39;s IP, not compatible with -b</span>
</span><span class='line'><span class="s1">                                         # 和-b选项不兼容，具体没有测试过</span>
</span><span class='line'><span class="s1">  -d, --daemon=false                     Enable daemon mode     # daemon模式</span>
</span><span class='line'><span class="s1">  -D, --debug=false                      Enable debug mode      # debug模式</span>
</span><span class='line'><span class="s1">  --dns=[]                               Force docker to use specific DNS servers           # 强制docker使用指定dns服务器</span>
</span><span class='line'><span class="s1">  --dns-search=[]                        Force Docker to use specific DNS search domains    # 强制docker使用指定dns搜索域</span>
</span><span class='line'><span class="s1">  -e, --exec-driver=&quot;native&quot;             Force the docker runtime to use a specific exec driver  # 强制docker运行时使用指定执行驱动器</span>
</span><span class='line'><span class="s1">  -G, --group=&quot;docker&quot;                   Group to assign the unix socket specified by -H when running in daemon mode</span>
</span><span class='line'><span class="s1">                                           use &#39;&#39; (the empty string) to disable setting of a group</span>
</span><span class='line'><span class="s1">  -g, --graph=&quot;/var/lib/docker&quot;          Path to use as the root of the docker runtime      # 容器运行的根目录路径</span>
</span><span class='line'><span class="s1">  -H, --host=[]                          The socket(s) to bind to in daemon mode            # daemon模式下docker指定绑定方式[tcp or 本地socket]</span>
</span><span class='line'><span class="s1">                                           specified using one or more tcp://host:port, unix:///path/to/socket, fd://* or fd://socketfd.</span>
</span><span class='line'><span class="s1">  --icc=true                             Enable inter-container communication                       # 跨容器通信</span>
</span><span class='line'><span class="s1">  --ip=&quot;0.0.0.0&quot;                         Default IP address to use when binding container ports     # 指定监听地址，默认所有ip</span>
</span><span class='line'><span class="s1">  --ip-forward=true                      Enable net.ipv4.ip_forward                                 # 开启转发</span>
</span><span class='line'><span class="s1">  --iptables=true                        Enable Docker&#39;</span>s addition of iptables rules                 <span class="c"># 添加对应iptables规则</span>
</span><span class='line'>  --mtu<span class="o">=</span>0                                Set the containers network MTU                             <span class="c"># 设置网络mtu</span>
</span><span class='line'>                                           <span class="k">if </span>no value is provided: default to the default route MTU or 1500 <span class="k">if </span>no default route is available
</span><span class='line'>  -p, --pidfile<span class="o">=</span><span class="s2">&quot;/var/run/docker.pid&quot;</span>    Path to use <span class="k">for </span>daemon PID file                            <span class="c"># 指定pid文件位置</span>
</span><span class='line'>  -r, --restart<span class="o">=</span><span class="nb">true                     </span>Restart previously running containers                      <span class="c"># 重新启动以前运行的容器                     </span>
</span><span class='line'>  -s, --storage-driver<span class="o">=</span><span class="s2">&quot;&quot;</span>                Force the docker runtime to use a specific storage driver  <span class="c"># 强制docker运行时使用指定存储驱动</span>
</span><span class='line'>  --selinux-enabled<span class="o">=</span><span class="nb">false                </span>Enable selinux support                                     <span class="c"># 开启selinux支持</span>
</span><span class='line'>  --storage-opt<span class="o">=[]</span>                       Set storage driver options                                 <span class="c"># 设置存储驱动选项</span>
</span><span class='line'>  --tls<span class="o">=</span><span class="nb">false                            </span>Use TLS; implied by tls-verify flags                       <span class="c"># 开启tls</span>
</span><span class='line'>  --tlscacert<span class="o">=</span><span class="s2">&quot;/root/.docker/ca.pem&quot;</span>     Trust only remotes providing a certificate signed by the CA given here
</span><span class='line'>  --tlscert<span class="o">=</span><span class="s2">&quot;/root/.docker/cert.pem&quot;</span>     Path to TLS certificate file                               <span class="c"># tls证书文件位置</span>
</span><span class='line'>  --tlskey<span class="o">=</span><span class="s2">&quot;/root/.docker/key.pem&quot;</span>       Path to TLS key file                                       <span class="c"># tls key文件位置</span>
</span><span class='line'>  --tlsverify<span class="o">=</span><span class="nb">false                      </span>Use TLS and verify the remote <span class="o">(</span>daemon: verify client, client: verify daemon<span class="o">)</span> <span class="c"># 使用tls并确认远程控制主机</span>
</span><span class='line'>  -v, --version<span class="o">=</span><span class="nb">false                    </span>Print version information and quit                         <span class="c"># 输出docker版本信息</span>
</span></code></pre></td></tr></table></div></figure>


<h3>docker search</h3>

<p>官方镜像源地址：<a href="https://registry.hub.docker.com/">registry.hub.docker.com</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo docker search
</span><span class='line'>
</span><span class='line'>Usage: docker search TERM
</span><span class='line'>
</span><span class='line'>Search the docker index <span class="k">for </span>images      <span class="c"># 从docker镜像主页搜索镜像</span>
</span><span class='line'>
</span><span class='line'>  --automated<span class="o">=</span><span class="nb">false    </span>Only show automated builds
</span><span class='line'>  --no-trunc<span class="o">=</span><span class="nb">false     </span>Don<span class="err">&#39;</span>t truncate output
</span><span class='line'>  -s, --stars<span class="o">=</span>0        Only displays with at least xxx stars
</span></code></pre></td></tr></table></div></figure>


<p>示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo docker search -s 100 ubuntu
</span><span class='line'><span class="c"># 查找star数至少为100的镜像，找出只有官方镜像start数超过100，默认不加s选项找出所有相关ubuntu镜像</span>
</span><span class='line'>NAME      DESCRIPTION                  STARS     OFFICIAL   AUTOMATED
</span><span class='line'>ubuntu    Official Ubuntu base image   425       <span class="o">[</span>OK<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>docker info</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo docker info
</span><span class='line'>Containers: 7           <span class="c"># 容器个数</span>
</span><span class='line'>Images: 102             <span class="c"># 镜像个数</span>
</span><span class='line'>Storage Driver: aufs    <span class="c"># 存储驱动，默认aufs</span>
</span><span class='line'> Root Dir: /var/lib/docker/aufs     <span class="c"># 根目录</span>
</span><span class='line'> Dirs: 116
</span><span class='line'>Execution Driver: native-0.2        <span class="c"># 执行驱动</span>
</span><span class='line'>Kernel Version: 3.13.0-24-generic
</span><span class='line'>WARNING: No swap limit support
</span></code></pre></td></tr></table></div></figure>


<h3>docker pull &amp;&amp; docker push</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo docker pull                  <span class="c"># pull拉取镜像</span>
</span><span class='line'>
</span><span class='line'>Usage: docker pull NAME<span class="o">[</span>:TAG<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Pull an image or a repository from the registry
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>sudo docker push                  <span class="c"># push推送指定镜像</span>
</span><span class='line'>
</span><span class='line'>Usage: docker push NAME<span class="o">[</span>:TAG<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Push an image or a repository to the registry
</span></code></pre></td></tr></table></div></figure>


<p>示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo docker pull ubuntu           <span class="c"># 下载官方ubuntu docker镜像，默认下载所有ubuntu官方库镜像</span>
</span><span class='line'><span class="nv">$ </span>sudo docker pull ubuntu:14.04     <span class="c"># 下载指定版本ubuntu官方镜像</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo docker push 192.168.0.100:5000/ubuntu
</span><span class='line'><span class="c"># 推送镜像库到私有源[可注册docker官方账户，推送到官方自有账户]</span>
</span><span class='line'><span class="nv">$ </span>sudo docker push 192.168.0.100:5000/ubuntu:14.04
</span><span class='line'><span class="c"># 推送指定镜像到私有源</span>
</span></code></pre></td></tr></table></div></figure>


<h3>docker images</h3>

<p>列出当前系统镜像</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo docker images -h
</span><span class='line'>
</span><span class='line'>Usage: docker images <span class="o">[</span>OPTIONS<span class="o">]</span> <span class="o">[</span>NAME<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>List images
</span><span class='line'>
</span><span class='line'>  -a, --all<span class="o">=</span><span class="nb">false      </span>Show all images <span class="o">(</span>by default filter out the intermediate image layers<span class="o">)</span>
</span><span class='line'>  <span class="c"># -a显示当前系统的所有镜像，包括过渡层镜像，默认docker images显示最终镜像，不包括过渡层镜像</span>
</span><span class='line'>  -f, --filter<span class="o">=[]</span>      Provide filter values <span class="o">(</span>i.e. <span class="s1">&#39;dangling=true&#39;</span><span class="o">)</span>
</span><span class='line'>  --no-trunc<span class="o">=</span><span class="nb">false     </span>Don<span class="err">&#39;</span>t truncate output
</span><span class='line'>  -q, --quiet<span class="o">=</span><span class="nb">false    </span>Only show numeric IDs
</span></code></pre></td></tr></table></div></figure>


<p>示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo docker images            <span class="c"># 显示当前系统镜像，不包括过渡层镜像</span>
</span><span class='line'><span class="nv">$ </span>sudo docker images -a         <span class="c"># 显示当前系统所有镜像，包括过渡层镜像</span>
</span><span class='line'><span class="nv">$ </span>sudo docker images ubuntu     <span class="c"># 显示当前系统docker ubuntu库中的所有镜像</span>
</span><span class='line'>REPOSITORY                 TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
</span><span class='line'>ubuntu                     12.04               ebe4be4dd427        4 weeks ago         210.6 MB
</span><span class='line'>ubuntu                     14.04               e54ca5efa2e9        4 weeks ago         276.5 MB
</span><span class='line'>ubuntu                     14.04-ssh           6334d3ac099a        7 weeks ago         383.2 MB
</span></code></pre></td></tr></table></div></figure>


<h3>docker rmi</h3>

<p>删除一个或者多个镜像</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo docker rmi
</span><span class='line'>
</span><span class='line'>Usage: docker rmi IMAGE <span class="o">[</span>IMAGE...<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Remove one or more images
</span><span class='line'>
</span><span class='line'>  -f, --force<span class="o">=</span><span class="nb">false    </span>Force removal of the image       <span class="c"># 强制移除镜像不管是否有容器使用该镜像</span>
</span><span class='line'>  --no-prune<span class="o">=</span><span class="nb">false     </span>Do not delete untagged parents   <span class="c"># 不要删除未标记的父镜像</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>docker run</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo docker run
</span><span class='line'>
</span><span class='line'>Usage: docker run <span class="o">[</span>OPTIONS<span class="o">]</span> IMAGE <span class="o">[</span>COMMAND<span class="o">]</span> <span class="o">[</span>ARG...<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Run a <span class="nb">command </span>in a new container
</span><span class='line'>
</span><span class='line'>  -a, --attach<span class="o">=[]</span>            Attach to stdin, stdout or stderr.
</span><span class='line'>  -c, --cpu-shares<span class="o">=</span>0         CPU shares <span class="o">(</span>relative weight<span class="o">)</span>                   <span class="c"># 设置cpu使用权重</span>
</span><span class='line'>  --cidfile<span class="o">=</span><span class="s2">&quot;&quot;</span>               Write the container ID to the file             <span class="c"># 把容器id写入到指定文件</span>
</span><span class='line'>  --cpuset<span class="o">=</span><span class="s2">&quot;&quot;</span>                CPUs in which to allow execution <span class="o">(</span>0-3, 0,1<span class="o">)</span>    <span class="c"># cpu绑定</span>
</span><span class='line'>  -d, --detach<span class="o">=</span><span class="nb">false         </span>Detached mode: Run container in the background, print new container id <span class="c"># 后台运行容器</span>
</span><span class='line'>  --dns<span class="o">=[]</span>                   Set custom dns servers             <span class="c"># 设置dns</span>
</span><span class='line'>  --dns-search<span class="o">=[]</span>            Set custom dns search domains      <span class="c"># 设置dns域搜索</span>
</span><span class='line'>  -e, --env<span class="o">=[]</span>               Set environment variables          <span class="c"># 定义环境变量</span>
</span><span class='line'>  --entrypoint<span class="o">=</span><span class="s2">&quot;&quot;</span>            Overwrite the default entrypoint of the image      <span class="c"># ？</span>
</span><span class='line'>  --env-file<span class="o">=[]</span>              Read in a line delimited file of ENV variables     <span class="c"># 从指定文件读取变量值</span>
</span><span class='line'>  --expose<span class="o">=[]</span>                Expose a port from the container without publishing it to your host    <span class="c"># 指定对外提供服务端口</span>
</span><span class='line'>  -h, --hostname<span class="o">=</span><span class="s2">&quot;&quot;</span>          Container host name    <span class="c"># 设置容器主机名</span>
</span><span class='line'>  -i, --interactive<span class="o">=</span><span class="nb">false    </span>Keep stdin open even <span class="k">if </span>not attached           <span class="c"># 保持标准输出开启即使没有attached</span>
</span><span class='line'>  --link<span class="o">=[]</span>                  Add link to another container <span class="o">(</span>name:alias<span class="o">)</span>     <span class="c"># 添加链接到另外一个容器[这个会专门章节讲解]</span>
</span><span class='line'>  --lxc-conf<span class="o">=[]</span>              <span class="o">(</span>lxc <span class="nb">exec</span>-driver only<span class="o">)</span> Add custom lxc options --lxc-conf<span class="o">=</span><span class="s2">&quot;lxc.cgroup.cpuset.cpus = 0,1&quot;</span>
</span><span class='line'>  -m, --memory<span class="o">=</span><span class="s2">&quot;&quot;</span>            Memory limit <span class="o">(</span>format: &lt;number&gt;&lt;optional unit&gt;, where <span class="nv">unit</span> <span class="o">=</span> b, k, m or g<span class="o">)</span> <span class="c"># 内存限制</span>
</span><span class='line'>  --name<span class="o">=</span><span class="s2">&quot;&quot;</span>                  Assign a name to the container     <span class="c"># 设置容器名</span>
</span><span class='line'>  --net<span class="o">=</span><span class="s2">&quot;bridge&quot;</span>             Set the Network mode <span class="k">for </span>the container     <span class="c"># 设置容器网络模式</span>
</span><span class='line'>                               <span class="s1">&#39;bridge&#39;</span>: creates a new network stack <span class="k">for </span>the container on the docker bridge
</span><span class='line'>                               <span class="s1">&#39;none&#39;</span>: no networking <span class="k">for </span>this container
</span><span class='line'>                               <span class="s1">&#39;container:&lt;name|id&gt;&#39;</span>: reuses another container network stack
</span><span class='line'>                               <span class="s1">&#39;host&#39;</span>: use the host network stack inside the container.  Note: the host mode gives the container full access to <span class="nb">local </span>system services such as D-bus and is therefore considered insecure.
</span><span class='line'>  -P, --publish-all<span class="o">=</span><span class="nb">false    </span>Publish all exposed ports to the host interfaces   <span class="c"># 自动映射容器对外提供服务的端口</span>
</span><span class='line'>  -p, --publish<span class="o">=[]</span>           Publish a container<span class="s1">&#39;s port to the host             # 指定端口映射</span>
</span><span class='line'><span class="s1">                               format: ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort</span>
</span><span class='line'><span class="s1">                               (use &#39;</span>docker port<span class="err">&#39;</span> to see the actual mapping<span class="o">)</span>
</span><span class='line'>  --privileged<span class="o">=</span><span class="nb">false         </span>Give extended privileges to this container         <span class="c"># 提供更多的权限给容器</span>
</span><span class='line'>  --rm<span class="o">=</span><span class="nb">false                 </span>Automatically remove the container when it exits <span class="o">(</span>incompatible with -d<span class="o">)</span> <span class="c"># 如果容器退出自动移除和-d选项冲突</span>
</span><span class='line'>  --sig-proxy<span class="o">=</span><span class="nb">true           </span>Proxify received signals to the process <span class="o">(</span>even in non-tty mode<span class="o">)</span>. SIGCHLD is not proxied. <span class="c"># ？</span>
</span><span class='line'>  -t, --tty<span class="o">=</span><span class="nb">false            </span>Allocate a pseudo-tty                              <span class="c"># 分配伪终端</span>
</span><span class='line'>  -u, --user<span class="o">=</span><span class="s2">&quot;&quot;</span>              Username or UID                                    <span class="c"># 指定运行容器的用户uid或者用户名</span>
</span><span class='line'>  -v, --volume<span class="o">=[]</span>            Bind mount a volume <span class="o">(</span>e.g., from the host: -v /host:/container, from docker: -v /container<span class="o">)</span>     <span class="c"># 挂载卷[这个会专门章节讲解]</span>
</span><span class='line'>  --volumes-from<span class="o">=[]</span>          Mount volumes from the specified container<span class="o">(</span>s<span class="o">)</span>      <span class="c"># 从指定容器挂载卷</span>
</span><span class='line'>  -w, --workdir<span class="o">=</span><span class="s2">&quot;&quot;</span>           Working directory inside the container             <span class="c"># 指定容器工作目录</span>
</span></code></pre></td></tr></table></div></figure>


<p>示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo docker images ubuntu
</span><span class='line'>REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
</span><span class='line'>ubuntu              14.04               e54ca5efa2e9        4 weeks ago         276.5 MB
</span><span class='line'>... ...
</span><span class='line'><span class="nv">$ </span>sudo docker run -t -i -c 100 -m 512MB -h test1 -d --name<span class="o">=</span><span class="s2">&quot;docker_test1&quot;</span> ubuntu /bin/bash
</span><span class='line'><span class="c"># 创建一个cpu优先级为1，内存限制512MB，主机名为test1，名为docker_test1后台运行bash的容器</span>
</span><span class='line'>a424ca613c9f2247cd3ede95adfbaf8d28400cbcb1d5f9b69a7b56f97b2b52e5
</span><span class='line'><span class="nv">$ </span>sudo docker ps
</span><span class='line'>CONTAINER ID        IMAGE           COMMAND         CREATED             STATUS              PORTS       NAMES
</span><span class='line'>a424ca613c9f        ubuntu:14.04    /bin/bash       6 seconds ago       Up 5 seconds                    docker_test1
</span><span class='line'><span class="nv">$ </span>sudo docker attach docker_test1
</span><span class='line'>root@test1:/# <span class="nb">pwd</span>
</span><span class='line'>/
</span><span class='line'>root@test1:/# <span class="nb">exit</span>
</span><span class='line'><span class="nb">exit</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>关于cpu优先级:</strong></p>

<blockquote><p>By default all groups have 1024 shares. A group with 100 shares will get a ~10% portion of the CPU time:</p></blockquote>

<h3>docker start|stop|kill|restart|pause|unpause|rm|commit|inspect</h3>

<ul>
<li>docker start CONTAINER [CONTAINER&#8230;] # 运行一个或多个停止的容器</li>
<li>docker stop CONTAINER [CONTAINER&#8230;]  # 停掉一个或多个运行的容器 <code>-t</code>选项可指定超时时间</li>
<li>docker kill [OPTIONS] CONTAINER [CONTAINER&#8230;] # 默认kill发送SIGKILL信号 <code>-s</code>可以指定发送kill信号类型</li>
<li>docker restart [OPTIONS] CONTAINER [CONTAINER&#8230;] # 重启一个或多个运行的容器 <code>-t</code>选项可指定超时时间</li>
<li>docker pause CONTAINER                # 暂停一个容器，方便commit</li>
<li>docker unpause CONTAINER              # 继续暂停的容器</li>
<li>docker rm [OPTIONS] CONTAINER [CONTAINER&#8230;] # 移除一个或多个容器

<ul>
<li>-f, &#8211;force=false      Force removal of running container</li>
<li>-l, &#8211;link=false       Remove the specified link and not the underlying container</li>
<li>-v, &#8211;volumes=false    Remove the volumes associated with the container</li>
</ul>
</li>
<li>docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]] # 提交指定容器为镜像

<ul>
<li>-a, &#8211;author=&#8221;&#8221;     Author (e.g., &#8220;John Hannibal Smith <a href="&#x6d;&#x61;&#x69;&#x6c;&#x74;&#111;&#x3a;&#104;&#97;&#110;&#110;&#x69;&#98;&#97;&#108;&#64;&#x61;&#x2d;&#116;&#101;&#97;&#109;&#x2e;&#99;&#x6f;&#109;">&#104;&#x61;&#x6e;&#110;&#105;&#x62;&#x61;&#x6c;&#x40;&#x61;&#x2d;&#116;&#101;&#x61;&#x6d;&#x2e;&#x63;&#111;&#109;</a>&#8221;)</li>
<li>-m, &#8211;message=&#8221;&#8221;    Commit message</li>
<li>-p, &#8211;pause=true    Pause container during commit # 默认commit是暂停状态</li>
</ul>
</li>
<li>docker inspect CONTAINER|IMAGE [CONTAINER|IMAGE&#8230;]   # 查看容器或者镜像的详细信息</li>
</ul>


<h2>参考文档</h2>

<ul>
<li><a href="https://docs.docker.com/reference/run/">Docker Run Reference</a></li>
</ul>


<p>&#8211;EOF&#8211;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[本地fsck修复qcow2]]></title>
    <link href="http://kumu-Linux.github.io/blog/2014/06/23/fsck-qcow2/"/>
    <updated>2014-06-23T16:36:00+08:00</updated>
    <id>http://kumu-Linux.github.io/blog/2014/06/23/fsck-qcow2</id>
    <content type="html"><![CDATA[<p>因为一些原因导致若干kvm虚拟机出现启动不了的情况，如下图：</p>

<!--more-->


<p><img src="http://kumu-Linux.github.io/images/boot_trouble.png"></p>

<p>这应该是文件系统破坏的问题，一般情况下还可以在虚拟机中fsck修复文件系统，但是这种情况在虚拟机中根本就没有机会fsck，所以想到通过外界方法对虚拟磁盘进行fsck。创建虚拟机使用的虚拟磁盘的类型是qcow2，开机无法fsck的话，可以通过如下两种方式:</p>

<ul>
<li>通过启动其它虚拟机的时候指定损坏虚拟磁盘启动再修复</li>
<li>通过qemu-nbd工具本地宿主机上修复qcow2</li>
</ul>


<p>这里介绍第二种方式，直接在宿主机上修复损坏qcow2磁盘，利用qemu-nbd把qcow2映射为网络设备<a href="http://en.wikipedia.org/wiki/Network_block_device">Network block device</a>。</p>

<h2>加载nbd</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># modprobe nbd max_part=8 # max_part表示每个设备的分区，根据实际情况修改，默认为0</span>
</span><span class='line'><span class="c"># modinfo nbd   # 查看nbd相关信息</span>
</span><span class='line'>filename:       /lib/modules/3.5.0-23-generic/kernel/drivers/block/nbd.ko
</span><span class='line'>license:        GPL
</span><span class='line'>description:    Network Block Device
</span><span class='line'>srcversion:     B540FE0119F7C28B9D15C21
</span><span class='line'>depends:
</span><span class='line'>intree:         Y
</span><span class='line'>vermagic:       3.5.0-23-generic SMP mod_unload modversions
</span><span class='line'>parm:           nbds_max:number of network block devices to initialize <span class="o">(</span>default: 16<span class="o">)</span> <span class="o">(</span>int<span class="o">)</span>
</span><span class='line'>parm:           max_part:number of partitions per device <span class="o">(</span>default: 0<span class="o">)</span> <span class="o">(</span>int<span class="o">)</span>
</span><span class='line'>parm:           debugflags:flags <span class="k">for </span>controlling debug output <span class="o">(</span>int<span class="o">)</span>
</span><span class='line'><span class="c"># ls /dev/nbd* # 默认有16个nbd设备文件</span>
</span><span class='line'>/dev/nbd0  /dev/nbd1  /dev/nbd10  /dev/nbd11  /dev/nbd12  /dev/nbd13
</span><span class='line'>/dev/nbd14  /dev/nbd15  /dev/nbd2  /dev/nbd3  /dev/nbd4  /dev/nbd5
</span><span class='line'>/dev/nbd6 /dev/nbd7  /dev/nbd8  /dev/nbd9
</span></code></pre></td></tr></table></div></figure>


<h2>映射损坏qcow2磁盘为nbd</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># qemu-nbd --connect=/dev/nbd0 /data/0/41/disk.qcow2 </span>
</span><span class='line'><span class="c"># 映射disk.qcow2为本地的nbd0设备，qcow2需要为绝对路径</span>
</span><span class='line'><span class="c"># ls /dev/nbd0* # 映射虚拟磁盘有两个分区</span>
</span><span class='line'>/dev/nbd0  /dev/nbd0p1  /dev/nbd0p2
</span></code></pre></td></tr></table></div></figure>


<p>本来准备修复了，但是发现发现之前的虚拟机分区是LVM设备，如果是正常分区直接修复就可以了，而LVM需要先LVM设备激活。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># fdisk -l /dev/nbd0</span>
</span><span class='line'>
</span><span class='line'>Disk /dev/nbd0: 32.2 GB, 32212254720 bytes
</span><span class='line'>255 heads, 63 sectors/track, 3916 cylinders, total 62914560 sectors
</span><span class='line'><span class="nv">Units</span> <span class="o">=</span> sectors of 1 * <span class="nv">512</span> <span class="o">=</span> 512 bytes
</span><span class='line'>Sector size <span class="o">(</span>logical/physical<span class="o">)</span>: 512 bytes / 512 bytes
</span><span class='line'>I/O size <span class="o">(</span>minimum/optimal<span class="o">)</span>: 512 bytes / 512 bytes
</span><span class='line'>Disk identifier: 0x00065194
</span><span class='line'>
</span><span class='line'>     Device Boot      Start         End      Blocks   Id  System
</span><span class='line'>/dev/nbd0p1   *          63      208844      104391   83  Linux
</span><span class='line'>/dev/nbd0p2          208845    62910539    31350847+  8e  Linux LVM
</span></code></pre></td></tr></table></div></figure>


<h2>激活LVM</h2>

<h3>安装lvm</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># mount /dev/nbd0p2 /mnt/ # 说明没有安装LVM</span>
</span><span class='line'>mount: unknown filesystem <span class="nb">type</span> <span class="s1">&#39;LVM2_member&#39;</span>
</span><span class='line'><span class="c"># apt-get install lvm2 -y</span>
</span></code></pre></td></tr></table></div></figure>


<h3>激活LVM</h3>

<p>默认状态可能LVM没有激活，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># lvdisplay </span>
</span><span class='line'>  --- Logical volume ---
</span><span class='line'>  LV Name                /dev/VolGroup00/LogVol00
</span><span class='line'>  VG Name                VolGroup00
</span><span class='line'>  LV UUID                VJkt2b-zSeD-DB23-XcfZ-1OHn-s0Ju-u7sXAN
</span><span class='line'>  LV Write Access        <span class="nb">read</span>/write
</span><span class='line'>  LV Status              NOT available
</span><span class='line'>  LV Size                21.91 GiB
</span><span class='line'>  Current LE             701
</span><span class='line'>  Segments               1
</span><span class='line'>  Allocation             inherit
</span><span class='line'>  Read ahead sectors     auto
</span><span class='line'>
</span><span class='line'>  --- Logical volume ---
</span><span class='line'>  LV Name                /dev/VolGroup00/LogVol01
</span><span class='line'>  VG Name                VolGroup00
</span><span class='line'>  LV UUID                kIOZsr-0uYd-FFud-yEnk-x6x7-1GxC-Q1yEOJ
</span><span class='line'>  LV Write Access        <span class="nb">read</span>/write
</span><span class='line'>  LV Status              NOT available
</span><span class='line'>  LV Size                7.97 GiB
</span><span class='line'>  Current LE             255
</span><span class='line'>  Segments               1
</span><span class='line'>  Allocation             inherit
</span><span class='line'>  Read ahead sectors     auto
</span></code></pre></td></tr></table></div></figure>


<p>激活方式如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># vgchange -ay /dev/VolGroup00</span>
</span><span class='line'>  2 logical volume<span class="o">(</span>s<span class="o">)</span> in volume group <span class="s2">&quot;VolGroup00&quot;</span> now active
</span><span class='line'><span class="c"># ls /dev/VolGroup00/*</span>
</span><span class='line'>/dev/VolGroup00/LogVol00  /dev/VolGroup00/LogVol01
</span></code></pre></td></tr></table></div></figure>


<h2>修复指定分区</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># fsck -y /dev/VolGroup00/LogVol0</span>
</span><span class='line'>... ...
</span><span class='line'>Free blocks count wrong <span class="o">(</span>5069553, <span class="nv">counted</span><span class="o">=</span>5070543<span class="o">)</span>.
</span><span class='line'>Fix? yes
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>/dev/mapper/VolGroup00-LogVol00: ***** FILE SYSTEM WAS MODIFIED *****
</span><span class='line'>/dev/mapper/VolGroup00-LogVol00: 79036/5744640 files <span class="o">(</span>0.7% non-contiguous<span class="o">)</span>, 672049/5742592 blocks
</span></code></pre></td></tr></table></div></figure>


<p>如上结果，最终修复磁盘成功。</p>

<h2>取消映射</h2>

<p>修复完成之后取消nbd映射，开启虚拟机即可，取消映射方法如下命令。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># qemu-nbd --disconnect /dev/nbd0</span>
</span><span class='line'>/dev/nbd0 disconnected
</span></code></pre></td></tr></table></div></figure>


<p>修复之后，顺利启动相关虚拟机，推荐开机之后再<code>shutdown -F now</code>强制修复一下，以防万一。</p>

<h2>参考</h2>

<ul>
<li><a href="http://www.randomhacks.co.uk/how-to-recover-fsck-a-qcow2-file/">How to recover a qcow2 file using fsck</a></li>
</ul>


<p>&#8211;EOF&#8211;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用pipework桥接docker]]></title>
    <link href="http://kumu-Linux.github.io/blog/2014/06/04/docker-pipework/"/>
    <updated>2014-06-04T17:24:00+08:00</updated>
    <id>http://kumu-Linux.github.io/blog/2014/06/04/docker-pipework</id>
    <content type="html"><![CDATA[<p>docker创建的时候，默认是接入docker0，只能单主机进行工作，但是在生产环境中往往不同主机的docker也是需要通信的，所以这里要借助另外一个工具，那就是pipework。</p>

<!--more-->


<h3>安装pipework</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone https://github.com/jpetazzo/pipework.git
</span><span class='line'><span class="nv">$ </span>sudo cp -rp pipework/pipework /usr/local/bin/
</span></code></pre></td></tr></table></div></figure>


<h3>安装相应依赖软件</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get install apring bridge-utils -y
</span></code></pre></td></tr></table></div></figure>


<h3>桥接网络</h3>

<p>Ubuntu14.04</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># cat /etc/network/interfaces</span>
</span><span class='line'>auto lo
</span><span class='line'>iface lo inet loopback
</span><span class='line'>
</span><span class='line'>auto eth0
</span><span class='line'>iface eth0 inet manual
</span><span class='line'>
</span><span class='line'>auto br0
</span><span class='line'>iface br0 inet static
</span><span class='line'>address 192.168.0.219
</span><span class='line'>netmask 255.255.255.0
</span><span class='line'>gateway 192.168.0.254
</span><span class='line'>bridge_ports eth0
</span><span class='line'>bridge_stp off
</span><span class='line'>bridge_fd 0
</span><span class='line'>bridge_maxwait 0
</span><span class='line'>dns-nameservers 192.168.0.254
</span></code></pre></td></tr></table></div></figure>


<h3>启动br0，使桥接生效</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ifup br0</span>
</span><span class='line'><span class="c"># Bash=$(docker run -i -d -t 192.168.0.219:5000/ubuntu:14.04 /bin/bash)</span>
</span><span class='line'><span class="c"># pipework br0 $Bash 192.168.0.223/24 </span>
</span><span class='line'><span class="c"># 给指定容器添加虚拟网卡并桥接到br0，如此不同主机间的docker便可以通过br0通信了</span>
</span></code></pre></td></tr></table></div></figure>


<h3>拓展</h3>

<p>关于进一步的内容[vlan| Open vSwitch | etc..]可以参考以下两篇文章：</p>

<ul>
<li><a href="https://github.com/jpetazzo/pipework/blob/master/README.md">pipework readme</a></li>
<li><a href="http://peerxu.github.io/blog/2014/04/07/docker-with-openvswitch.html">pipework-docker网络增强工具</a></li>
</ul>


<p>&#8211;EOF&#8211;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[构建docker私有库]]></title>
    <link href="http://kumu-Linux.github.io/blog/2014/06/04/docker-registry/"/>
    <updated>2014-06-04T17:08:00+08:00</updated>
    <id>http://kumu-Linux.github.io/blog/2014/06/04/docker-registry</id>
    <content type="html"><![CDATA[<p>为方便管理，我们需要对官方的镜像做一些定制，我们可以构建私有的<code>docker registry</code></p>

<!--more-->


<h3>快速构建</h3>

<p>The fastest way to get running:</p>

<ul>
<li>install docker：<code>apt-get install docker.io</code></li>
<li>run the registry: <code>docker run -p 5000:5000 registry</code></li>
</ul>


<p>That will use the official image from the Docker index.[因为国内被墙的原因，速度比较慢，推荐第二种方式]</p>

<h3>传统构建方式</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get install build-essential python-dev libevent-dev python-pip liblzma-dev
</span><span class='line'><span class="nv">$ </span>git clone https://github.com/dotcloud/docker-registry.git
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>docker-registry/
</span><span class='line'><span class="nv">$ </span>cp config/config_sample.yml config/config.yml
</span><span class='line'><span class="nv">$ </span>mkdir /data/registry -p
</span><span class='line'><span class="nv">$ </span>pip install .
</span></code></pre></td></tr></table></div></figure>


<h4>启动</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo gunicorn --access-logfile - --debug -k gevent -b 0.0.0.0:5000 <span class="se">\</span>
</span><span class='line'>-w 1 docker_registry.wsgi:application
</span></code></pre></td></tr></table></div></figure>


<p>生产环境可以通过如supervisord创建8个workers，或者通过nginx和apache来管理，具体可以参考<a href="https://github.com/dotcloud/docker-registry">docker-registry readme</a>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo gunicorn -k gevent --max-requests 100 --graceful-timeout 3600 <span class="se">\</span>
</span><span class='line'>-t 3600 -b localhost:5000 -w 8 docker_registry.wsgi:application
</span></code></pre></td></tr></table></div></figure>


<h4>提交指定容器到私有库</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker tag 74fe38d11401 192.168.0.219:5000/ubuntu:12.04
</span><span class='line'><span class="nv">$ </span>docker push 192.168.0.219:5000/ubuntu
</span></code></pre></td></tr></table></div></figure>


<h3>参考</h3>

<ul>
<li><a href="https://github.com/dotcloud/docker-registry">docker-registry readme</a></li>
<li><a href="http://blog.docker.io/2013/07/how-to-use-your-own-registry/">How to use your own Registry</a></li>
</ul>


<p>&#8211;EOF&#8211;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开始docker]]></title>
    <link href="http://kumu-Linux.github.io/blog/2014/06/04/docker-install-index/"/>
    <updated>2014-06-04T17:03:00+08:00</updated>
    <id>http://kumu-Linux.github.io/blog/2014/06/04/docker-install-index</id>
    <content type="html"><![CDATA[<p>Dokcer的基本原理这里不作介绍，网上已经说的很清楚了，这里就不废话了，可以参考以下几篇文章的介绍。</p>

<ul>
<li><a href="http://tiewei.github.io/cloud/Docker-Getting-Start/">Docker Getting Start: Related Knowledge </a></li>
<li><a href="http://code.csdn.net/news/2819773">谁是容器中的“战斗机”？Docker与Chef、LXC等容器对比</a></li>
<li><a href="http://www.infoq.com/cn/articles/docker-containers">Docker：利用Linux容器实现可移植的应用部署</a></li>
</ul>


<!--more-->


<h2>Docker install</h2>

<p>Docker的安装非常简单，这里只介绍Ubuntu 14.04的安装，其他发行版本的安装可以参考官网手册。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get update
</span><span class='line'><span class="nv">$ </span>sudo apt-get install docker.io
</span><span class='line'><span class="nv">$ </span>sudo ln -sf /usr/bin/docker.io /usr/local/bin/docker
</span></code></pre></td></tr></table></div></figure>


<p>获取当前docker版本</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo docker version
</span><span class='line'>Client version: 0.9.1
</span><span class='line'>Go version <span class="o">(</span>client<span class="o">)</span>: go1.2.1
</span><span class='line'>Git commit <span class="o">(</span>client<span class="o">)</span>: 3600720
</span><span class='line'>Server version: 0.9.1
</span><span class='line'>Git commit <span class="o">(</span>server<span class="o">)</span>: 3600720
</span><span class='line'>Go version <span class="o">(</span>server<span class="o">)</span>: go1.2.1
</span><span class='line'>Last stable version: 0.11.1, please update docker
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="http://docs.docker.io/installation/ubuntulinux/">Docker install on ubuntu</a></li>
</ul>


<h2>Docker images</h2>

<ul>
<li><a href="https://index.docker.io/">Docker index</a> Docker镜像首页，包括官方镜像和其它公开镜像</li>
</ul>


<h3>Search index images</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo docker search ubuntu
</span></code></pre></td></tr></table></div></figure>


<h3>Pull images</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo docker pull ubuntu <span class="c"># remote index 获取ubuntu官方镜像</span>
</span><span class='line'><span class="nv">$ </span>sudo docker images <span class="c"># 查看当前镜像列表</span>
</span><span class='line'>REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
</span><span class='line'>ubuntu              13.10               5e019ab7bf6d        3 weeks ago         180 MB
</span><span class='line'>ubuntu              saucy               5e019ab7bf6d        3 weeks ago         180 MB
</span><span class='line'>ubuntu              12.04               74fe38d11401        3 weeks ago         209.6 MB
</span><span class='line'>... ...
</span></code></pre></td></tr></table></div></figure>


<p>Docker index被墙？[FUCK GFW!!! %&amp;$#&amp;&#8230;]，可绑定host解决，亲测可用，不过可能还是比较慢。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 加入以下内容到/etc/hosts下就可以了</span>
</span><span class='line'>54.234.135.251  get.docker.io
</span><span class='line'>54.234.135.251  cdn-registry-1.docker.io
</span></code></pre></td></tr></table></div></figure>


<h3>Running an interactive shell</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo docker run -i -t ubuntu:14.04 /bin/bash
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>ubuntu会有多个版本，通过指定tag来启动特定的版本[image]:[tag]</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo docker ps <span class="c"># 查看当前运行的容器, ps -a列出当前系统所有的容器</span>
</span><span class='line'>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
</span><span class='line'>6c9129e9df10        ubuntu:14.04        /bin/bash           6 minutes ago       Up 6 minutes                            cranky_babbage
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>退出：<code>Ctrl-D</code> or <code>exit</code></li>
<li>detach：<code>Ctrl-p + Ctrl-q</code></li>
<li>attach: <code>docker attach CONTAINER ID</code></li>
</ul>


<p>&#8211;EOF&#8211;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu14.04重启网卡不生效]]></title>
    <link href="http://kumu-Linux.github.io/blog/2014/05/28/ubuntu-network-br0/"/>
    <updated>2014-05-28T11:38:00+08:00</updated>
    <id>http://kumu-Linux.github.io/blog/2014/05/28/ubuntu-network-br0</id>
    <content type="html"><![CDATA[<p>Stopping or restarting the networking job is not supported.<br/>
Use ifdown &amp; ifup to reconfigure desired interface.</p>

<!--more-->


<p>Ubuntu14.04修改配置，重启网卡没有生效，出现如下问题：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># cat /etc/issue</span>
</span><span class='line'>Ubuntu 14.04 LTS <span class="se">\n</span> <span class="se">\l</span>
</span><span class='line'><span class="c"># service  networking restart</span>
</span><span class='line'>stop: Job failed <span class="k">while </span>stopping
</span><span class='line'>start: Job is already running: networking
</span><span class='line'><span class="c"># tail -f /var/log/upstart/networking.log</span>
</span><span class='line'>Stopping or restarting the networking job is not supported.
</span><span class='line'>Use ifdown &amp; ifup to reconfigure desired interface.
</span></code></pre></td></tr></table></div></figure>


<p>从以上日志内容可以看出，传统的service重启和停止网络已经不再支持了，需要通过使用ifdown &amp; ifup来实现相应的操作。</p>

<ul>
<li>重启指定网卡</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ifdown eth0 &amp;&amp; ifup eth0</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>重启除lo网卡的所有网卡</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ifdown --exclude=lo -a &amp;&amp; sudo ifup --exclude=lo -a</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>配置桥接</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># apt-get install bridge-utils</span>
</span><span class='line'><span class="c"># cat /etc/network/interfaces</span>
</span><span class='line'>auto lo
</span><span class='line'>iface lo inet loopback
</span><span class='line'>
</span><span class='line'>auto eth0
</span><span class='line'>iface eth0 inet manual
</span><span class='line'>
</span><span class='line'>auto br0
</span><span class='line'>iface br0 inet static
</span><span class='line'>address 192.168.0.10
</span><span class='line'>netmask 255.255.255.0
</span><span class='line'>gateway 192.168.0.1
</span><span class='line'>bridge_ports eth0
</span><span class='line'>bridge_stp off
</span><span class='line'>bridge_fd 0
</span><span class='line'>bridge_maxwait 0
</span><span class='line'>dns-nameservers 192.168.0.1
</span><span class='line'><span class="c"># ifup br0</span>
</span><span class='line'><span class="c"># brctl  show</span>
</span><span class='line'>bridge name   bridge id       STP enabled interfaces
</span><span class='line'>br0       8000.02000a0080e1   no      eth0
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://bugs.launchpad.net/ubuntu/+source/ifupdown/+bug/1301015">Networking does not restart</a></li>
</ul>


<p>&#8211;EOF&#8211;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ssh MaxAuthTries]]></title>
    <link href="http://kumu-Linux.github.io/blog/2014/05/21/ssh-maxauthtries/"/>
    <updated>2014-05-21T23:05:00+08:00</updated>
    <id>http://kumu-Linux.github.io/blog/2014/05/21/ssh-maxauthtries</id>
    <content type="html"><![CDATA[<p>新建了一个Ubuntu14.04的虚拟机，使用xshell登陆，刚输入用户名后却直接抛出了 <code>Too many authentication failures for username</code> 的错误。ssh登陆失败尝试次数和<code>MaxAuthTries</code>值相关，直接<code>man sshd_config</code>获取该参数说明，得到如下内容：</p>

<!--more-->


<blockquote><p>MaxAuthTries</p>

<pre><code>Specifies the maximum number of authentication attempts permitted per connection.  
Once the number of failures reaches half this value, 
additional failures are logged.  The default is 6.
</code></pre></blockquote>

<p>让我很诧异的是，关键尼玛我还没有输入密码什么的啊，只是输入一个用户名就报错了。于是测试虚拟机本地ssh登陆，登陆正常，其它Linux主机登陆测试也正常，再测试xshell，依然是输入用户名之后报之前同样的错误。ssh本地<code>debug</code>模式再看下过程</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ssh -v 127.0.0.1
</span><span class='line'>... ...
</span><span class='line'>debug1: Trying private key: /home/test/.ssh/id_rsa
</span><span class='line'>debug1: Trying private key: /home/test/.ssh/id_dsa
</span><span class='line'>debug1: Trying private key: /home/test/.ssh/id_ecdsa
</span><span class='line'>debug1: Trying private key: /home/test/.ssh/id_ed25519
</span><span class='line'>debug1: Next authentication method: password
</span><span class='line'><span class="nb">test</span>@127.0.0.1<span class="err">&#39;</span>s password:
</span><span class='line'>... ...
</span></code></pre></td></tr></table></div></figure>


<p>debug模式看到这里，我自己有点明白了，ssh验证过程是先尝试私钥再进行密码，查看Xagent开启了3个私钥agent，所以3次没有匹配到私钥之后就断开报错了。<code>MaxAuthTries</code>值默认为6，但是<code>Once the number of failures reaches half this value</code>尝试次数达到设定值一半之后就不能再尝试了。</p>

<p>&#8211;EOF&#8211;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Openebula镜像制作]]></title>
    <link href="http://kumu-Linux.github.io/blog/2014/04/25/openebula-image/"/>
    <updated>2014-04-25T20:45:00+08:00</updated>
    <id>http://kumu-Linux.github.io/blog/2014/04/25/openebula-image</id>
    <content type="html"><![CDATA[<p><code>qemu-img</code>和<code>qemu-kvm</code>命令是制作系统镜像的重要工具，在介绍这两个工具之前，稍微简单说明下虚拟机镜像格式，目前虚拟机有多种镜像格式可供选择，常见的有如<code>raw</code>、<code>vdi</code>、<code>qcow2</code>、<code>vmdk</code>、<code>qed</code>、<code>vhd</code>等格式。</p>

<!--more-->


<h2>qemu-img</h2>

<p><code>qemu-img</code>是QEMU的磁盘管理工具，支持多种虚拟镜像格式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>qemu-img -h | grep Supported
</span><span class='line'>Supported formats: raw cow qcow vdi vmdk cloop dmg bochs vpc vvfat
</span><span class='line'>qcow2 qed parallels nbd blkdebug host_cdrom host_floppy host_device file
</span></code></pre></td></tr></table></div></figure>


<p><code>qemu-img</code>默认创建的格式是<code>raw</code>，man手册中对几种格式也都有介绍。以下为对raw和qcow2镜像的详细介绍：</p>

<h3>raw</h3>

<p>原始的磁盘镜像格式，qemu-img默认支持的格式，它的优势在于它非常简单而且非常容易移植到其他模拟器（emulator，QEMU 也是一个emulator）上去使用。如果客户机文件系统（如Linux上的ext2/ext3/ext4、Windows的NTFS）支持“空洞” （hole），那么镜像文件只有在被写有数据的扇区才会真正占用磁盘空间，从而有节省磁盘空间的作用。<code>qemu-img</code>默认的<code>raw</code>格式的文件其实是稀疏文件（sparse file）[<em>稀疏文件就是在文件中留有很多空余空间，留备将来插入数据使用。如果这些空余空间被ASCII码的NULL字符占据，并且这些空间相当大，那么，这个文件就被称为稀疏文件，而且，并不分配相应的磁盘块。</em>]，dd命令创建的也是raw格式，不过dd一开始就让镜像实际占用了分配的空间，而没有使用稀疏文件的方式对待空洞而节省磁盘空间。尽管一开始就实际占用磁盘空间的方式没有节省磁盘的效果，不过它在写入新的数据时不需要宿主机从现有磁盘空间中分配，从而在第一次写入数据时性能会比稀疏文件的方式更好一点。简单来说，raw有以下几个特点：</p>

<ul>
<li>寻址简单，访问效率高</li>
<li>可以通过格式转换工具方便地转换为其它格式</li>
<li>格式实现简单，不支持压缩、快照和加密</li>
<li>能够直接被宿主机挂载，不用开虚拟机即可在宿主和虚拟机间进行数据传输</li>
</ul>


<h3>qcow2</h3>

<p><code>qcow2</code>是qcow的一种改进，是Qemu实现的一种虚拟机镜像格式。更小的虚拟硬盘空间（尤其是宿主分区不支持hole的情况下），支持压缩、加密、快照功能，磁盘读写性能较raw差。</p>

<h3>qemu-img它支持的命令分为如下几种</h3>

<ul>
<li>（1）check [-f fmt] filename</li>
</ul>


<p>对磁盘镜像文件进行一致性检查，查找镜像文件中的错误，目前仅支持对<code>“qcow2”</code>、<code>“qed”</code>、<code>“vdi”</code>格式文件的检查。其中，<code>qcow2</code>是 QEMU 0.8.3版本引入的镜像文件格式，也是目前使用最广泛的格式。<code>qed</code>（QEMU enhanced disk）是从QEMU 0.14版开始加入的增强磁盘文件格式，为了避免qcow2格式的一些缺点，也为了提高性能，不过目前还不够成熟。而<code>vdi</code>（Virtual Disk Image）是Oracle的VirtualBox虚拟机中的存储格式。参数-f fmt是指定文件的格式，如果不指定格式<code>qemu-img</code>会自动检测，<code>filename</code>是磁盘镜像文件的名称（包括路径）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>qemu-img check CentOS6.4-x86_64.qcow2
</span><span class='line'>No errors were found on the image.
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>（2）create [-f fmt] filename [size]</li>
</ul>


<p>创建一个格式为fmt大小为size文件名为filename的镜像文件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>qemu-img create -f qcow2 test.qcow2 10G
</span><span class='line'>Formatting <span class="s1">&#39;test.qcow2&#39;</span>, <span class="nv">fmt</span><span class="o">=</span>qcow2 <span class="nv">size</span><span class="o">=</span>10737418240 <span class="nv">encryption</span><span class="o">=</span>off <span class="nv">cluster_size</span><span class="o">=</span>65536
</span><span class='line'><span class="nv">$ </span>qemu-img create -f qcow2 test.raw 10G
</span><span class='line'>Formatting <span class="s1">&#39;test.raw&#39;</span>, <span class="nv">fmt</span><span class="o">=</span>qcow2 <span class="nv">size</span><span class="o">=</span>10737418240 <span class="nv">encryption</span><span class="o">=</span>off <span class="nv">cluster_size</span><span class="o">=</span>65536
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><strong>注意</strong>：这里的qcow2后缀只是为了便于自己区分格式方便，如果不加后缀也可以通过qemu-img来获取镜像的格式。</p></blockquote>

<ul>
<li>（3）info [-f fmt] filename</li>
</ul>


<p>显示filename镜像文件的信息。如果文件是使用稀疏文件的存储方式，也会显示出它的本来分配的大小以及实际已占用的磁盘空间大小。如果文件中存放有客户机快照，快照的信息也会被显示出来。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>qemu-img info test.qcow2
</span><span class='line'>image: test.qcow2
</span><span class='line'>file format: qcow2
</span><span class='line'>virtual size: 10G <span class="o">(</span>10737418240 bytes<span class="o">)</span>
</span><span class='line'>disk size: 136K
</span><span class='line'>cluster_size: 65536
</span><span class='line'><span class="nv">$ </span>qemu-img info test.raw    //qemu-img生成raw格式镜像也是采用稀疏文件方式存储的
</span><span class='line'>image: test.raw
</span><span class='line'>file format: qcow2
</span><span class='line'>virtual size: 10G <span class="o">(</span>10737418240 bytes<span class="o">)</span>
</span><span class='line'>disk size: 136K
</span><span class='line'>cluster_size: 65536
</span><span class='line'><span class="nv">$ </span>dd &lt;/dev/zero &gt;test.dd <span class="nv">bs</span><span class="o">=</span>1MB <span class="nv">count</span><span class="o">=</span>1000
</span><span class='line'>1000+0 records in
</span><span class='line'>1000+0 records out
</span><span class='line'>1000000000 bytes <span class="o">(</span>1.0 GB<span class="o">)</span> copied, 1.80597 s, 554 MB/s
</span><span class='line'><span class="nv">$ </span>qemu-img info test.dd //可以看到dd产生的格式也是raw格式的，并且没有用到稀疏存储方式
</span><span class='line'>image: test.dd
</span><span class='line'>file format: raw
</span><span class='line'>virtual size: 954M <span class="o">(</span>1000000000 bytes<span class="o">)</span>
</span><span class='line'>disk size: 954M
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>（4） convert [-c] [-f fmt] [-O output_fmt] [-o options] filename [filename2 [&#8230;]] output_filename</li>
</ul>


<p>镜像格式转换，将fmt格式的filename镜像文件根据options选项转换为格式为<code>output_fmt</code>的名为<code>output_filename</code>的镜像文件。它支持不同格式的镜像文件之间的转换，比如可以用VMware用的vmdk格式文件转换为qcow2文件，这对从其他虚拟化方案转移到KVM上的用户非常有用。一般来说，输入文件格式fmt由qemu-img工具自动检测到，而输出文件格式output_fmt根据自己需要来指定，默认会被转换为与raw文件格式（且默认使用稀疏文件的方式存储以节省存储空间）。
其中，<code>“-c”</code>参数是对输出的镜像文件进行压缩，不过只有qcow2和qcow格式的镜像文件才支持压缩，而且这种压缩是只读的，如果压缩的扇区被重写，则会被重写为未压缩的数据。同样可以使用<code>“-o options”</code>来指定各种选项，如：后端镜像、文件大小、是否加密等等。使用<code>backing_file</code>选项来指定后端镜像，让生成的文件是<code>copy-on-write</code>的增量文件，这时必须让转换命令中指定的后端镜像与输入文件的后端镜像的内容是相同的，尽管它们各自后端镜像的目录、格式可能不同。</p>

<p>如果使用<code>qcow2</code>、<code>qcow</code>、<code>cow</code>等作为输出文件格式来转换<code>raw</code>格式的镜像文件（非稀疏文件格式），镜像转换还可以起到将镜像文件转化为更小的镜像，因为它可以将空的扇区删除使之在生成的输出文件中并不存在。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>qemu-img info test.dd
</span><span class='line'>image: test.dd
</span><span class='line'>file format: raw
</span><span class='line'>virtual size: 954M <span class="o">(</span>1000000000 bytes<span class="o">)</span>
</span><span class='line'>disk size: 954M
</span><span class='line'><span class="nv">$ </span>qemu-img convert -O qcow2  test.dd test_qcow2.qcow2
</span><span class='line'><span class="nv">$ </span>qemu-img info test_qcow2.qcow2
</span><span class='line'>image: test_qcow2.qcow2
</span><span class='line'>file format: qcow2
</span><span class='line'>virtual size: 954M <span class="o">(</span>1000000000 bytes<span class="o">)</span>
</span><span class='line'>disk size: 136K
</span><span class='line'>cluster_size: 65536
</span></code></pre></td></tr></table></div></figure>


<p>以上介绍了<code>qemu-img</code>的基本使用方法之后，关于<code>qemu-img</code>的更多高级用法可以参考man手册</p>

<h3>qemu-kvm</h3>

<h4>新建测试镜像</h4>

<p>因为qcow2的一些特性，这里采用qcow2格式制作系统镜像</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># qemu-img create -f qcow2 CentOS6.4-x86_64-tpl.qcow2 8G</span>
</span><span class='line'><span class="c"># chown oneadmin:oneadmin CentOS6.4-x86_64-tpl.qcow2</span>
</span><span class='line'>Formatting <span class="s1">&#39;CentOS6.4-x86_64-tpl.qcow2&#39;</span>, <span class="nv">fmt</span><span class="o">=</span>qcow2 <span class="nv">size</span><span class="o">=</span>8589934592 <span class="nv">encryption</span><span class="o">=</span>off <span class="nv">cluster_size</span><span class="o">=</span>65536
</span></code></pre></td></tr></table></div></figure>


<h4>安装系统</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># /usr/libexec/qemu-kvm -m 1024 -cdrom /data/images/CentOS-6.4-x86_64-bin-DVD1.iso -drive \</span>
</span><span class='line'><span class="nv">file</span><span class="o">=</span>/data/images/CentOS6.4-x86_64-tpl.qcow2,if<span class="o">=</span>virtio -net nic,model<span class="o">=</span>virtio <span class="se">\</span>
</span><span class='line'>-net tap,script<span class="o">=</span>no  -boot d -nographic -vnc :0
</span></code></pre></td></tr></table></div></figure>


<p>上面命令参数解释如下：</p>

<pre><code>-m                      指定内存大小
-cdrom                  指定系统iso镜像
-drive file=xx,if=xx    指定硬盘镜像,file=镜像文件名,if=镜像格式类型
-net nic,model=xx       表示网卡配置,model=模拟网卡类型,默认rt18139
-net tap,script=no      虚拟设备，桥接网络,script表启动虚拟机自动执行网络配置脚本，如果不需要启动，写no即可
-boot d                 系统启动顺序,d表示表示cdrom
-nographic              关闭图形输出
-vnc :0                 开启vnc监听
</code></pre>

<p>详细的关于<code>qemu-kvm</code>的参数使用说明请参考man手册。</p>

<p>输入以上命令之后，通过VNC客户端连接按照正常的安装流程安装系统即可。默认VNC端口从5900开始。</p>

<h2>桥接网络</h2>

<p>如果虚拟机需要和外界通信，则需要创建桥接网络，之前介绍<code>qemu-kvm</code>安装时提到<code>-net tap,script=no</code>选项，默认只是创建桥接虚拟网络，并没有启用，只有启用了才可以设置对应网络配置和外界通信。</p>

<h3>手动桥接</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ip link show dev tap0          //使用如上方式默认创建虚拟网卡tap0，状态为DOWN</span>
</span><span class='line'>37: tap0: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN qlen 500
</span><span class='line'>    link/ether d2:b0:af:7b:23:0f brd ff:ff:ff:ff:ff:ff
</span><span class='line'><span class="c"># brctl show br0              //查看桥接列表，没有tap0</span>
</span><span class='line'>bridge name   bridge id       STP enabled interfaces
</span><span class='line'>br0       8000.b8975a626020   no      eth0
</span></code></pre></td></tr></table></div></figure>


<p>通过以下方式桥接网络</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ip link set tap0 up            //使tap0状态变为up</span>
</span><span class='line'><span class="c"># brctl addif br0 tap0            //桥接tap0到br0</span>
</span><span class='line'><span class="c"># brctl show br0                  //显示tap0已经加入到桥接列表</span>
</span><span class='line'>bridge name   bridge id       STP enabled interfaces
</span><span class='line'>br0       8000.b8975a626020   no      eth0
</span><span class='line'>                                       tap0
</span></code></pre></td></tr></table></div></figure>


<p>如此，配置好虚拟机的网络就可以和外界通信了。</p>

<p><code>brctl delif br0 tap0</code>删除桥接网络，<code>qemu-kvm</code>工具在客户机关闭时会自动解除TAP设备的bridge绑定，所以这一步无需操作。</p>

<h3>脚本实现</h3>

<p>如果不想每次都手动操作，则可以通过脚本自动化实现虚拟网卡的桥接。使用选项<code>-net tap,script=/tmp/qemu-ifup.sh</code> 把之前的no替换为需要执行的脚本，以下为<code>qemu-ifup.sh</code>脚本内容</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># cat /tmp/qemu-ifup.sh </span>
</span><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 桥接网络设备</span>
</span><span class='line'><span class="nv">switch</span><span class="o">=</span>br0                 //设置桥接网卡
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -n <span class="nv">$1</span> <span class="o">]</span>; <span class="k">then</span>          //<span class="nv">$1</span>为qemu-kvm传递值，这里是tap
</span><span class='line'>    ip link <span class="nb">set</span> <span class="nv">$1</span> up
</span><span class='line'>    brctl addif <span class="k">${</span><span class="nv">switch</span><span class="k">}</span> <span class="nv">$1</span>
</span><span class='line'>    <span class="nb">exit </span>0
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">   </span><span class="nb">echo</span> <span class="s2">&quot;no interface!&quot;</span>
</span><span class='line'>   <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<h2>系统相关优化</h2>

<p>完成系统安装配置之后，需要对镜像模板系统做如下一系列优化操作：</p>

<h3>selinux、iptables、服务、文件描述符设置</h3>

<p># 关闭SELINUX</p>

<pre><code>sed -i -c 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/sysconfig/selinux
</code></pre>

<p># iptables根据相关需求配置，一般关闭iptables服务</p>

<p># 关闭系统其它额外的服务</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">service</span><span class="o">=</span><span class="sb">`</span>chkconfig --list | grep <span class="s1">&#39;3:on&#39;</span> | awk <span class="s1">&#39;{print $1}&#39;</span><span class="sb">`</span>
</span><span class='line'><span class="k">for </span>i in <span class="nv">$service</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">  case</span> <span class="nv">$i</span> in
</span><span class='line'>      acpid | crond | irqbalance |  messagebus | network | sshd | rsyslog | udev-post<span class="o">)</span>
</span><span class='line'>          chkconfig --level 2345 <span class="nv">$i</span> on
</span><span class='line'>      ;;
</span><span class='line'>      *<span class="o">)</span>
</span><span class='line'>          chkconfig --level 2345 <span class="nv">$i</span> off   
</span><span class='line'>      ;;
</span><span class='line'>  <span class="k">esac    </span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p># 文件描述符相关配置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat &gt;&gt;/etc/security/limits.conf <span class="s">&lt;&lt;EOF</span>
</span><span class='line'><span class="s">*               soft    nofile          65535</span>
</span><span class='line'><span class="s">*               hard    nofile          65535</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'>sed -i <span class="s1">&#39;/1024/s/1024/65535/&#39;</span> /etc/security/limits.d/90-nproc.conf
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><strong>注：</strong> 经测试acpid服务必须安装且在虚拟机系统中开启，否则OpenNebula web端和shell终端发送关机命令无效。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux性能优化--CPU[备忘]]]></title>
    <link href="http://kumu-Linux.github.io/blog/2014/04/21/performance-cpu/"/>
    <updated>2014-04-21T17:52:00+08:00</updated>
    <id>http://kumu-Linux.github.io/blog/2014/04/21/performance-cpu</id>
    <content type="html"><![CDATA[<p>Linux性能相关可以从以下几方面入手：</p>

<ul>
<li>CPU</li>
<li>Memory</li>
<li>IO</li>
<li>Network</li>
</ul>


<!--more-->


<p>这些子系统之间关系相互彼此依赖的，任何一个高负载都会导致其他子系统出现问题，比如：</p>

<ul>
<li>大量的页请求导致内存队列的拥塞</li>
<li>网卡的大吞吐量可能导致更多的CPU开销</li>
<li>大量的CPU开销又尝试更多的内存使用请求</li>
<li>大量来自内存的磁盘写请求可能导致更多的cpu以及IO问题</li>
</ul>


<h2>CPU</h2>

<p>主要关注点在运行队列、利用率、上下文切换</p>

<ul>
<li>Run Queues - 每个处理器应该运行队列不超过1-3个线程，一个双核处理器应该运行队列不要超过6个线程</li>
<li>CPU Utiliation - 如果一个CPU被充分使用，利用率分类之间均衡的比例应该是：

<ul>
<li>65% - 70% User Time</li>
<li>30% - 35% System Time</li>
<li>0% - %5 Idle Time</li>
</ul>
</li>
<li>Context Switches - 上下文切换的数目直接关系到CPU的使用率，如果CPU利用率保持在上述均衡状态时，大量的上下文切换是正常的</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vmstat 2
</span><span class='line'>procs -----------memory---------- ---swap-- -----io---- --system-- -----cpu------
</span><span class='line'> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
</span><span class='line'> 4  0  42808 130596  70836 23084420    0    0     0     5    0    0  5  2 93  0  0
</span><span class='line'> 8  0  42808 129388  70836 23084904    0    0     0    30 10987 80554  9  3 88  0  0
</span><span class='line'> 6  0  42808 137428  70828 23076148    0    0     0    26 11129 80587  9  3 88  0  0
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>r</code> The amount of threads in the run queue. These are threads that are runnable, but the CPU is not available to execute them.

<ul>
<li>当前<code>运行队列中线程的数目</code>.代表线程处于可运行状态,但CPU还未能执行.</li>
</ul>
</li>
<li><code>b</code> This is the number of processes blocked and waiting on IO requests to finish.

<ul>
<li>当前<code>进程阻塞并等待IO请求完成的数目</code></li>
</ul>
</li>
<li><code>in</code> This is the number of interrupts being processed.

<ul>
<li>当前<code>中断</code>被处理的数目</li>
</ul>
</li>
<li><code>cs</code> This is the number of context switches currently happening on the system.

<ul>
<li>当前kernel system中,发生<code>上下文切换</code>的数目</li>
</ul>
</li>
<li><code>us</code> This is the percentage of user CPU utilization.

<ul>
<li>CPU利用率的百分比</li>
</ul>
</li>
<li><code>sys</code> This is the percentage of kernel and interrupts utilization.

<ul>
<li><code>内核和中断利用率的百分比</code></li>
</ul>
</li>
<li><code>wa</code> This is the percentage of idle processor time due to the fact that ALL runnable threads are blocked waiting on IO.

<ul>
<li>所有<code>可运行状态线程被阻塞在等待IO请求的百分比</code></li>
</ul>
</li>
<li><code>id</code> This is the percentage of time that the CPU is completely idle.

<ul>
<li>CPU空闲时间的百分比</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mpstat -P ALL 1   <span class="c"># 查看单个cpu利用率情况，同`sar -P ALL 1`</span>
</span><span class='line'>16时17分05秒  CPU   %user   %nice    %sys %iowait    %irq   %soft  %steal   %idle    intr/s
</span><span class='line'>16时17分07秒  all    2.62    0.00    0.29    0.10    0.04    0.33    0.00   96.61  11159.00
</span><span class='line'>16时17分07秒    0    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00   1000.50
</span><span class='line'>16时17分07秒    1    0.00    0.00    0.00    1.01    0.00    0.00    0.00   98.99     26.00
</span><span class='line'>16时17分07秒    2    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00      0.00
</span><span class='line'>16时17分07秒    3    0.50    0.00    0.00    0.00    0.00    0.00    0.00   99.50      0.00
</span><span class='line'>16时17分07秒    4    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00      0.00
</span><span class='line'>16时17分07秒    5    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00      0.00
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="k">while</span> :; <span class="k">do </span>ps -eo pid,ni,pri,pcpu,psr,comm | <span class="se">\</span>
</span><span class='line'>grep <span class="s1">&#39;mysqld&#39;</span>; sleep 1 ;<span class="k">done</span> <span class="c"># ps通过查看psr队列获取进程占用哪个cpu</span>
</span></code></pre></td></tr></table></div></figure>


<p>top也可以实时查看占用哪个cpu</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>top -p <span class="sb">`</span>pgrep mysql | xargs | tr <span class="s2">&quot; &quot;</span> <span class="s2">&quot;,&quot;</span><span class="sb">`</span> <span class="c"># 执行如上命令之后输入`f`,然后输入`j`回车即可</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>pri</code>优先级动态值，<code>ni</code>为静态值，root用户可以调高nice优先级[-20~19]，-20为优先级最高，普通用户只能调低优先级，两者关系：<code>pri[new]=pri[old]+nice</code></p>

<p>监控CPU性能由以下几个部分组成：</p>

<ul>
<li>1、检查system的运行队列，以及确定不要超过每个处理器3个可运行状态线程的限制</li>
<li>2、确定CPU利用率中user/system比例维持在70/30</li>
<li>3、当CPU开销更多的时间在system mode，那就说明已经超负荷并且应该尝试重新调度优先级</li>
<li>4、当I/O处理增长，CPU相应的应用将会受到影响</li>
</ul>


<p>&#8211;EOF&#8211;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[grub install with kvm virtio disk]]></title>
    <link href="http://kumu-Linux.github.io/blog/2014/03/26/grub-virtio/"/>
    <updated>2014-03-26T14:31:00+08:00</updated>
    <id>http://kumu-Linux.github.io/blog/2014/03/26/grub-virtio</id>
    <content type="html"><![CDATA[<p>grub-install ERROR: not suitable driver was found</p>

<!--more-->


<ul>
<li>First</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>grub-install /dev/vda
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Second</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># grub</span>
</span><span class='line'>&gt; device <span class="o">(</span>hd0<span class="o">)</span> /dev/vda
</span><span class='line'>&gt; root <span class="o">(</span>hd0,0<span class="o">)</span>
</span><span class='line'>&gt; setup <span class="o">(</span>hd0<span class="o">)</span>
</span><span class='line'>&gt; quit
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>/boot/grub/device.map</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">(</span>hd0<span class="o">)</span> /dev/vda
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ssh X11Forawarding占用OpenNebula kvm端口]]></title>
    <link href="http://kumu-Linux.github.io/blog/2014/03/24/opennebula-port/"/>
    <updated>2014-03-24T17:04:00+08:00</updated>
    <id>http://kumu-Linux.github.io/blog/2014/03/24/opennebula-port</id>
    <content type="html"><![CDATA[<p>虚拟机重建出现如下错误：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>virsh create deployment.0
</span><span class='line'>error: Failed to create domain from deployment.0
</span><span class='line'>error: Unable to <span class="nb">read </span>from monitor: Connection reset by peer
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>通过日志发现kvm端口被ssh占用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># tail -f /var/log/libvirt/qemu/one-120.log</span>
</span><span class='line'>… …
</span><span class='line'>inet_listen_opts: <span class="nb">bind</span><span class="o">(</span>ipv4,0.0.0.0,6010<span class="o">)</span>: Address already in use
</span><span class='line'>… …
</span><span class='line'><span class="c"># netstat -tulnp | grep 6010</span>
</span><span class='line'>tcp        0      0 127.0.0.1:6010          0.0.0.0:*               LISTEN      28575/5
</span><span class='line'><span class="c"># ps -ef | grep 28575</span>
</span><span class='line'>root     28575  0.0  0.0  73484  3656 ?        Ss   13:03   0:00 sshd: root@pts/5
</span></code></pre></td></tr></table></div></figure>


<p>后查明原因是sshd_config配置文件默认开启<code>X11Forawarding</code>，<code>X11Forawarding</code>默认占用端口为6010开始，和OpenNebula kvm端口占用有冲突。另外，如果连接工具没有开启<code>X11Forawarding</code>，Server端也不会开启转发占用端口的，根本解决方法就是禁用<code>X11Forawarding</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># grep X11Forwarding /etc/ssh/sshd_config </span>
</span><span class='line'>X11Forwarding no
</span><span class='line'><span class="c"># /etc/init.d/sshd restart</span>
</span></code></pre></td></tr></table></div></figure>


<p>退出已登录的ssh连接，重新登录就不会出现端口占用的问题了，推荐默认关闭X11Forawarding，这在之前的文章<a href="http://kumu-linux.github.io/blog/2013/09/26/ssh-safe/">ssh的一些安全设定</a>已经介绍过了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[2]salt文件分发]]></title>
    <link href="http://kumu-Linux.github.io/blog/2014/02/20/salt-file-manager/"/>
    <updated>2014-02-20T22:12:00+08:00</updated>
    <id>http://kumu-Linux.github.io/blog/2014/02/20/salt-file-manager</id>
    <content type="html"><![CDATA[<p><strong>取消配置文件<code>/etc/salt/master</code>以下注释</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>... ...
</span><span class='line'>file_roots:
</span><span class='line'>  base:
</span><span class='line'>    - /srv/salt
</span><span class='line'>... ...</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p><strong>新建相关目录</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir /srv/salt
</span><span class='line'>touch /srv/salt/top.sls</span></code></pre></td></tr></table></div></figure>


<p>top.sls文件
<code>/srv/salt/top.sls</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>base:
</span><span class='line'>  '*':
</span><span class='line'>    - ssh_key.key</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir /srv/salt/ssh_key
</span><span class='line'>touch /srv/salt/test.sls</span></code></pre></td></tr></table></div></figure>


<p><code>/srv/salt/test.sls</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/root/.ssh/authorized_keys: 
</span><span class='line'># 客户端文件存放路径和命名，如果.ssh目录不存在则会自动新建
</span><span class='line'>  file:
</span><span class='line'>    - managed
</span><span class='line'>    - source: salt://ssh_key/test   
</span><span class='line'>    # 默认file根目录为`/srv/salt`，拷贝相应文件至所在目录
</span><span class='line'>    - user: root
</span><span class='line'>    - group: root
</span><span class='line'>    - mode: 600</span></code></pre></td></tr></table></div></figure>


<p><strong>最终目录结构</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># tree /srv/salt/
</span><span class='line'>/srv/salt/
</span><span class='line'>|-- ssh_key
</span><span class='line'>|   |-- test
</span><span class='line'>|   |-- test.sls
</span><span class='line'>`-- top.sl</span></code></pre></td></tr></table></div></figure>


<p><strong>server端主动推送</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>salt '*' state.highstate -v     # 按照top.sls执行所有
</span><span class='line'>salt '*' state.sls ssh_key.ms   # 指定sls执行</span></code></pre></td></tr></table></div></figure>


<p>&#8211;EOF&#8211;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[1]salt install]]></title>
    <link href="http://kumu-Linux.github.io/blog/2014/02/20/salt-install/"/>
    <updated>2014-02-20T21:57:00+08:00</updated>
    <id>http://kumu-Linux.github.io/blog/2014/02/20/salt-install</id>
    <content type="html"><![CDATA[<h2>Install</h2>

<p>First => repl源</p>

<p>rhel6</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rpm -ivh \
</span><span class='line'>http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>rhel5</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rpm -ivh \
</span><span class='line'>http://dl.fedoraproject.org/pub/epel/5/x86_64/epel-release-5-4.noarch.rpm</span></code></pre></td></tr></table></div></figure>


<h3>Server</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum install salt-master
</span><span class='line'>chkconfig salt-master on
</span><span class='line'>service salt-master start  # salt-master -d也可以启动</span></code></pre></td></tr></table></div></figure>


<h3>Client</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum install salt-minion
</span><span class='line'>chkconfig salt-minion on
</span><span class='line'>service salt-minion start  # salt-minion -d也可以启动</span></code></pre></td></tr></table></div></figure>


<p>使用<code>--user</code>选项可以选择运行salt的用户</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>salt-master -d --user test
</span><span class='line'>salt-minion -d --user test</span></code></pre></td></tr></table></div></figure>


<h2>Configure</h2>

<h3>Master基本配置</h3>

<p><code>/etc/salt/master</code>主配置文件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>... ...
</span><span class='line'>interface: 192.168.80.131   # 取消外网监听
</span><span class='line'>... ...
</span><span class='line'>autosign_file: /etc/salt/autosign.conf  # 设定匹配主机自动接受key
</span><span class='line'>... ...</span></code></pre></td></tr></table></div></figure>


<p>restart生效</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/etc/init.d/salt-master restart</span></code></pre></td></tr></table></div></figure>


<h3>Client基本配置</h3>

<p><code>/etc/salt/minion</code>主配置文件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>... ...
</span><span class='line'>master: 192.168.80.131  # 取消外网监听
</span><span class='line'>... ...</span></code></pre></td></tr></table></div></figure>


<p>restart生效</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>service salt-minion restart</span></code></pre></td></tr></table></div></figure>


<h2>基本命令</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># salt-key -L   # 列出当前所有key，包括接受、未接受、拒绝的key
</span><span class='line'>Accepted Keys:
</span><span class='line'>Unaccepted Keys:
</span><span class='line'>kumu-ops-130.puppet.com
</span><span class='line'>Rejected Keys:
</span><span class='line'># salt-key -A   # 接受所有未认证key
</span><span class='line'>The following keys are going to be accepted:
</span><span class='line'>Unaccepted Keys:
</span><span class='line'>kumu-ops-130.puppet.com
</span><span class='line'>Proceed? [n/Y] y
</span><span class='line'>Key for minion kumu-ops-130.puppet.com accepted.</span></code></pre></td></tr></table></div></figure>


<ul>
<li>添加某个key, <code>salt-key -a keyname</code></li>
<li>删除某个key，<code>slat-key -d keyname</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># salt kumu-ops-130.puppet.com test.ping
</span><span class='line'># salt '*' test.ping    # 测试所有主机连通性</span></code></pre></td></tr></table></div></figure>


<h3>匹配</h3>

<ul>
<li>匹配所有的Client

<ul>
<li><code>salt '*' test.ping</code></li>
</ul>
</li>
<li>匹配符合条件的Client

<ul>
<li><code>salt '*.example.net' test.ping</code></li>
<li><code>salt '*.example.*' test.ping</code></li>
</ul>
</li>
<li>单个匹配Client

<ul>
<li><code>salt 'web?.example.net' test.ping</code></li>
</ul>
</li>
<li>匹配web1到web5

<ul>
<li><code>salt 'web[1-5]' test.ping</code></li>
</ul>
</li>
<li>匹配web-x、web-y、web-z Client

<ul>
<li><code>salt 'web-[x-z]' test.ping</code></li>
</ul>
</li>
<li>匹配web1-prod和web1-devel的Client

<ul>
<li><code>salt -E 'web1-(prod|devel)' test.ping</code></li>
</ul>
</li>
<li>列表

<ul>
<li><code>salt -L 'web1,web2,web3' test.ping</code></li>
</ul>
</li>
</ul>


<h3>Grains</h3>

<p>salt配备了一个获取底层信息的接口<code>Grains</code>，grains的信息都是静态信息，不可变的</p>

<ul>
<li>匹配所有的CentOS Client：

<ul>
<li><code>salt -G 'os:CentOS' test.ping</code></li>
</ul>
</li>
<li>查看grains分类:

<ul>
<li><code>salt '*' grains.ls</code></li>
</ul>
</li>
<li>查看grains所有信息:

<ul>
<li><code>salt '*' grains.items</code></li>
</ul>
</li>
<li>osrelease查看grains某个信息:

<ul>
<li><code>salt '*' grains.item</code></li>
</ul>
</li>
</ul>


<h3>More&#8230;</h3>

<p>查看salt更多的命令手册 <code>salt '*' sys.doc</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[opennebula 3.8 market兼容问题]]></title>
    <link href="http://kumu-Linux.github.io/blog/2014/02/20/opennebula-market/"/>
    <updated>2014-02-20T16:12:00+08:00</updated>
    <id>http://kumu-Linux.github.io/blog/2014/02/20/opennebula-market</id>
    <content type="html"><![CDATA[<p>今天下午发现公司所有的OpenNebula Sunstone访问出错，而且错误界面关闭不了，严重影响操作</p>

<!--more-->




<center><img src="http://kumu-Linux.github.io/images/OpenNebula/OpenNebula_market_err.png" /></center>


<p>Firebug获知锁定错误为market插件</p>

<center><img src="http://kumu-Linux.github.io/images/OpenNebula/OpenNebula_market_err2.png" /></center>


<p>Google获知原因所在，具体问题可以参见<a href="http://www.marshut.com/iqmmzn/opennebula-3-8-and-market-compatiable-problem.html">opennebula-3-8-and-market-compatiable-problem</a> ，解决方法是关闭sunstone的Market plugins，修改<code>etc/sunstone-plugins.yaml</code>配置文件，修改下行从<code>True</code>变为<code>false</code>，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span> <span class="n">plugins</span><span class="o">/</span><span class="n">marketplace</span><span class="o">-</span><span class="n">tab</span><span class="o">.</span><span class="n">js</span><span class="p">:</span>
</span><span class='line'>    <span class="ss">:ALL</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>    <span class="ss">:user</span><span class="p">:</span>
</span><span class='line'><span class="ss">:group</span><span class="p">:</span>
</span></code></pre></td></tr></table></div></figure>


<p>完成之后刷新页面即可恢复正常</p>

<p>&#8211;EOF&#8211;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL复制备忘]]></title>
    <link href="http://kumu-Linux.github.io/blog/2014/02/17/mysql-rep/"/>
    <updated>2014-02-17T22:50:00+08:00</updated>
    <id>http://kumu-Linux.github.io/blog/2014/02/17/mysql-rep</id>
    <content type="html"><![CDATA[<ul>
<li><a href="#repl1">复制的用途</a></li>
<li><a href="#repl2">复制工作过程</a></li>
<li><a href="#repl3">复制配置</a>

<ul>
<li><a href="#repl4">创建复制账号</a></li>
<li><a href="#repl5">配置主库和备库</a></li>
<li><a href="#repl6">启动复制</a></li>
</ul>
</li>
<li><a href="#repl7">线上运行后主从配置</a></li>
<li><a href="#repl8">一些重要选项</a></li>
<li><a href="#repl9">参考</a></li>
</ul>


<h2 id="env">环境说明</h2>


<p>MySQL支持两种复制方式：基于行的复制和基于语句的复制，两种方式都是通过在主库上记录二进制日志，在被库重复日志的方式来实现异步的数据复制。</p>

<!--more-->




<h2 id="repl1">复制的用途：</h2>


<ul>
<li>数据分布</li>
<li>负载均衡</li>
<li>备份

<ul>
<li>复制只是备份的一种技术补充，但是不能取代备份</li>
</ul>
</li>
<li>高可用性和故障切除

<ul>
<li>避免单点故障</li>
</ul>
</li>
<li>MySQL升级测试</li>
</ul>


<h2 id="repl2">复制工作过程：</h2>


<ul>
<li>1、主库把数据更改记录到二进制日志[Binary Log]中</li>
<li>2、备库将主库上的日志复制到自己的中继日志[Relay Log]中</li>
<li>3、备库读取中继日志中的事件，将其重放到备库数据之上</li>
</ul>


<center><img src="http://kumu-Linux.github.io/images/mysql_rep/mysql_rep1.jpg" /></center>


<p>第一步是主库记录二进制日志。在每次准备提交事务完成数据更新前，主库将数据更新的事件记录到二进制日志中，MySQL会按照事务提交的顺序而不是语句执行顺序来记录二进制日志。在记录二进制日志后，主库会告诉存储引擎可以提交事务了。然后备库复制二进制日志到其本地中继日志中，首先备库会启动一个工作线程，称为I/O线程，I/O和主库建立一个普通的客户端连接，然后在主库上启动一个特殊的二进制转储[binlog dump]线程[无对应SQL命令]，该线程会读取主库上二进制日志的事件，如果该线程追赶上主库将睡眠状态，直到主库发送信号量通知其有新事件产生才会被唤醒，备库I/O线程会将收到的事件记录到中继日记。备库复制过程有两个线程，一个SQL线程和一个IO线程。</p>

<h2 id="repl3">复制配置：</h2>


<p>要求：主备拥有同样的数据</p>

<p>过程：</p>

<ul>
<li>1、在每台服务器上创建复制账号[推荐这么做]</li>
<li>2、配置主库和备库</li>
<li>3、通知备库连接到主库并从主库复制数据</li>
</ul>


<h3 id="repl4">创建复制账号</h3>


<p>主从推荐都加，其实主只需要REPLICATION SLAVE权限就可以了，主要目的是:</p>

<ul>
<li>1、监控和管理复制的账号需要REPLICATION CLIENT权限，使用同一账号方便管理</li>
<li>2、方便角色切换</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">GRANT</span> <span class="n">REPLICATION</span> <span class="n">SLAVE</span><span class="p">,</span> <span class="n">REPLICATION</span> <span class="n">CLIENT</span> <span class="k">ON</span> <span class="o">*</span><span class="p">.</span><span class="o">*</span>
</span><span class='line'>    <span class="o">-&gt;</span> <span class="k">TO</span> <span class="n">repl</span><span class="o">@</span><span class="s1">&#39;192.168.0.%&#39;</span> <span class="n">IDENTIFIED</span> <span class="k">BY</span> <span class="s1">&#39;pass&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<h3 id="repl5">配置主库和备库</h3>


<p>主库：打开二进制日志选项，指定唯一的server id，在配置文件<code>my.cnf</code>修改如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="p">[</span><span class="n">mysqld</span><span class="p">]</span>
</span><span class='line'><span class="n">log</span><span class="o">-</span><span class="n">bin</span><span class="o">=</span><span class="n">bin</span>
</span><span class='line'><span class="n">server</span><span class="o">-</span><span class="n">id</span><span class="o">=</span><span class="mi">1</span>     <span class="c1"># server id值应该唯一，防止相同</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果之前没有开启二进制日志，则需要重启MySQL服务，为确保二进制是否已经创建，使用SHOW MASTER STATUS命令检查</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SHOW</span> <span class="n">MASTER</span> <span class="n">STATUS</span><span class="err">\</span><span class="n">G</span>
</span><span class='line'><span class="o">+----------------+-----------+--------------+------------------+-------------------+</span>
</span><span class='line'><span class="o">|</span> <span class="n">File</span>           <span class="o">|</span> <span class="n">Position</span>  <span class="o">|</span> <span class="n">Binlog_Do_DB</span> <span class="o">|</span> <span class="n">Binlog_Ignore_DB</span> <span class="o">|</span> <span class="n">Executed_Gtid_Set</span> <span class="o">|</span>
</span><span class='line'><span class="o">+----------------+-----------+--------------+------------------+-------------------+</span>
</span><span class='line'><span class="o">|</span> <span class="n">bin</span><span class="o">-</span><span class="n">log</span><span class="p">.</span><span class="mi">000001</span> <span class="o">|</span> <span class="mi">400</span>       <span class="o">|</span>              <span class="o">|</span>                  <span class="o">|</span>                   <span class="o">|</span>
</span><span class='line'><span class="o">+----------------+-----------+--------------+------------------+-------------------+</span>
</span><span class='line'><span class="mi">1</span> <span class="n">row</span> <span class="k">in</span> <span class="kt">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>备库修改配置如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="p">[</span><span class="n">mysqld</span><span class="p">]</span>
</span><span class='line'><span class="n">log</span><span class="o">-</span><span class="n">bin</span><span class="o">=</span><span class="n">bin</span>
</span><span class='line'><span class="n">server</span><span class="o">-</span><span class="n">id</span><span class="o">=</span><span class="mi">2</span>
</span><span class='line'><span class="n">relay</span><span class="o">-</span><span class="n">log</span><span class="o">=</span><span class="n">mysqld</span><span class="o">-</span><span class="n">relay</span><span class="o">-</span><span class="n">bin</span>
</span><span class='line'><span class="n">log</span><span class="o">-</span><span class="n">slave</span><span class="o">-</span><span class="n">updates</span><span class="o">=</span><span class="mi">1</span>
</span><span class='line'><span class="c1"># 如果是A -&gt; B -&gt; C架构需要启用log-slave-updates该选项，允许备库将其重放的事件也记录到自身的二进制日志中</span>
</span><span class='line'><span class="n">read_only</span><span class="o">=</span><span class="mi">1</span>     <span class="c1"># 防止从库被修改</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>log_slave_updates</code>选项可以让备库变成其它服务器的主库,下图为发送复制事件到其它备库</p>

<center><img src="http://kumu-Linux.github.io/images/mysql_rep/mysql_rep2.jpg" /></center>




<h3 id="repl6">启动复制</h3>


<p>从库启动复制配置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">CHANGE</span> <span class="n">MASTER</span> <span class="k">TO</span>
</span><span class='line'>    <span class="o">-&gt;</span> <span class="n">MASTER_HOST</span><span class="o">=</span><span class="s1">&#39;192.168.0.10&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="o">-&gt;</span> <span class="n">MASTER_USER</span><span class="o">=</span><span class="s1">&#39;repl&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="o">-&gt;</span> <span class="n">MASTER_PASSWORD</span><span class="o">=</span><span class="s1">&#39;pass&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="o">-&gt;</span> <span class="n">MASTER_LOG_FILE</span><span class="o">=</span><span class="s1">&#39;bin-log.000001&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="o">-&gt;</span> <span class="n">MASTER_LOG_POS</span><span class="o">=</span><span class="mi">400</span><span class="p">,</span>
</span><span class='line'>    <span class="o">-&gt;</span> <span class="n">MASTER_CONNECT_RETRY</span><span class="o">=</span><span class="mi">10</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>查看当前状态</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SHOW</span> <span class="n">SLAVE</span> <span class="n">STATUS</span><span class="err">\</span><span class="n">G</span>
</span><span class='line'><span class="o">***************************</span> <span class="mi">1</span><span class="p">.</span> <span class="n">row</span> <span class="o">***************************</span>
</span><span class='line'>               <span class="n">Slave_IO_State</span><span class="p">:</span>
</span><span class='line'>                  <span class="n">Master_Host</span><span class="p">:</span> <span class="mi">192</span><span class="p">.</span><span class="mi">168</span><span class="p">.</span><span class="mi">0</span><span class="p">.</span><span class="mi">10</span>
</span><span class='line'>                  <span class="n">Master_User</span><span class="p">:</span> <span class="n">repl</span>
</span><span class='line'>                  <span class="n">Master_Port</span><span class="p">:</span> <span class="mi">3306</span>
</span><span class='line'>                <span class="n">Connect_Retry</span><span class="p">:</span> <span class="mi">60</span>
</span><span class='line'>              <span class="n">Master_Log_File</span><span class="p">:</span> <span class="n">bin</span><span class="o">-</span><span class="n">log</span><span class="p">.</span><span class="mi">000001</span>
</span><span class='line'>          <span class="n">Read_Master_Log_Pos</span><span class="p">:</span> <span class="mi">400</span>
</span><span class='line'>               <span class="n">Relay_Log_File</span><span class="p">:</span> <span class="n">mysqld</span><span class="o">-</span><span class="n">relay</span><span class="o">-</span><span class="n">bin</span><span class="p">.</span><span class="mi">000001</span>
</span><span class='line'>                <span class="n">Relay_Log_Pos</span><span class="p">:</span> <span class="mi">400</span>
</span><span class='line'>        <span class="n">Relay_Master_Log_File</span><span class="p">:</span> <span class="n">bin</span><span class="o">-</span><span class="n">log</span><span class="p">.</span><span class="mi">000001</span>
</span><span class='line'>             <span class="n">Slave_IO_Running</span><span class="p">:</span> <span class="n">No</span>
</span><span class='line'>            <span class="n">Slave_SQL_Running</span><span class="p">:</span> <span class="n">No</span>
</span><span class='line'>            <span class="p">...</span>
</span><span class='line'>            <span class="n">Seconds_Behind_Master</span><span class="p">:</span> <span class="no">NULL</span>
</span></code></pre></td></tr></table></div></figure>


<p>START SLAVE</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="n">START</span> <span class="n">SLAVE</span><span class="p">;</span>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SHOW</span> <span class="n">SLAVE</span> <span class="n">STATUS</span><span class="err">\</span><span class="n">G</span>
</span><span class='line'><span class="o">***************************</span> <span class="mi">1</span><span class="p">.</span> <span class="n">row</span> <span class="o">***************************</span>
</span><span class='line'>               <span class="n">Slave_IO_State</span><span class="p">:</span> <span class="n">Waiting</span> <span class="k">for</span> <span class="n">master</span> <span class="k">to</span> <span class="n">send</span> <span class="n">event</span>
</span><span class='line'>                  <span class="n">Master_Host</span><span class="p">:</span> <span class="mi">192</span><span class="p">.</span><span class="mi">168</span><span class="p">.</span><span class="mi">0</span><span class="p">.</span><span class="mi">10</span>
</span><span class='line'>                  <span class="n">Master_User</span><span class="p">:</span> <span class="n">repl</span>
</span><span class='line'>                  <span class="n">Master_Port</span><span class="p">:</span> <span class="mi">3306</span>
</span><span class='line'>                <span class="n">Connect_Retry</span><span class="p">:</span> <span class="mi">60</span>
</span><span class='line'>              <span class="n">Master_Log_File</span><span class="p">:</span> <span class="n">bin</span><span class="o">-</span><span class="n">log</span><span class="p">.</span><span class="mi">000001</span>
</span><span class='line'>          <span class="n">Read_Master_Log_Pos</span><span class="p">:</span> <span class="mi">400</span>
</span><span class='line'>               <span class="n">Relay_Log_File</span><span class="p">:</span> <span class="n">mysqld</span><span class="o">-</span><span class="n">relay</span><span class="o">-</span><span class="n">bin</span><span class="p">.</span><span class="mi">000001</span>
</span><span class='line'>                <span class="n">Relay_Log_Pos</span><span class="p">:</span> <span class="mi">400</span>
</span><span class='line'>        <span class="n">Relay_Master_Log_File</span><span class="p">:</span> <span class="n">bin</span><span class="o">-</span><span class="n">log</span><span class="p">.</span><span class="mi">000001</span>
</span><span class='line'>             <span class="n">Slave_IO_Running</span><span class="p">:</span> <span class="n">Yes</span>
</span><span class='line'>            <span class="n">Slave_SQL_Running</span><span class="p">:</span> <span class="n">Yes</span>
</span><span class='line'>            <span class="p">...</span>
</span><span class='line'>            <span class="n">Seconds_Behind_Master</span><span class="p">:</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>




<h2 id="repl7">线上服务器配置主从</h2>


<p>很多情况下,一些主库已经运行很长时间了，需要做主从同步，这时从库还没有数据，那么就要把主的数据导入到从。</p>

<p>冷备：</p>

<p>最基本的方法是关闭主库，把数据复制到备库。然后重启主库后，会使用一个新的二进制文件，在备库执行<code>CHANGE MASTER TO</code>指向这个文件的起始处即可。[缺点很明显，关闭主库]</p>

<p>使用热备份：</p>

<pre><code>*   如果只使用MyISAM表，可以使用mysqldump等方式保持数据一致性备份
</code></pre>

<p>使用mysqldump：</p>

<pre><code>*   如果只包含InnoDB表，那么使用mysqldump如下命令备份数据
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="n">mysqldump</span> <span class="o">-</span><span class="n">hxx</span><span class="p">.</span><span class="n">xx</span><span class="p">.</span><span class="n">xx</span><span class="p">.</span><span class="n">xx</span> <span class="o">--</span><span class="n">single</span><span class="o">-</span><span class="n">transaction</span> <span class="o">--</span><span class="k">all</span><span class="o">-</span><span class="k">databases</span> <span class="err">\</span>
</span><span class='line'>    <span class="o">--</span><span class="n">master</span><span class="o">-</span><span class="n">data</span><span class="o">=</span><span class="mi">1</span> <span class="o">&gt;</span> <span class="k">all</span><span class="o">-</span><span class="k">databases</span><span class="p">.</span><span class="k">sql</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者边导出边写入</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="n">mysqldump</span> <span class="o">-</span><span class="n">hmaster_ip</span> <span class="o">--</span><span class="n">single</span><span class="o">-</span><span class="n">transaction</span> <span class="o">--</span><span class="k">all</span><span class="o">-</span><span class="k">databases</span> <span class="err">\</span>
</span><span class='line'>    <span class="o">--</span><span class="n">master</span><span class="o">-</span><span class="n">data</span><span class="o">=</span><span class="mi">1</span> <span class="o">|</span> <span class="n">mysql</span> <span class="o">-</span><span class="n">hslave_ip</span>
</span></code></pre></td></tr></table></div></figure>


<p>master-data默认值是1，加上之后会记录Position点并执行<code>CHANGE MASTER TO MASTER_LOG_FILE='bin-log.xxxx', MASTER_LOG_POS=xxxx;</code>语句，为2则记录但会注释<code>CHANGE MASTER</code>语句，不会被执行。关于备份可以使用其它的工具如Percona Xtrabackup等等</p>

<ul>
<li>A-B-C方式

<ul>
<li>B为从和主身份时，B实例上需要设置<code>logs-slave-updates</code>选项，这个选项告诉从服务器将其SQL线程执行的更新记录到从服务器自己的二进制日志上，当然前提是需要开启binlog</li>
</ul>
</li>
</ul>


<h2 id="repl8">一些重要的选项</h2>


<ul>
<li>[主]主库上二进制日志最重要的选项:<code>sync_binlog</code>，推荐设置成1，保证在服务器崩溃时不丢失事件，虽然会降低性能</li>
<li>[主从]<code>innodb_flush_log_at_trx_commit</code>根据实际情况设置</li>
<li>二进制日志推荐使用指定命名，如<code>log-bin=bin</code>[主从]，中继日志指定命名<code>relay-log=mysqld-relay-bin</code>[从]</li>
<li>[从]<code>skip_slave_start</code>选项可以阻止备库崩溃后自动启动复制，预留时间修复</li>
<li>[从]<code>read_only</code>，可以阻止大部分用户更改非临时表，除了复制SQL线程和其它拥有超级权限的用户之外</li>
</ul>


<p>关于主从复制的一些问题，这里暂不讨论</p>

<h2 id="repl9">参考</h2>


<ul>
<li>《高性能MySQL第三版》</li>
<li><a href="http://dev.mysql.com/doc/refman/5.6/en/index.html">MySQL 5.6 Reference Manual</a></li>
</ul>


<p>&#8211;EOF&#8211;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenNebula4.4入门之安装和节点配置]]></title>
    <link href="http://kumu-Linux.github.io/blog/2013/12/19/opennebula4-dot-4/"/>
    <updated>2013-12-19T10:51:00+08:00</updated>
    <id>http://kumu-Linux.github.io/blog/2013/12/19/opennebula4-dot-4</id>
    <content type="html"><![CDATA[<p>OpenNebula入门的PDF文档已可下载，<a href="http://vdisk.weibo.com/s/EKoLFfHiE-oT/1387002741">OpenNebula4.4入门配置</a>，本博客连载更新相关内容</p>

<!--more-->


<p><strong>本文内容目录组成如下</strong>：</p>

<ul>
<li><a href="#env">环境说明</a></li>
<li><a href="#soft">软件包组成</a></li>
<li><a href="#server">Server端安装和配置</a></li>
<li><a href="#node_server">节点端安装配置</a></li>
<li><a href="#node_add">添加节点</a>

<ul>
<li><a href="#onehost">onehost</a></li>
</ul>
</li>
</ul>


<h2 id="env">环境说明</h2>


<p>因为CentOS6.4虚拟化有很大的一个提升，所以系统环境管理端和节点宿主机都采用CentOS6.4 x86_64</p>

<h2 id="soft">软件包组成</h2>


<p>从OpenNebula官网下载<a href="http://downloads.opennebula.org/packages/opennebula-4.4.0/CentOS-6/CentOS-6-opennebula-4.4.0-1.tar.gz">CentOS/RHEL 6</a>对应软件包或者加入OpenNebula源，直接下载软件包这里不再赘述，添加OpenNebula源方法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># cat &lt;&lt; EOT &gt; /etc/yum.repos.d/opennebula.repo</span>
</span><span class='line'><span class="o">[</span>opennebula<span class="o">]</span>
</span><span class='line'><span class="nv">name</span><span class="o">=</span>opennebula
</span><span class='line'><span class="nv">baseurl</span><span class="o">=</span>http://downloads.opennebula.org/repo/CentOS/6/stable/<span class="se">\$</span>basearch
</span><span class='line'><span class="nv">enabled</span><span class="o">=</span>1
</span><span class='line'><span class="nv">gpgcheck</span><span class="o">=</span>0
</span><span class='line'>EOT
</span></code></pre></td></tr></table></div></figure>


<p>OpenNebula4.4主要有以下几个软件组成：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ls opennebula-*</span>
</span><span class='line'>opennebula-4.4.0-1.x86_64.rpm           //OpenNebula命令行指令
</span><span class='line'>opennebula-flow-4.4.0-1.x86_64.rpm      //管理OpenNebula服务
</span><span class='line'>opennebula-java-4.4.0-1.x86_64.rpm      //OpenNebula Java Api
</span><span class='line'>opennebula-ozones-4.4.0-1.x86_64.rpm    //OpenNebula网页使用界面
</span><span class='line'>opennebula-server-4.4.0-1.x86_64.rpm    //OpenNebula Server守护进程
</span><span class='line'>opennebula-common-4.4.0-1.x86_64.rpm    //基本依赖性组件
</span><span class='line'>opennebula-gate-4.4.0-1.x86_64.rpm      //使虚拟机和OpenNebula之间的通信
</span><span class='line'>opennebula-node-kvm-4.4.0-1.x86_64.rpm  //元软件包，包括安装oneadmin用户、libvirt和kvm
</span><span class='line'>opennebula-ruby-4.4.0-1.x86_64.rpm      //ruby依赖性组件
</span><span class='line'>opennebula-sunstone-4.4.0-1.x86_64.rpm  //OpenNebula网页使用界面
</span><span class='line'>opennebula-context-4.4.0-1.x86_64.rpm   //context组件
</span></code></pre></td></tr></table></div></figure>




<h2 id="server">Server端安装和配置</h2>


<p>为解决一些依赖关系，安装之前可以激活epel源，因为测试为CentOS6.4，因此激活方式如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># rpm -ivh http://dl.fedoraproject.org/pub/epel/6Server/x86_64/epel-release-6-8.noarch.rpm</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果下载的是OpenNebula软件包，则进入解压目录，安装方式如下 [以下安装为组成Server端最基本的软件]：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># yum localinstall opennebula-server-4.4.0-1.x86_64.rpm  \</span>
</span><span class='line'>opennebula-4.4.0-1.x86_64.rpm opennebula-common-4.4.0-1.x86_64.rpm <span class="se">\</span>
</span><span class='line'>opennebula-ruby-4.4.0-1.x86_64.rpm opennebula-sunstone-4.4.0-1.x86_64 -y
</span></code></pre></td></tr></table></div></figure>


<p>如果使用OpenNebula的源，安装如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># yum install opennebula-server opennebula-sunstone -y</span>
</span></code></pre></td></tr></table></div></figure>


<p>安装完成之后创建如下用户以及目录文件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># grep oneadmin /etc/passwd</span>
</span><span class='line'>oneadmin:x:9869:9869::/var/lib/one:/bin/bash
</span><span class='line'><span class="c"># ls -ld /etc/one/  //OpenNebula相关配置文件所在目录</span>
</span><span class='line'>drwxr-x---. 11 root oneadmin 4096 Aug 20 11:35 /etc/one/
</span><span class='line'><span class="c"># ls /etc/init.d/opennebula*</span>
</span><span class='line'>/etc/init.d/opennebula  /etc/init.d/opennebula-occi  /etc/init.d/opennebula-sunstone
</span><span class='line'><span class="c"># ls -ld /var/log/one/</span>
</span><span class='line'>drwxr-x---. 2 oneadmin oneadmin 4096 Jul 25 01:13 /var/log/one/
</span></code></pre></td></tr></table></div></figure>


<p>默认OpenNebula数据存储使用sqlite，如果需要使用MySQL，则需要做如下操作：<br/>
<strong>1.</strong>  创建相关数据库：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mysql&gt; create database opennebula;
</span><span class='line'>Query OK, 1 row affected <span class="o">(</span>0.00 sec<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>mysql&gt; grant all privileges on opennebula.* to oneadmin@<span class="s1">&#39;localhost&#39;</span> identified by <span class="s1">&#39;oneadmin&#39;</span>;
</span><span class='line'>Query OK, 0 rows affected <span class="o">(</span>0.00 sec<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>mysql&gt; flush privileges;
</span><span class='line'>Query OK, 0 rows affected <span class="o">(</span>0.00 sec<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>2.</strong>  修改配置文件如下 [用户、端口、密码、库名和实际情况对应修改]：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># vim /etc/one/oned.conf</span>
</span><span class='line'>… …
</span><span class='line'><span class="c">#DB = [ backend = &quot;sqlite&quot; ]</span>
</span><span class='line'><span class="c"># Sample configuration for MySQL</span>
</span><span class='line'><span class="nv">DB</span> <span class="o">=</span> <span class="o">[</span> <span class="nv">backend</span> <span class="o">=</span> <span class="s2">&quot;mysql&quot;</span>,
</span><span class='line'>       <span class="nv">server</span>  <span class="o">=</span> <span class="s2">&quot;localhost&quot;</span>,
</span><span class='line'>       <span class="nv">port</span>    <span class="o">=</span> 3306,
</span><span class='line'>       <span class="nv">user</span>    <span class="o">=</span> <span class="s2">&quot;oneadmin&quot;</span>,
</span><span class='line'>       <span class="nv">passwd</span>  <span class="o">=</span> <span class="s2">&quot;oneadmin&quot;</span>,
</span><span class='line'>       <span class="nv">db_name</span> <span class="o">=</span> <span class="s2">&quot;opennebula&quot;</span> <span class="o">]</span>
</span><span class='line'>… …
</span></code></pre></td></tr></table></div></figure>


<p>修改sunstone默认监听IP:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># grep &#39;:host&#39; /etc/one/sunstone-server.conf </span>
</span><span class='line'>:host: 127.0.0.1
</span><span class='line'><span class="c"># sed -i &#39;/:host/s/127.0.0.1/192.168.80.130/g&#39; /etc/one/sunstone-server.conf</span>
</span><span class='line'><span class="c"># grep &#39;:host&#39; /etc/one/sunstone-server.conf </span>
</span><span class='line'>:host: 192.168.80.130
</span></code></pre></td></tr></table></div></figure>


<p>启动相关服务:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># /etc/init.d/opennebula start</span>
</span><span class='line'><span class="c"># /etc/init.d/opennebula-sunstone start</span>
</span><span class='line'><span class="c"># lsof -i:9869</span>
</span><span class='line'>COMMAND   PID     USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
</span><span class='line'>ruby    22266 oneadmin    6u  IPv4 106746      0t0  TCP 192.168.80.130:9869 <span class="o">(</span>LISTEN<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>修改datastore:</p>

<p>OpenNebula默认用的是Shared Transfer Driver，这种模式比较适合快速部署和热迁移，只是要配置网络文件系统。如果没有网络文件系统，不想做热迁移，那么可以换成SSH Transfer Driver测试部署。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>onedatastore list
</span><span class='line'>  ID NAME                SIZE AVAIL CLUSTER      IMAGES TYPE DS       TM
</span><span class='line'>   0 system                0M -     -                 0 sys  -        shared
</span><span class='line'>   1 default            98.4G 85%   -                 1 img  fs       shared
</span><span class='line'>   2 files              98.4G 85%   -                 0 fil  fs       ssh
</span><span class='line'><span class="nv">$ </span>onedatastore update 1
</span><span class='line'><span class="nv">CLONE_TARGET</span><span class="o">=</span><span class="s2">&quot;SYSTEM&quot;</span>
</span><span class='line'><span class="nv">DISK_TYPE</span><span class="o">=</span><span class="s2">&quot;FILE&quot;</span>
</span><span class='line'><span class="nv">DS_MAD</span><span class="o">=</span><span class="s2">&quot;fs&quot;</span>
</span><span class='line'><span class="nv">LN_TARGET</span><span class="o">=</span><span class="s2">&quot;SYSTEM&quot;</span>
</span><span class='line'><span class="nv">TM_MAD</span><span class="o">=</span><span class="s2">&quot;ssh&quot;</span>
</span><span class='line'><span class="nv">TYPE</span><span class="o">=</span><span class="s2">&quot;IMAGE_DS&quot;</span>
</span><span class='line'><span class="nv">$ </span>onedatastore list
</span><span class='line'>  ID NAME                SIZE AVAIL CLUSTER      IMAGES TYPE DS       TM
</span><span class='line'>   0 system                0M -     -                 0 sys  -        shared
</span><span class='line'>   1 default            98.4G 85%   -                 1 img  fs       ssh
</span><span class='line'>   2 files              98.4G 85%   -                 0 fil  fs       ssh
</span></code></pre></td></tr></table></div></figure>


<p>修改过程产生如下错误：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>onedatastore update 1
</span><span class='line'>Editor not defined
</span></code></pre></td></tr></table></div></figure>


<p>这是因为如下原因，CentOS默认vi位置是/bin/vi，添加相关链接即可</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># grep -i editor_path= /usr/lib/one/ruby/cli/one_helper.rb</span>
</span><span class='line'><span class="nv">EDITOR_PATH</span><span class="o">=</span><span class="s1">&#39;/usr/bin/vi&#39;</span>
</span><span class='line'><span class="c"># ln -s /bin/vi /usr/bin/vi</span>
</span></code></pre></td></tr></table></div></figure>


<p>用户名和密码通过以下方式获得：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># cat /var/lib/one/.one/one_auth </span>
</span><span class='line'>oneadmin:cd24c3a59c9fd8a7ab853b10247e8147
</span></code></pre></td></tr></table></div></figure>


<p><strong>注</strong>：测试过程中因为测试环境服务端时间不对，导致cookie被忽略，OpenNebula Sunstone选择Keep me logged in一直登陆不上或者直接登陆很快退出，寻找原因花了很长时间，最后调整到正确时间，登陆显示ok。P.S: 时间是一个非常容易被我们忽略的问题，切记切记!</p>

<p>完成以上步骤之后，浏览器登陆 <a href="http://ip:9869">http://ip:9869</a> 即可</p>

<h2 id="node_server">节点端安装配置</h2>


<p>软件包下载见Server端安装章节，节点只需要安装以下两个软件</p>

<pre><code>opennebula-node-kvm-4.4.0-1.x86_64.rpm  
opennebula-common-4.4.0-1.x86_64.rpm
</code></pre>

<p>yum安装以上软件即可，安装过程同时会安装虚拟化相关组件，包括bridge-utils、libvirt、qemu-kvm、qemu-img等。</p>

<p>桥接网络：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># cat /etc/sysconfig/network-scripts/ifcfg-eth0 </span>
</span><span class='line'><span class="nv">DEVICE</span><span class="o">=</span>eth0
</span><span class='line'><span class="nv">TYPE</span><span class="o">=</span>Ethernet
</span><span class='line'><span class="nv">ONBOOT</span><span class="o">=</span>yes
</span><span class='line'><span class="nv">BRIDGE</span><span class="o">=</span>br0
</span><span class='line'><span class="nv">NAME</span><span class="o">=</span><span class="s2">&quot;System eth0&quot;</span>
</span><span class='line'><span class="c"># cat /etc/sysconfig/network-scripts/ifcfg-br0</span>
</span><span class='line'><span class="nv">DEVICE</span><span class="o">=</span>br0
</span><span class='line'><span class="nv">ONBOOT</span><span class="o">=</span>yes
</span><span class='line'><span class="nv">TYPE</span><span class="o">=</span>Bridge
</span><span class='line'><span class="nv">BOOTPROTO</span><span class="o">=</span>static
</span><span class='line'><span class="nv">IPADDR</span><span class="o">=</span>192.168.80.131
</span><span class='line'><span class="nv">NETMASK</span><span class="o">=</span>255.255.255.0
</span><span class='line'><span class="nv">GATEWAY</span><span class="o">=</span>192.168.80.2
</span></code></pre></td></tr></table></div></figure>


<p>修改之后，重启网络并查看确认：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># service network restart</span>
</span><span class='line'><span class="c"># brctl show</span>
</span><span class='line'>bridge name bridge id       STP enabled interfaces
</span><span class='line'>br0     8000.000c2942e561   no      eth0
</span></code></pre></td></tr></table></div></figure>


<p>修改/etc/libvirt/qemu.conf的相关配置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">user</span>  <span class="o">=</span> <span class="s2">&quot;oneadmin&quot;</span>
</span><span class='line'><span class="nv">group</span> <span class="o">=</span> <span class="s2">&quot;oneadmin&quot;</span>
</span><span class='line'><span class="nv">dynamic_ownership</span> <span class="o">=</span> 0
</span></code></pre></td></tr></table></div></figure>


<p>修改/etc/libvirt/libvirtd.conf相关配置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">listen_tcp</span> <span class="o">=</span> 1          //OpenNebula使用libvirt提供的TCP协议
</span><span class='line'><span class="nv">listen_tls</span> <span class="o">=</span> 0
</span></code></pre></td></tr></table></div></figure>


<p>修改/etc/sysconfig/libvirtd开启监听选项：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">LIBVIRTD_ARGS</span><span class="o">=</span><span class="s2">&quot;--listen&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>启动libvirtd服务：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># /etc/init.d/libvirtd start</span>
</span><span class='line'><span class="c"># netstat -tulnp | grep libvirt</span>
</span><span class='line'>tcp        0      0 0.0.0.0:16509               0.0.0.0:*                   LISTEN      2664/libvirtd
</span></code></pre></td></tr></table></div></figure>


<p>ssh无密码登陆：</p>

<p>ssh使用公钥认证无密码登陆这个比较简单，顺带也提一下，方法如下：</p>

<p><strong>管理端</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># su - oneadmin</span>
</span><span class='line'><span class="nv">$ </span>cat ~/.ssh/config     //增加超时时间，不询问直接添加主机到known_hosts文件
</span><span class='line'>ConnectTimeout 5
</span><span class='line'>Host *
</span><span class='line'>    StrictHostKeyChecking no
</span><span class='line'>    UserKnownHostsFile /dev/null
</span></code></pre></td></tr></table></div></figure>


<p><strong>节点端</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># su - oneadmin</span>
</span><span class='line'><span class="nv">$ </span>vim .ssh/authorized_keys          //把管理端ssh公钥加入节点.ssh/authorized_keys文件
</span><span class='line'><span class="nv">$ </span>chmod 400 .ssh/authorized_keys
</span></code></pre></td></tr></table></div></figure>


<p>如此，Server端的oneadmin用户就可以无密码登陆节点oneadmin了。</p>

<h2 id="node_add">添加节点</h2>


<p>节点如此安装软件和配置之后便可以在Server端添加了，可以使用web添加，也可以使用命令添加。关于web界面的添加可以参考本人共享的pdf文档，这里不作具体的介绍，只介绍命令添加。</p>

<h3 id="onehost">onehost命令</h3>


<p>使用命令行添加主机也比较简单，这里使用的命令是<strong>onehost</strong></p>

<p>使用onehost命令删除之前web创建的主机，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>su - oneadmin
</span><span class='line'><span class="nv">$ </span>onehost list
</span><span class='line'>  ID NAME            CLUSTER   RVM      ALLOCATED_CPU      ALLOCATED_MEM STAT
</span><span class='line'>   1 192.168.80.131  -           0       0 / 400 <span class="o">(</span>0%<span class="o">)</span>     0K / 3.7G <span class="o">(</span>0%<span class="o">)</span> on
</span><span class='line'><span class="nv">$ </span>onehost delete 1      //删除主机，可以是ID也可以是NAME
</span><span class='line'><span class="nv">$ </span>onehost list
</span><span class='line'>  ID NAME            CLUSTER   RVM      ALLOCATED_CPU      ALLOCATED_MEM static
</span></code></pre></td></tr></table></div></figure>


<p>当然删除之后我们还是需要再创建一遍，虽然很无聊，But你懂的，如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>onehost create 192.168.80.131 --im kvm --vm kvm --net dummy
</span><span class='line'>ID: 2
</span><span class='line'><span class="nv">$ </span>onehost list
</span><span class='line'>  ID NAME            CLUSTER   RVM      ALLOCATED_CPU      ALLOCATED_MEM STAT
</span><span class='line'>   2 192.168.80.131  -           0       0 / 400 <span class="o">(</span>0%<span class="o">)</span>     0K / 3.7G <span class="o">(</span>0%<span class="o">)</span> on
</span></code></pre></td></tr></table></div></figure>


<pre><code>--im/-i:信息管理driver. 可选: kvm, xen, vmware, ec2, ganglia, dummy.
--vm/-v: 虚拟化管理driver. 可选: kvm, xen, vmware, ec2, dummy.
--net/-n: 虚拟网络driver. 可选: 802.1Q,dummy,ebtables,fw,ovswitch,vmware.
</code></pre>

<p>查看主机的详细信息 <strong>onehost show</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>onehost show 2
</span><span class='line'>HOST 2 INFORMATION
</span><span class='line'>ID                    : 2
</span><span class='line'>NAME                  : 192.168.80.131
</span><span class='line'>CLUSTER               : -
</span><span class='line'>STATE                 : MONITORED
</span><span class='line'>IM_MAD                : kvm
</span><span class='line'>VM_MAD                : kvm
</span><span class='line'>VN_MAD                : dummy
</span><span class='line'>LAST MONITORING TIME  : 11/29 22:19:21
</span><span class='line'>
</span><span class='line'>HOST SHARES
</span><span class='line'>TOTAL MEM             : 3.7G
</span><span class='line'>USED MEM <span class="o">(</span>REAL<span class="o">)</span>       : 111M
</span><span class='line'>USED MEM <span class="o">(</span>ALLOCATED<span class="o">)</span>  : 0K
</span><span class='line'>TOTAL CPU             : 400
</span><span class='line'>USED CPU <span class="o">(</span>REAL<span class="o">)</span>       : 0
</span><span class='line'>USED CPU <span class="o">(</span>ALLOCATED<span class="o">)</span>  : 0
</span><span class='line'>RUNNING VMS           : 0
</span><span class='line'>
</span><span class='line'>… …
</span></code></pre></td></tr></table></div></figure>


<p>通过-x选项还可以以xml的格式显示主机相关信息</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>onehost show -x 2
</span><span class='line'>&lt;HOST&gt;
</span><span class='line'>  &lt;ID&gt;2&lt;/ID&gt;
</span><span class='line'>  &lt;NAME&gt;192.168.80.131&lt;/NAME&gt;
</span><span class='line'>  &lt;STATE&gt;2&lt;/STATE&gt;
</span><span class='line'>  &lt;IM_MAD&gt;kvm&lt;/IM_MAD&gt;
</span><span class='line'>  &lt;VM_MAD&gt;kvm&lt;/VM_MAD&gt;
</span><span class='line'>  &lt;VN_MAD&gt;dummy&lt;/VN_MAD&gt;
</span><span class='line'>  &lt;LAST_MON_TIME&gt;1385735001&lt;/LAST_MON_TIME&gt;
</span><span class='line'>  &lt;CLUSTER_ID&gt;-1&lt;/CLUSTER_ID&gt;
</span><span class='line'>  &lt;CLUSTER/&gt;
</span><span class='line'>  &lt;HOST_SHARE&gt;
</span><span class='line'>    &lt;DISK_USAGE&gt;0&lt;/DISK_USAGE&gt;
</span><span class='line'>    &lt;MEM_USAGE&gt;0&lt;/MEM_USAGE&gt;
</span><span class='line'>    &lt;CPU_USAGE&gt;0&lt;/CPU_USAGE&gt;
</span><span class='line'>    &lt;MAX_DISK&gt;0&lt;/MAX_DISK&gt;
</span><span class='line'>    &lt;MAX_MEM&gt;3916984&lt;/MAX_MEM&gt;
</span><span class='line'>    &lt;MAX_CPU&gt;400&lt;/MAX_CPU&gt;
</span><span class='line'>    &lt;FREE_DISK&gt;0&lt;/FREE_DISK&gt;
</span><span class='line'>    &lt;FREE_MEM&gt;3803128&lt;/FREE_MEM&gt;
</span><span class='line'>    &lt;FREE_CPU&gt;399&lt;/FREE_CPU&gt;
</span><span class='line'>    &lt;USED_DISK&gt;0&lt;/USED_DISK&gt;
</span><span class='line'>    &lt;USED_MEM&gt;113856&lt;/USED_MEM&gt;
</span><span class='line'>    &lt;USED_CPU&gt;0&lt;/USED_CPU&gt;
</span><span class='line'>    &lt;RUNNING_VMS&gt;0&lt;/RUNNING_VMS&gt;
</span><span class='line'>  &lt;/HOST_SHARE&gt;
</span><span class='line'>… …
</span></code></pre></td></tr></table></div></figure>


<p>onehost还有两个选项,disable和enable，disable表示不再监控该物理主机，但是不影响正在运行的虚拟机，enable表示开启监控</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>onehost disable 0
</span><span class='line'><span class="nv">$ </span>onehost <span class="nb">enable </span>0
</span></code></pre></td></tr></table></div></figure>


<p>&#8211;EOF&#8211;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[qemu-kvm桥接网络]]></title>
    <link href="http://kumu-Linux.github.io/blog/2013/12/10/kvm-tap/"/>
    <updated>2013-12-10T22:22:00+08:00</updated>
    <id>http://kumu-Linux.github.io/blog/2013/12/10/kvm-tap</id>
    <content type="html"><![CDATA[<!--more-->


<h2>手动桥接</h2>

<p>qemu-kvm安装或者启动虚拟系统的时候如果需要和外界通信，那么就要设置网络桥接</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/usr/libexec/qemu-kvm -m 1024 <span class="se">\</span>
</span><span class='line'>-drive <span class="nv">file</span><span class="o">=</span>/data/images/CentOS6_4.qcow2,if<span class="o">=</span>virtio <span class="se">\</span>
</span><span class='line'>-net nic,model<span class="o">=</span>virtio -net tap,script<span class="o">=</span>no -nographic -vnc :0
</span></code></pre></td></tr></table></div></figure>


<p>使用<code>-net tap,script=no</code>方式启动之后，系统会生成tapX的虚拟网卡,默认是DOWN状态的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ip link show dev tap0</span>
</span><span class='line'>37: tap0: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN qlen 500
</span><span class='line'>    link/ether d2:b0:af:7b:23:0f brd ff:ff:ff:ff:ff:ff
</span></code></pre></td></tr></table></div></figure>


<p>如果想和外界通信，可以手动执行生效，如下所示当前与br0桥接的设备，并没有tap相关的网卡</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># brctl show br0</span>
</span><span class='line'>bridge name   bridge id       STP enabled interfaces
</span><span class='line'>br0       8000.b8975a626020   no      eth0
</span><span class='line'>                          vnet0
</span><span class='line'>                          vnet1
</span></code></pre></td></tr></table></div></figure>


<p>我们需要把tap0也桥接到br0下以便和外界通信，方法如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ip link set tap0 up        //使tap0状态变为up</span>
</span><span class='line'><span class="c"># brctl addif br0 tap0        //桥接tap0到br0</span>
</span><span class='line'><span class="c"># brctl show br0          </span>
</span><span class='line'>bridge name   bridge id       STP enabled interfaces
</span><span class='line'>br0       8000.b8975a626020   no      eth0
</span><span class='line'>                          tap0
</span><span class='line'>                          vnet0
</span><span class='line'>                          vnet1
</span></code></pre></td></tr></table></div></figure>


<p><code>brctl delif br0 tap0</code>删除桥接网络，qemu-kvm工具在客户机关闭时会自动解除TAP设备的bridge绑定，所以这一步无需操作</p>

<h2>脚本实现</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/usr/libexec/qemu-kvm -m 1024 <span class="se">\</span>
</span><span class='line'>-drive <span class="nv">file</span><span class="o">=</span>/data/images/CentOS6_4.qcow2,if<span class="o">=</span>virtio <span class="se">\</span>
</span><span class='line'>-net nic,model<span class="o">=</span>virtio -net tap,script<span class="o">=</span>/tmp/qemu-ifup.sh -nographic -vnc :0
</span></code></pre></td></tr></table></div></figure>


<p>如上<code>tap,script=/tmp/qemu-ifup.sh</code>指定script网络配置启动前启动脚本，脚本内容如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># cat /tmp/qemu-ifup.sh </span>
</span><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 桥接网络设备</span>
</span><span class='line'><span class="nv">switch</span><span class="o">=</span>br0
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -n <span class="nv">$1</span> <span class="o">]</span>; <span class="k">then</span>          //<span class="nv">$1</span>为qemu-kvm传递值，这里是tap
</span><span class='line'>    ip link <span class="nb">set</span> <span class="nv">$1</span> up
</span><span class='line'>    brctl addif <span class="k">${</span><span class="nv">switch</span><span class="k">}</span> <span class="nv">$1</span>
</span><span class='line'>    <span class="nb">exit </span>0
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">   </span><span class="nb">echo</span> <span class="s2">&quot;no interface!&quot;</span>
</span><span class='line'>   <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>如此，便不需要每次手动添加了</p>

<p>这部分内容的理解主要是 <a href="http://smilejay.com/2012/08/kvm-bridge-networking/">KVM使用网桥模式</a> 这篇文章，顺便推荐此博主的《KVM虚拟化技术：实战与原理解析》一书，对系统的学习KVM很有帮助</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[svn and git Server备忘]]></title>
    <link href="http://kumu-Linux.github.io/blog/2013/12/09/svn-git/"/>
    <updated>2013-12-09T13:58:00+08:00</updated>
    <id>http://kumu-Linux.github.io/blog/2013/12/09/svn-git</id>
    <content type="html"><![CDATA[<h2><u>Git Server with ssh</u></h2>

<!--more-->


<ul>
<li>Server</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>useradd -s /usr/bin/git-shell git   //创建git用户
</span><span class='line'>git init --bare /home/git/testrepo  //初始化名为testrepo，Server端操作
</span><span class='line'>mkdir /home/git/.ssh -p
</span><span class='line'>vim .ssh/authorized_keys            //加入客户端ssh公钥，设置ssh公钥认证
</span><span class='line'>chmod 700 /home/git/.ssh/
</span><span class='line'>chmod 400 /home/git/.ssh/authorized_keys
</span><span class='line'>chown git:git -R /home/git
</span></code></pre></td></tr></table></div></figure>


<p>注意：如果是root用户执行的命令，需要修改权限如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>chown -R git:git testrepo
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Client</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git@sevrer_ip:/home/git/testrepo  //克隆repo
</span></code></pre></td></tr></table></div></figure>


<p>具体操作</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>testrepo                         //进入本地版本库
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;hello&quot;</span> &gt;&gt; <span class="nb">test</span>                //新建测试文件
</span><span class='line'>git add <span class="nb">test</span>                        //添加到git缓存
</span><span class='line'>git commit -m <span class="s2">&quot;first commit&quot;</span> <span class="nb">test</span>   //本地提交
</span><span class='line'>git push -u origin master           //提交给远程服务器
</span><span class='line'>git pull                            //客户端拉取数据
</span></code></pre></td></tr></table></div></figure>


<h2><u>Svn Server with apache &amp;&amp; ldap</u></h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>yum install subversion mod_dav_svn -y
</span></code></pre></td></tr></table></div></figure>


<p>yum安装后会生成subversion.conf并添加相应模块配置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># grep LoadModule /etc/httpd/conf.d/subversion.conf </span>
</span><span class='line'>LoadModule dav_svn_module     modules/mod_dav_svn.so
</span><span class='line'>LoadModule authz_svn_module   modules/mod_authz_svn.so
</span></code></pre></td></tr></table></div></figure>


<p>svn创建库</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>svnadmin create --fs-type fsfs /var/www/svn
</span><span class='line'>chown apache:apache -R /var/www/svn
</span></code></pre></td></tr></table></div></figure>


<p>设置ldap认证</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># grep -vE &#39;^$|^#&#39; /etc/httpd/conf.d/subversion.conf </span>
</span><span class='line'>LoadModule dav_svn_module     modules/mod_dav_svn.so
</span><span class='line'>LoadModule authz_svn_module   modules/mod_authz_svn.so
</span><span class='line'>&lt;Location /svn&gt;
</span><span class='line'>    DAV svn
</span><span class='line'>    SVNPath /var/www/svn
</span><span class='line'>    AuthBasicProvider ldap
</span><span class='line'>    AuthType Basic
</span><span class='line'>    AuthzLDAPAuthoritative off
</span><span class='line'>    AuthName <span class="s2">&quot;Please provide your windows login credentials to continue.&quot;</span>
</span><span class='line'>    AuthLDAPURL <span class="s2">&quot;ldap://ldap_ip/ou=users,ou=test,dc=intranet,dc=test,dc=com?sAMAccountName&quot;</span> NONE
</span><span class='line'>    AuthLDAPBindDN <span class="s2">&quot;test@intranet.test.com&quot;</span>
</span><span class='line'>    AuthLDAPBindPassword password
</span><span class='line'>    require valid-user
</span><span class='line'>&lt;/Location&gt;
</span></code></pre></td></tr></table></div></figure>


<p>启动apache</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>service httpd start
</span></code></pre></td></tr></table></div></figure>


<p>浏览器登陆<br/>
<a href="http://svn_ip/svn">http://svn_ip/svn</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenNebula添加节点]]></title>
    <link href="http://kumu-Linux.github.io/blog/2013/11/07/opennubula-node/"/>
    <updated>2013-11-07T15:14:00+08:00</updated>
    <id>http://kumu-Linux.github.io/blog/2013/11/07/opennubula-node</id>
    <content type="html"><![CDATA[<h3>需求</h3>

<p>The hosts must have a working installation of KVM, that usually requires:</p>

<ul>
<li>CPU with VT extensions</li>
<li>libvirt >= 0.4.0</li>
<li>kvm kernel modules (kvm.ko, kvm-{intel,amd}.ko). Available from kernel 2.6.20 onwards.</li>
<li>the qemu user-land tools</li>
</ul>


<!--more-->


<p>笔者测试所用为VMware Workstation，除本身物理机支持并开启虚拟化外，Workstation也要开启相关配置[ 设置&#8211;处理器，查看是否开启 ]</p>

<h3>节点软件安装</h3>

<p>可以参见<a href="http://kumu-linux.github.io/blog/2013/08/22/opennebula-install/">OpenNebula在CentOS6.4安装备忘</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># yum install qemu-kvm qemu-img libvirt ruby \     </span>
</span><span class='line'>libvirt-python python-virtinst libvirt-client
</span><span class='line'><span class="c"># yum install opennebula-common-4.2.0-1.x86_64.rpm \</span>
</span><span class='line'>opennebula-node-kvm-4.2.0-1.x86_64.rpm
</span></code></pre></td></tr></table></div></figure>


<h3>节点配置</h3>

<h4>启动kvm</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># /etc/init.d/libvirtd start</span>
</span></code></pre></td></tr></table></div></figure>


<h4>桥接网络</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># yum install bridge-utils -y</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>桥接实例</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># cat /etc/sysconfig/network-scripts/ifcfg-eth0 </span>
</span><span class='line'><span class="nv">DEVICE</span><span class="o">=</span>eth0
</span><span class='line'><span class="nv">TYPE</span><span class="o">=</span>Ethernet
</span><span class='line'><span class="nv">ONBOOT</span><span class="o">=</span>yes
</span><span class='line'><span class="nv">NAME</span><span class="o">=</span><span class="s2">&quot;System eth0&quot;</span>
</span><span class='line'><span class="nv">BRIDGE</span><span class="o">=</span><span class="s2">&quot;br0&quot;</span>
</span><span class='line'><span class="c"># cat /etc/sysconfig/network-scripts/ifcfg-br0</span>
</span><span class='line'><span class="nv">DEVICE</span><span class="o">=</span><span class="s2">&quot;br0&quot;</span>
</span><span class='line'><span class="nv">TYPE</span><span class="o">=</span><span class="s2">&quot;Bridge&quot;</span>  <span class="c"># 注意大小写</span>
</span><span class='line'><span class="nv">BOOTPROTO</span><span class="o">=</span><span class="s2">&quot;static&quot;</span>
</span><span class='line'><span class="nv">IPADDR</span><span class="o">=</span>192.168.80.131
</span><span class='line'><span class="nv">NETMASK</span><span class="o">=</span>255.255.255.0
</span><span class='line'><span class="nv">GATEWAY</span><span class="o">=</span>192.168.80.2
</span><span class='line'><span class="nv">ONBOOT</span><span class="o">=</span><span class="s2">&quot;yes&quot;</span>
</span><span class='line'><span class="nv">DELAY</span><span class="o">=</span>0
</span></code></pre></td></tr></table></div></figure>


<p>修改完毕，重启网络</p>

<h4>相关配置修改</h4>

<p>修改/etc/libvirt/qemu.conf的相关配置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># grep -vE &#39;^($|#)&#39; /etc/libvirt/qemu.conf</span>
</span><span class='line'><span class="nv">user</span>  <span class="o">=</span> <span class="s2">&quot;oneadmin&quot;</span>
</span><span class='line'><span class="nv">group</span> <span class="o">=</span> <span class="s2">&quot;oneadmin&quot;</span>
</span><span class='line'><span class="nv">dynamic_ownership</span> <span class="o">=</span> 0
</span></code></pre></td></tr></table></div></figure>


<p>修改/etc/libvirt/libvirtd.conf相关配置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">listen_tcp</span> <span class="o">=</span> 1
</span><span class='line'><span class="nv">listen_tls</span> <span class="o">=</span> 0
</span><span class='line'><span class="nv">mdns_adv</span> <span class="o">=</span> 0
</span><span class='line'><span class="nv">unix_sock_group</span> <span class="o">=</span> <span class="s2">&quot;oneadmin&quot;</span>
</span><span class='line'><span class="nv">unix_sock_ro_perms</span> <span class="o">=</span> <span class="s2">&quot;0777&quot;</span>
</span><span class='line'><span class="nv">unix_sock_rw_perms</span> <span class="o">=</span> <span class="s2">&quot;0777&quot;</span>
</span><span class='line'><span class="nv">auth_unix_ro</span> <span class="o">=</span> <span class="s2">&quot;none&quot;</span>
</span><span class='line'><span class="nv">auth_unix_rw</span> <span class="o">=</span> <span class="s2">&quot;none&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>修改/etc/sysconfig/libvirtd相关配置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">LIBVIRTD_ARGS</span><span class="o">=</span><span class="s2">&quot;--listen&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>启动libvirtd服务[安全起见可以只监听内网IP]：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># /etc/init.d/libvirtd restart</span>
</span><span class='line'><span class="c"># netstat -tulnp | grep libvirtd</span>
</span><span class='line'>tcp        0      0 0.0.0.0:16509     0.0.0.0:*       LISTEN      50818/libvirtd
</span><span class='line'>tcp        0      0 :::16509          :::*            LISTEN      50818/libvirtd
</span></code></pre></td></tr></table></div></figure>


<p>修改 /etc/sudoers 文件，最后一行加上：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>oneadmin <span class="nv">ALL</span><span class="o">=(</span>root<span class="o">)</span>NOPASSWD:ALL
</span></code></pre></td></tr></table></div></figure>


<p>CentOS系统的sudo选项requiretty是默认打开的，远程执行命令时，ssh默认不会分配tty。没有tty，sudo就无法在获取密码时关闭回显。使用-tt选项强制SSH分配tty（使用两次-tt）。另一方面，sudoers中的Defaults选项requiretty要求只有拥有tty的用户才能使用sudo。可以通过visudo编辑配置文件，禁用这个选项：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#Defaults    requiretty</span>
</span></code></pre></td></tr></table></div></figure>


<p>添加<code>oneadmin</code>用户和OpenNebula Server主机ssh公钥认证，使得OpenNebula Server主机<code>oneadmin</code>用户可以使用公钥无密码登陆，关于ssh密钥配置这里不再进一步说明。</p>

<h4>其它配置</h4>

<p>另外OpenNebula的脚本要用到/sbin/brctl，而CentOS的路径是/usr/sbin/brctl，添加软链接：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ln -s /usr/sbin/brctl /sbin/brctl
</span></code></pre></td></tr></table></div></figure>


<p>还要用到/usr/bin/kvm，而CentOS没有链接，需要设置软链接：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ln -s /usr/libexec/qemu-kvm /usr/bin/kvm
</span></code></pre></td></tr></table></div></figure>


<p>最后在Web上添加host主机节点即可，状态显示为<code>on</code>则表示添加成功。</p>

<p>&#8211;EOF&#8211;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修改CentOS/RHEL rsync监听地址]]></title>
    <link href="http://kumu-Linux.github.io/blog/2013/11/07/rsync/"/>
    <updated>2013-11-07T10:35:00+08:00</updated>
    <id>http://kumu-Linux.github.io/blog/2013/11/07/rsync</id>
    <content type="html"><![CDATA[<p>为了安全起见，服务器不对外提供的服务尽量不监听外网地址的，rsync也不例外。由于CentOS/RHEL中rpm安装的rsync为非独立进程，需要依赖xinetd进程。笔者一开始尝试修改rsync的配置文件<code>rsyncd.conf</code>中加入<code>address = 192.168.80.128</code>，重启xinetd服务，发现修改没有生效。</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>...
</span><span class='line'>tcp        0      0 0.0.0.0:873                 0.0.0.0:*     ...
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>因为CentOS/RHEL是依赖xinetd的，所以我就想到了xinetd配置文件<code>/etc/xinetd.conf</code>，发现选项<code># bind       =</code>，于是修改如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>...
</span><span class='line'>  <span class="nb">bind</span>        <span class="o">=</span> 192.168.80.128 <span class="c"># 此处ip填写主机本地ip即可</span>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>修改完成保存，重启xinetd程序，修改生效</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>...
</span><span class='line'>tcp        0      0 192.168.80.128:873               0.0.0.0:*                   LISTEN      25967/xinetd
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>当然你也可以直接不依赖xinetd修改监听地址，直接使用命令启动rsync，如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rsync --address<span class="o">=</span>192.168.80.128 --config<span class="o">=</span>/etc/rsyncd.conf --daemon
</span></code></pre></td></tr></table></div></figure>


<p>&#8211;EOF&#8211;</p>
]]></content>
  </entry>
  
</feed>
