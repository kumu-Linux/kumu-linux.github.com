<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Linux SA Notes By 枯木]]></title>
  <link href="http://kumu-Linux.github.com/atom.xml" rel="self"/>
  <link href="http://kumu-Linux.github.com/"/>
  <updated>2013-06-17T13:37:08+08:00</updated>
  <id>http://kumu-Linux.github.com/</id>
  <author>
    <name><![CDATA[枯木]]></name>
    <email><![CDATA[1988.wulei@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[top实践小技巧]]></title>
    <link href="http://kumu-Linux.github.com/blog/2013/06/07/top-hacks/"/>
    <updated>2013-06-07T17:32:00+08:00</updated>
    <id>http://kumu-Linux.github.com/blog/2013/06/07/top-hacks</id>
    <content type="html"><![CDATA[<p>之前介绍了<a href="http://kumu-linux.github.io/blog/2013/06/02/top/">top基本介绍</a>,本章主要介绍一些top的实用技巧。</p>

<!--more-->


<p>终端执行top命令之后【也可后接一些选项，比如<code>top -p 1</code>只监控init进程，<code>top -u root</code>只显示root运行进程等等】，可以敲击如下按键，实现不同功能：</p>

<ul>
<li><code>1</code>(数字1)：列出所有的单个CPU负载情况</li>
<li><code>z</code>:top显示颜色</li>
<li><code>P</code>[大写]:按CPU占用高低顺序列出程序</li>
<li><code>M</code>[大写]:按内存占用高低顺序列出程序</li>
<li><code>x</code>:类似高亮显示，在z显示模式下效果才会更明显</li>
</ul>


<p>如下效果图:</p>

<center><img src="http://kumu-Linux.github.com/images/top1.png" alt="geek" title="geek" width="600" /></center>


<ul>
<li>top显示Swap利用率，使用top命令后按f键，然后按p键，回车之后即可看到Swap状态</li>
</ul>


<center><img src="http://kumu-Linux.github.com/images/top2.png" alt="geek" title="geek" width="600" /></center>


<ul>
<li><code>d</code>:top默认的刷新时间是3s，使用d键可以自定义刷新时间</li>
</ul>


<center><img src="http://kumu-Linux.github.com/images/top3.png" alt="geek" title="geek" width="600" /></center>




<p></p>


<p><strong>top类似上下翻页的方法：</strong></p>

<ul>
<li>shift &lt;  下翻页</li>
<li>shift >   上翻页</li>
</ul>


<p>top默认按cpu占用排序，这也是可以修改的，按F(大写)即可选择相应排序，之后任意键退出即可</p>

<center><img src="http://kumu-Linux.github.com/images/top4.png" alt="geek" title="geek" width="600" /></center>


<ul>
<li><code>c</code>:显示进程命令的全路径与参数</li>
<li><code>f</code>:可以指定top显示的内容，如ppid、swap等都可以选择显示</li>
<li><code>k</code>:输入k之后可以kill掉指定的进程</li>
<li><code>A</code>:分类显示各种系统资源高的进程。可用于快速识别系统上的性能要求极高的任务，<strong>推荐使用</strong></li>
<li><code>h</code>:获取top的命令帮助</li>
<li><code>W</code>[大写]:将当前设置写入~/.toprc文件中。这是写top配置文件的推荐方法</li>
</ul>


<p>参考: <a href="http://linux.vbird.org/">鸟哥Linux私房菜</a>  <a href="http://www.cyberciti.biz/tips/top-linux-monitoring-tools.html">top - Process Activity Command</a>  <a href="http://how-to.linuxcareer.com/learning-linux-commands-top">Learning Linux Commands: top</a></p>

<p>&#8211;EOF&#8211;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iproute]]></title>
    <link href="http://kumu-Linux.github.com/blog/2013/06/04/iproute/"/>
    <updated>2013-06-04T11:16:00+08:00</updated>
    <id>http://kumu-Linux.github.com/blog/2013/06/04/iproute</id>
    <content type="html"><![CDATA[<h3>iproute基本介绍</h3>

<p>iproute是用于linux下网络配置工具，该工具包还有以下组件</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># rpm -ql  iproute | grep bin</span>
</span><span class='line'>/sbin/cbq         <span class="c">#流量控制</span>
</span><span class='line'>/sbin/ifcfg           <span class="c">#网络地址配置管理</span>
</span><span class='line'>/sbin/ip          <span class="c">#网络配置命令</span>
</span><span class='line'>/sbin/rtmon           <span class="c">#rtmon listens on netlink socket and monitors routing table changes.</span>
</span><span class='line'>/sbin/tc          <span class="c">#进行流量控制的命令</span>
</span><span class='line'>/usr/sbin/arpd        <span class="c">#收集arp信息保存到本地cache daemon</span>
</span><span class='line'>/usr/sbin/lnstat  <span class="c">#网络统计信息</span>
</span><span class='line'>/usr/sbin/nstat       <span class="c">#显示网络统计信息</span>
</span><span class='line'>/usr/sbin/rtacct  <span class="c">#查看数据包流量状态</span>
</span><span class='line'>【nstat and rtacct are simple tools to monitor kernel snmp counters and network interface statistics.】
</span><span class='line'>/usr/sbin/ss      <span class="c">#类似netstat命令，显示活动连接</span>
</span></code></pre></td></tr></table></div></figure>


<p>iproute的中心是<code>ip</code>这个命令，类似<code>arp</code>、<code>ifconfig</code>、<code>route</code>命令虽然这些工具能够工作，但是在Linux2.2和更高版本的内核上就有点out了。</p>

<h3>ip基本使用方法</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ip --help</span>
</span><span class='line'>Usage: ip <span class="o">[</span> OPTIONS <span class="o">]</span> OBJECT <span class="o">{</span> COMMAND | <span class="nb">help</span> <span class="o">}</span>
</span><span class='line'>       ip <span class="o">[</span> -force <span class="o">]</span> -batch filename
</span><span class='line'>where  OBJECT :<span class="o">=</span> <span class="o">{</span> link | addr | addrlabel | route | rule | neigh | ntable |
</span><span class='line'>                   tunnel | maddr | mroute | mrule | monitor | xfrm <span class="o">}</span>
</span><span class='line'>       OPTIONS :<span class="o">=</span> <span class="o">{</span> -V<span class="o">[</span>ersion<span class="o">]</span> | -s<span class="o">[</span>tatistics<span class="o">]</span> | -d<span class="o">[</span>etails<span class="o">]</span> | -r<span class="o">[</span>esolve<span class="o">]</span> |
</span><span class='line'>                    -f<span class="o">[</span>amily<span class="o">]</span> <span class="o">{</span> inet | inet6 | ipx | dnet | link <span class="o">}</span> |
</span><span class='line'>                    -o<span class="o">[</span>neline<span class="o">]</span> | -t<span class="o">[</span>imestamp<span class="o">]</span> | -b<span class="o">[</span>atch<span class="o">]</span> <span class="o">[</span>filename<span class="o">]</span> |
</span><span class='line'>                    -rc<span class="o">[</span>vbuf<span class="o">]</span> <span class="o">[</span>size<span class="o">]}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>OBJECT</strong></p>

<ul>
<li>link          指网络设备，通过此对象命令，我们可以查看及更改网络设备的属性。</li>
<li>addr          地址管理</li>
<li>neigh         arp表管理</li>
<li>route         路由管理</li>
<li>rule          路由策略</li>
<li>maddr         多址广播地址</li>
<li>mroute        多播路由缓存管理</li>
<li>tunnel        通道管理</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ip -V      #打印iproute信息</span>
</span><span class='line'>ip utility, iproute2-ss091226
</span></code></pre></td></tr></table></div></figure>


<p><strong>显示链路信息</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ip link</span>
</span><span class='line'>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 16436 qdisc noqueue state UNKNOWN
</span><span class='line'>    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
</span><span class='line'>2: eth0: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc pfifo_fast state DOWN qlen 1000
</span><span class='line'>    link/ether 00:0c:29:3b:9c:6f brd ff:ff:ff:ff:ff:ff
</span><span class='line'><span class="c"># ip link show dev eth0</span>
</span><span class='line'>2: eth0: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc pfifo_fast state DOWN qlen 1000
</span><span class='line'>    link/ether 00:0c:29:3b:9c:6f brd ff:ff:ff:ff:ff:ff
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><strong>显示IP地址</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ip addr</span>
</span><span class='line'>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 16436 qdisc noqueue state UNKNOWN
</span><span class='line'>    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
</span><span class='line'>    inet 127.0.0.1/8 scope host lo
</span><span class='line'>    inet6 ::1/128 scope host
</span><span class='line'>       valid_lft forever preferred_lft forever
</span><span class='line'>2: eth0: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc pfifo_fast state DOWN qlen 1000
</span><span class='line'>    link/ether 00:0c:29:3b:9c:6f brd ff:ff:ff:ff:ff:ff
</span><span class='line'>    inet 192.168.0.10/24 brd 192.168.0.255 scope global eth0
</span></code></pre></td></tr></table></div></figure>


<p>显示路由<code>ip route</code> [类似<code>route -n</code>]</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ip route | column -t</span>
</span><span class='line'>192.168.0.0/24  dev  eth1          scope  link
</span><span class='line'>10.2.0.0/16     dev  eth2          proto  kernel  scope  link  src  10.2.0.111
</span><span class='line'>default         via  10.2.255.254  dev    eth2
</span><span class='line'><span class="c"># ip route del 192.168.0.0/24 dev eth1</span>
</span><span class='line'><span class="c"># ip route add 192.168.0.0/24 dev eth1</span>
</span><span class='line'><span class="c"># ip route del via 10.2.255.254  //删除默认路由</span>
</span><span class='line'><span class="c"># ip route add via 10.2.255.254  //增加默认路由</span>
</span><span class='line'><span class="c"># ip route add 192.168.1.0/24 via 192.168.0.1  //增加静态路由，192.168.0.1为下一跳地址</span>
</span><span class='line'><span class="c"># ip route del 192.168.1.0/24 via 192.168.0.1  //删除静态路由</span>
</span></code></pre></td></tr></table></div></figure>


<p>显示arp信息<code>ip neigh</code> [可以取代<code>arp -n</code>],删除则是<code>ip neigh del IP地址 dev 设备名</code></p>

<h3>路由策略数据库</h3>

<p>如果你有一个大规模的路由器，需要同时满足不同用户对于路由的不通需求，路由策略数据库可以帮你通过多路由表技术来实现。当内核需要做出路由选择时，它会找出应该参考哪一张路由表。除了<code>ip</code>外,<code>route</code>也可以修改main和local表。</p>

<p><strong>默认规则</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ip rule</span>
</span><span class='line'>0:    from all lookup <span class="nb">local </span>
</span><span class='line'>32766:    from all lookup main
</span><span class='line'>32767:    from all lookup default
</span></code></pre></td></tr></table></div></figure>


<p>上面列出了规则的优先顺序。<code>ip route</code>命令默认显示的就是main表。<code>ip route show table all</code>显示所有规则中的表</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ip route list table local</span>
</span><span class='line'>broadcast 192.168.0.255 dev eth0  proto kernel  scope link  src 192.168.0.10
</span><span class='line'>broadcast 10.2.0.0 dev eth1  proto kernel  scope link  src 10.2.0.217
</span><span class='line'>broadcast 127.255.255.255 dev lo  proto kernel  scope link  src 127.0.0.1
</span><span class='line'>... ...
</span></code></pre></td></tr></table></div></figure>


<p>default表为空</p>

<h3>例 简单策略路由添加 [引用自<a href="https://www.google.com.hk/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=2&amp;cad=rja&amp;ved=0CDkQFjAB&amp;url=%68%74%74%70%3a%2f%2f%77%77%77%2e%6c%61%72%74%63%2e%6f%72%67%2f%4c%41%52%54%43%2d%7a%68%5f%43%4e%2e%47%42%32%33%31%32%2e%70%64%66&amp;ei=4XeuUc3RPIG1lQW1voGwAg&amp;usg=AFQjCNEI4pFvc81u0hYutCtbC4mEoh44qA&amp;sig2=Txgnxnm1LMqWL87RKUsWDQ">Linux高级路由中文HOWTO</a>]</h3>

<p>让我们再来一个真实的例子。我有两个Cable Modem，连接到了一个 Linux的NAT (“伪装”) 路由器上。这里的室友们向我付费使用Internet。假如我其中的一个室友因为只想访问 hotmail 而希望少付一些钱。对我来说这没有问题,他们肯定只能使用那个比较次的Cable Modem。</p>

<p>那个比较快的cable modem 的IP地址是 212.64.94.251，PPP 链路，对端IP是212.64.94.1。而那个比较慢的cable modem的IP地址是212.64.78.148，对端是195.96.98.253。</p>

<p>local 表：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>ahu@home ahu<span class="o">]</span><span class="nv">$ </span>ip route list table <span class="nb">local</span>
</span><span class='line'>broadcast 127.255.255.255 dev lo proto kernel scope link src 127.0.0.1
</span><span class='line'><span class="nb">local </span>10.0.0.1 dev eth0 proto kernel scope host src 10.0.0.1
</span><span class='line'>broadcast 10.0.0.0 dev eth0 proto kernel scope link src 10.0.0.1
</span><span class='line'><span class="nb">local </span>212.64.94.251 dev ppp0 proto kernel scope host src 212.64.94.251
</span><span class='line'>broadcast 10.255.255.255 dev eth0 proto kernel scope link src 10.0.0.1
</span><span class='line'>broadcast 127.0.0.0 dev lo proto kernel scope link src 127.0.0.1
</span><span class='line'><span class="nb">local </span>212.64.78.148 dev ppp2 proto kernel scope host src 212.64.78.148
</span><span class='line'><span class="nb">local </span>127.0.0.1 dev lo proto kernel scope host src 127.0.0.1
</span><span class='line'><span class="nb">local </span>127.0.0.0/8 dev lo proto kernel scope host src 127.0.0.1
</span></code></pre></td></tr></table></div></figure>


<p>让我们看看“main”路由表：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>ahu@home ahu<span class="o">]</span><span class="nv">$ </span>ip route list table main
</span><span class='line'>195.96.98.253 dev ppp2 proto kernel scope link src 212.64.78.148
</span><span class='line'>212.64.94.1 dev ppp0 proto kernel scope link src 212.64.94.251
</span><span class='line'>10.0.0.0/8 dev eth0 proto kernel scope link src 10.0.0.1
</span><span class='line'>127.0.0.0/8 dev lo scope link
</span><span class='line'>default via 212.64.94.1 dev ppp0
</span></code></pre></td></tr></table></div></figure>


<p>我们现在为我们的朋友创建了一个叫做“John”的规则。其实我们完全可以使用纯数字表示规则，但是不方便。我们可以向<code>/etc/iproute2/rt_tables</code>文件中添加数字与名字的关联：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># echo 200 John &gt;&gt; /etc/iproute2/rt_tables</span>
</span><span class='line'><span class="c"># ip rule add from 10.0.0.10 table John</span>
</span><span class='line'><span class="c"># ip rule</span>
</span><span class='line'>0:    from all lookup <span class="nb">local </span>
</span><span class='line'>32765:  from 10.0.0.10 lookup John
</span><span class='line'>32766:    from all lookup main
</span><span class='line'>32767:    from all lookup default
</span></code></pre></td></tr></table></div></figure>


<p>现在，剩下的事情就是为 John 的路由表创建路由项了。别忘了刷新路由缓存：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ip route add default via 195.96.98.253 dev ppp2 table John</span>
</span><span class='line'><span class="c"># ip route flush cache</span>
</span></code></pre></td></tr></table></div></figure>


<p>总结主要是以下几步：</p>

<ul>
<li>echo 200 John >> /etc/iproute2/rt_tables #方便表示，把规则名字和数字对应加入到<code>/etc/iproute2/rt_tables</code>文件</li>
<li>ip rule add from 10.0.0.10 table John    #新增规则</li>
<li>ip route add default via 195.96.98.253 dev ppp2 table John #规则中添加路由表</li>
<li>ip route flush cache  #刷新路由表</li>
</ul>


<p>&#8211;EOF&#8211;</p>

<p>未完待续<br/>
下一篇预报&#8211;Linux下高级路由</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[top基本介绍]]></title>
    <link href="http://kumu-Linux.github.com/blog/2013/06/02/top/"/>
    <updated>2013-06-02T09:49:00+08:00</updated>
    <id>http://kumu-Linux.github.com/blog/2013/06/02/top</id>
    <content type="html"><![CDATA[<p><code>top</code>命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于Windows的任务管理器。下面跟着笔者一起<code>top</code>一下吧：</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># top</span>
</span><span class='line'>top - 10:52:40 up 3 days, 52 min,  1 user,  load average: 57.28, 112.40, 123.60
</span><span class='line'>Tasks:  99 total,   1 running,  98 sleeping,   0 stopped,   0 zombie
</span><span class='line'>Cpu<span class="o">(</span>s<span class="o">)</span>: 19.5%us, 11.4%sy,  0.0%ni,  0.0%id, 65.7%wa,  0.0%hi,  3.4%si,  0.0%st
</span><span class='line'>Mem:  16435896k total, 16232468k used,   203428k free,    58004k buffers
</span><span class='line'>Swap:  1044476k total,   713552k used,   330924k free, 10052032k cached
</span><span class='line'>
</span><span class='line'>  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND
</span><span class='line'>  ... ...
</span></code></pre></td></tr></table></div></figure>


<p>统计信息区前五行是系统整体的统计信息。第一行是任务队列信息，同uptime命令的执行结果。其内容如下：</p>

<table class="table table-striped">
    <tr>
        <td>10:52:40</td>
        <td>当前时间</td>
    </tr>
    <tr>
        <td>up 3 days, 52 min</td>
        <td>系统运行时间</td>
    </tr>
    <tr>
        <td>1 users</td>
        <td>当前登录用户数</td>
    </tr>
    <tr>
        <td>load average: 57.28, 112.40, 123.60</td>
        <td>系统负载，即任务队列平均长度。
        <br>分别为1、5、15min前到现在平均值。</br></td>
    </tr>
</table>


<p></p>


<p>第二、三行为进程和CPU的信息。当有多个CPU时，这些内容可能会超过两行。内容如下：</p>

<table>
    <tr>
        <td>Tasks:99 total</td>
        <td>进程总数[键入H可查看线程数]</td>
    </tr>
    <tr>
        <td>1 running,  98 sleeping,  0 stopped</td>
        <td>正在运行的进程、睡眠进程、停止的进程</td>
    </tr>
    <tr>
        <td>0 zombie</td>
        <td>僵尸进程数</td>
    </tr>
    <tr>
        <td>Cpu(s): 19.5%us, 11.4%sy,  
        <br> 0.0%ni, 0.0%id,</br> 
        65.7%wa, 0.0%hi, 3.4%si, 0.0%st</td>
        <td>用户空间占用CPU百分比、内核空间占用CPU百分比
        <br>用户进程空间内改变进程优先级占用CPU、空闲CPU百分比</br>
        等待IO的CPU时间百分比，最后三个是中断请求相关</td>
    </tr>
</table>




<p></p>


<p>倒数第2、3行为内存相关信息：</p>

<table>
    <tr>
        <td>Mem: 16435896k total, 16232468k used, 
        <br>203428k free, 58004k buffers</br></td>
        <td>分别是物理内存总量、使用物理内存总量
        <br>空闲内存总量、用作内核缓存内存量</br></td>
    </tr>
    <tr>
        <td>Swap: 1044476k total, 713552k used, 
        <br>330924k free, 10052032k cached<br></td>
        <td>分别是交换分区量、使用交换分区总量
        <br>空闲交换区总量、缓存交换区总量</br></td>
    </tr>
</table>


<p></p>


<p><strong>buffer</strong>   <a href="http://wiki.answers.com/Q/Difference_between_buffer_and_cache">Difference between buffer and cache?</a></p>

<blockquote><p>A data area, shared by hardware devices or program a process is called buffer. They are operated at different speeds or with different sets of priorities. The buffer allows each device or process to operate without holding up by the other. In order to a buffer to be effective, the size of the buffer needs to be considered by the buffer designer. Like a cache, a buffer is a &#8220;midpoint holding place&#8221; but does not exist so much to accelerate the speed of an activity as for supporting the coordination of separate activities.</p></blockquote>

<p></p>


<p></p>

<blockquote><p>This term is used not only in programming but in hardware as well. In programming, buffering sometimes needs to screen data from its final intended place so that it can be edited or processed before moving to a regular file or database.</p></blockquote>

<p><strong>cached</strong></p>

<blockquote><p>Cache memory is type of random access memory (RAM). Cache Memory can be accessed more quickly by the computer microprocessor than it can be accessed by regular RAM. Like microprocessor processes data, it looks first in the cache memory and if there, it finds the data from a previous reading of data, it does not need to do the more time consuming reading of data from larger memory.</p></blockquote>

<p></p>


<blockquote><p>Sometimes Cache memory is described in levels of closeness and convenience to the microprocessor. An L1 cache is on the same chip like the microprocessors.</p></blockquote>

<p></p>


<p></p>

<blockquote><p>In addition to cache memory, RAM itself is a cache memory for hard disk storage since all of RAM&#8217;s contents come up to the hard disk initially when you turn on your computer and load the operating system that you are loading it into RAM and later when you start new applications and access new data. RAM also contains a special area called a disk cache that consists of the data most recently read in from the hard disk.</p></blockquote>

<p></p>


<p>最后1行则是进程相关的资源占用信息:</p>

<ul>
<li>PID：进程的ID</li>
<li>USER：进程所有者</li>
<li>PR：进程的优先级别，越小越优先被执行</li>
<li>NI：nice值。负值表示高优先级，正值表示低优先级</li>
<li>VIRT：进程占用的虚拟内存</li>
<li>RES：进程占用的物理内存</li>
<li>SHR：进程使用的共享内存</li>
<li>S：进程的状态。S表示休眠，R表示正在运行，Z表示僵死状态，N表示该进程优先值为负数</li>
<li>%CPU：进程占用CPU的使用率</li>
<li>%MEM：进程使用的物理内存和总内存的百分比</li>
<li>TIME+：该进程启动后占用的总的CPU时间，即占用CPU使用时间的累加值。</li>
<li>COMMAND：进程启动命令名称</li>
</ul>


<p>&#8211;EOF&#8211;</p>

<p>top实践&#8211;<a href="http://kumu-linux.github.io/blog/2013/06/07/top-hacks/">top实践小技巧</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[openvpn基本搭建实例]]></title>
    <link href="http://kumu-Linux.github.com/blog/2013/05/23/openvpn/"/>
    <updated>2013-05-23T10:19:00+08:00</updated>
    <id>http://kumu-Linux.github.com/blog/2013/05/23/openvpn</id>
    <content type="html"><![CDATA[<p>OpenVPN是一个用于创建虚拟专用网络加密通道的软件包，最早由James Yonan编写。OpenVPN允许创建的VPN使用公开密钥、电子证书、或者用户名／密码来进行身份验证。</p>

<!--more-->




<center><img src="http://kumu-Linux.github.com/images/openvpn.png" alt="openvpn" title="openvpn" width="500" /></center>


<h2>准备软件：</h2>

<p>本例以RHEL6.3为例</p>

<ul>
<li><a href="http://swupdate.openvpn.org/community/releases/openvpn-2.3.1.tar.gz">openvpn-2.3.1</a></li>
<li><a href="http://www.oberhumer.com/opensource/lzo/download/lzo-2.06.tar.gz">lzo-2.06</a></li>
<li>[最新版本的openvpn-2.3.1官方不再集成<code>easy-rsa</code>] Note that easy-rsa is no longer bundled with OpenVPN source code archives. To get it, visit the easy-rsa page on GitHub, or download it from our Linux software repositories.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone https://github.com/OpenVPN/easy-rsa
</span></code></pre></td></tr></table></div></figure>


<h2>软件安装</h2>

<p><code>openssl</code>、<code>openssl-devel</code>、<code>pam</code>、<code>pam-devel</code>安装</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>yum install openssl openssl-devel pam pam-devel -y
</span></code></pre></td></tr></table></div></figure>


<p><code>lzo-2.06</code>安装</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./configure <span class="o">&amp;&amp;</span> make <span class="o">&amp;&amp;</span> make install
</span></code></pre></td></tr></table></div></figure>


<p><code>openvpn-2.3.1</code>安装</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./configure <span class="o">&amp;&amp;</span> make <span class="o">&amp;&amp;</span> make install
</span></code></pre></td></tr></table></div></figure>


<h2>相关配置</h2>

<h3>添加环境变量</h3>

<p>在<code>~/.barc_profile</code>文件中加入如下内容,命名根据实际需求修改：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">D</span><span class="o">=</span>/etc/openvpn
</span><span class='line'><span class="nb">export </span><span class="nv">KEY_CONFIG</span><span class="o">=</span><span class="nv">$D</span>/openssl.cnf
</span><span class='line'><span class="nb">export </span><span class="nv">KEY_DIR</span><span class="o">=</span><span class="nv">$D</span>/keys
</span><span class='line'><span class="nb">export </span><span class="nv">KEY_SIZE</span><span class="o">=</span>1024
</span><span class='line'><span class="nb">export </span><span class="nv">KEY_COUNTRY</span><span class="o">=</span>CN
</span><span class='line'><span class="nb">export </span><span class="nv">KEY_PROVINCE</span><span class="o">=</span>BJ
</span><span class='line'><span class="nb">export </span><span class="nv">KEY_CITY</span><span class="o">=</span>BJ
</span><span class='line'><span class="nb">export </span><span class="nv">KEY_ORG</span><span class="o">=</span>kumu
</span><span class='line'><span class="nb">export </span><span class="nv">KEY_OU</span><span class="o">=</span>kumu
</span><span class='line'><span class="nb">export </span><span class="nv">KEY_NAME</span><span class="o">=</span>kumu
</span><span class='line'><span class="nb">export </span><span class="nv">KEY_EMAIL</span><span class="o">=</span>root@kumu
</span></code></pre></td></tr></table></div></figure>


<p>使新增环境变量生效并新建配置文件目录<code>/etc/openvpn</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># source ~/.barc_profile</span>
</span><span class='line'><span class="c"># mkdir /etc/openvpn</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注</strong>:也可修改easy-rsa中的vars【/usr/local/src/openvpn/easy-rsa/easy-rsa/2.0/vars】，source生效</p>

<h3>生成密钥</h3>

<p>进入之前下载的<code>easy-rsa</code>目录</p>

<p><strong>初始化PKI、生成证书</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># pwd</span>
</span><span class='line'>/usr/local/src/openvpn/easy-rsa/easy-rsa/2.0
</span><span class='line'><span class="c"># ls</span>
</span><span class='line'>build-ca     build-key         build-key-server  clean-all      openssl-0.9.6.cnf  pkitool      vars
</span><span class='line'>build-dh     build-key-pass    build-req         inherit-inter  openssl-0.9.8.cnf  revoke-full  whichopensslcnf
</span><span class='line'>build-inter  build-key-pkcs12  build-req-pass    list-crl       openssl-1.0.0.cnf  sign-req
</span><span class='line'><span class="c"># cp openssl-1.0.0.cnf /etc/openvpn/openssl.cnf</span>
</span><span class='line'><span class="c"># ./clean-all #初始化，清除原有不需要的文件</span>
</span><span class='line'><span class="c"># ./build-ca  #一直回车即可</span>
</span><span class='line'>Generating a 1024 bit RSA private key
</span><span class='line'>.......++++++
</span><span class='line'>............++++++
</span><span class='line'>writing new private key to <span class="s1">&#39;ca.key&#39;</span>
</span><span class='line'>-----
</span><span class='line'>You are about to be asked to enter information that will be incorporated
</span><span class='line'>into your certificate request.
</span><span class='line'>What you are about to enter is what is called a Distinguished Name or a DN.
</span><span class='line'>There are quite a few fields but you can leave some blank
</span><span class='line'>For some fields there will be a default value,
</span><span class='line'>If you enter <span class="s1">&#39;.&#39;</span>, the field will be left blank.
</span><span class='line'>-----
</span><span class='line'>Country Name <span class="o">(</span>2 letter code<span class="o">)</span> <span class="o">[</span>CN<span class="o">]</span>:
</span><span class='line'>State or Province Name <span class="o">(</span>full name<span class="o">)</span> <span class="o">[</span>BJ<span class="o">]</span>:
</span><span class='line'>Locality Name <span class="o">(</span>eg, city<span class="o">)</span> <span class="o">[</span>BJ<span class="o">]</span>:
</span><span class='line'>Organization Name <span class="o">(</span>eg, company<span class="o">)</span> <span class="o">[</span>kumu<span class="o">]</span>:
</span><span class='line'>Organizational Unit Name <span class="o">(</span>eg, section<span class="o">)</span> <span class="o">[</span>kumu<span class="o">]</span>:
</span><span class='line'>Common Name <span class="o">(</span>eg, your name or your server<span class="err">&#39;</span>s hostname<span class="o">)</span> <span class="o">[</span>kumu CA<span class="o">]</span>:
</span><span class='line'>Name <span class="o">[]</span>:kumu
</span><span class='line'>Email Address <span class="o">[</span>root@kumu<span class="o">]</span>:
</span></code></pre></td></tr></table></div></figure>


<p><strong>生成Server端证书Server Key</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ./build-key-server kumu_server #一路回车，密码处填写密码</span>
</span><span class='line'>Generating a 1024 bit RSA private key
</span><span class='line'>....................................++++++
</span><span class='line'>.........++++++
</span><span class='line'>writing new private key to <span class="s1">&#39;kumu_server.key&#39;</span>
</span><span class='line'>-----
</span><span class='line'>You are about to be asked to enter information that will be incorporated
</span><span class='line'>into your certificate request.
</span><span class='line'>What you are about to enter is what is called a Distinguished Name or a DN.
</span><span class='line'>There are quite a few fields but you can leave some blank
</span><span class='line'>For some fields there will be a default value,
</span><span class='line'>If you enter <span class="s1">&#39;.&#39;</span>, the field will be left blank.
</span><span class='line'>-----
</span><span class='line'>Country Name <span class="o">(</span>2 letter code<span class="o">)</span> <span class="o">[</span>CN<span class="o">]</span>:
</span><span class='line'>State or Province Name <span class="o">(</span>full name<span class="o">)</span> <span class="o">[</span>BJ<span class="o">]</span>:
</span><span class='line'>Locality Name <span class="o">(</span>eg, city<span class="o">)</span> <span class="o">[</span>BJ<span class="o">]</span>:
</span><span class='line'>Organization Name <span class="o">(</span>eg, company<span class="o">)</span> <span class="o">[</span>kumu<span class="o">]</span>:
</span><span class='line'>Organizational Unit Name <span class="o">(</span>eg, section<span class="o">)</span> <span class="o">[</span>kumu<span class="o">]</span>:
</span><span class='line'>Common Name <span class="o">(</span>eg, your name or your server<span class="s1">&#39;s hostname) [kumu_server]:</span>
</span><span class='line'><span class="s1">Name [kumu]:</span>
</span><span class='line'><span class="s1">Email Address [root@kumu]:</span>
</span><span class='line'>
</span><span class='line'><span class="s1">Please enter the following &#39;</span>extra<span class="s1">&#39; attributes</span>
</span><span class='line'><span class="s1">to be sent with your certificate request</span>
</span><span class='line'><span class="s1">A challenge password []:123321  #输入密码</span>
</span><span class='line'><span class="s1">An optional company name []:kumu</span>
</span><span class='line'><span class="s1">Using configuration from /etc/openvpn/openssl.cnf</span>
</span><span class='line'><span class="s1">Check that the request matches the signature</span>
</span><span class='line'><span class="s1">Signature ok</span>
</span><span class='line'><span class="s1">The Subject&#39;</span>s Distinguished Name is as follows
</span><span class='line'>countryName           :PRINTABLE:<span class="s1">&#39;CN&#39;</span>
</span><span class='line'>stateOrProvinceName   :PRINTABLE:<span class="s1">&#39;BJ&#39;</span>
</span><span class='line'>localityName          :PRINTABLE:<span class="s1">&#39;BJ&#39;</span>
</span><span class='line'>organizationName      :PRINTABLE:<span class="s1">&#39;kumu&#39;</span>
</span><span class='line'>organizationalUnitName:PRINTABLE:<span class="s1">&#39;kumu&#39;</span>
</span><span class='line'>commonName            :T61STRING:<span class="s1">&#39;kumu_server&#39;</span>
</span><span class='line'>name                  :PRINTABLE:<span class="s1">&#39;kumu&#39;</span>
</span><span class='line'>emailAddress          :IA5STRING:<span class="s1">&#39;root@kumu&#39;</span>
</span><span class='line'>Certificate is to be certified <span class="k">until </span>May 11 22:54:08 2023 GMT <span class="o">(</span>3650 days<span class="o">)</span>
</span><span class='line'>Sign the certificate? <span class="o">[</span>y/n<span class="o">]</span>:y
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>1 out of 1 certificate requests certified, commit? <span class="o">[</span>y/n<span class="o">]</span>y
</span><span class='line'>Write out database with 1 new entries
</span><span class='line'>Data Base Updated
</span></code></pre></td></tr></table></div></figure>


<p><strong>生成Client端证书</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ./build-key kumu_client1  #一路回车，密码处填写密码</span>
</span><span class='line'>Generating a 1024 bit RSA private key
</span><span class='line'>..++++++
</span><span class='line'>.....................++++++
</span><span class='line'>writing new private key to <span class="s1">&#39;kumu_client1.key&#39;</span>
</span><span class='line'>-----
</span><span class='line'>You are about to be asked to enter information that will be incorporated
</span><span class='line'>into your certificate request.
</span><span class='line'>What you are about to enter is what is called a Distinguished Name or a DN.
</span><span class='line'>There are quite a few fields but you can leave some blank
</span><span class='line'>For some fields there will be a default value,
</span><span class='line'>If you enter <span class="s1">&#39;.&#39;</span>, the field will be left blank.
</span><span class='line'>-----
</span><span class='line'>Country Name <span class="o">(</span>2 letter code<span class="o">)</span> <span class="o">[</span>CN<span class="o">]</span>:
</span><span class='line'>State or Province Name <span class="o">(</span>full name<span class="o">)</span> <span class="o">[</span>BJ<span class="o">]</span>:
</span><span class='line'>Locality Name <span class="o">(</span>eg, city<span class="o">)</span> <span class="o">[</span>BJ<span class="o">]</span>:
</span><span class='line'>Organization Name <span class="o">(</span>eg, company<span class="o">)</span> <span class="o">[</span>kumu<span class="o">]</span>:
</span><span class='line'>Organizational Unit Name <span class="o">(</span>eg, section<span class="o">)</span> <span class="o">[</span>kumu<span class="o">]</span>:
</span><span class='line'>Common Name <span class="o">(</span>eg, your name or your server<span class="s1">&#39;s hostname) [kumu_client1]:</span>
</span><span class='line'><span class="s1">Name [kumu]:</span>
</span><span class='line'><span class="s1">Email Address [root@kumu]:</span>
</span><span class='line'>
</span><span class='line'><span class="s1">Please enter the following &#39;</span>extra<span class="s1">&#39; attributes</span>
</span><span class='line'><span class="s1">to be sent with your certificate request</span>
</span><span class='line'><span class="s1">A challenge password []:123321</span>
</span><span class='line'><span class="s1">An optional company name []:kumu</span>
</span><span class='line'><span class="s1">Using configuration from /etc/openvpn/openssl.cnf</span>
</span><span class='line'><span class="s1">Check that the request matches the signature</span>
</span><span class='line'><span class="s1">Signature ok</span>
</span><span class='line'><span class="s1">The Subject&#39;</span>s Distinguished Name is as follows
</span><span class='line'>countryName           :PRINTABLE:<span class="s1">&#39;CN&#39;</span>
</span><span class='line'>stateOrProvinceName   :PRINTABLE:<span class="s1">&#39;BJ&#39;</span>
</span><span class='line'>localityName          :PRINTABLE:<span class="s1">&#39;BJ&#39;</span>
</span><span class='line'>organizationName      :PRINTABLE:<span class="s1">&#39;kumu&#39;</span>
</span><span class='line'>organizationalUnitName:PRINTABLE:<span class="s1">&#39;kumu&#39;</span>
</span><span class='line'>commonName            :T61STRING:<span class="s1">&#39;kumu_client1&#39;</span>
</span><span class='line'>name                  :PRINTABLE:<span class="s1">&#39;kumu&#39;</span>
</span><span class='line'>emailAddress          :IA5STRING:<span class="s1">&#39;root@kumu&#39;</span>
</span><span class='line'>Certificate is to be certified <span class="k">until </span>May 11 23:01:12 2023 GMT <span class="o">(</span>3650 days<span class="o">)</span>
</span><span class='line'>Sign the certificate? <span class="o">[</span>y/n<span class="o">]</span>:y
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>1 out of 1 certificate requests certified, commit? <span class="o">[</span>y/n<span class="o">]</span>y
</span><span class='line'>Write out database with 1 new entries
</span><span class='line'>Data Base Updated
</span><span class='line'><span class="c"># ls /etc/openvpn/keys/</span>
</span><span class='line'>01.pem  ca.key      index.txt.attr      kumu_client1.crt  kumu_server.crt  openvpn-status.log
</span><span class='line'>02.pem  dh1024.pem  index.txt.attr.old  kumu_client1.csr  kumu_server.csr  serial
</span><span class='line'>ca.crt  index.txt   index.txt.old       kumu_client1.key  kumu_server.key  serial.old
</span></code></pre></td></tr></table></div></figure>


<p><strong>注</strong>：生成其他客户端证书以此类推，名字不相同即可</p>

<p><strong>证书加密</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ./build-dh </span>
</span><span class='line'>./build-dh: line 7: dhparam: <span class="nb">command </span>not found
</span></code></pre></td></tr></table></div></figure>


<p>出现如上问题，修改<code>./build-dh</code>命令中<code>$OPENSSL</code>为<code>openssl</code>即可，原因是默认<code>/usr/local/src/openvpn/easy-rsa/easy-rsa/2.0/vars</code>文件定义了<code>OPENSSL=openssl</code>,而笔者没有引用<code>vars</code>文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ./build-dh </span>
</span><span class='line'>Generating DH parameters, 1024 bit long safe prime, generator 2
</span><span class='line'>This is going to take a long <span class="nb">time</span>
</span><span class='line'>... ...
</span><span class='line'><span class="c"># openvpn --genkey --secret /etc/openvpn/keys/ta.key  #生成加密key</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Server端配置文件修改:</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># pwd</span>
</span><span class='line'>/usr/local/src/openvpn/openvpn-2.3.1/sample/sample-config-files
</span><span class='line'><span class="c"># ls </span>
</span><span class='line'>client.conf  loopback-client  openvpn-shutdown.sh  server.conf         tls-home.conf         xinetd-server-config
</span><span class='line'>firewall.sh  loopback-server  openvpn-startup.sh   static-home.conf    tls-office.conf
</span><span class='line'>home.up      office.up        README               static-office.conf  xinetd-client-config
</span><span class='line'><span class="c"># cp server.conf /etc/openvpn/  #拷贝Server模板配置文件到配置目录</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Server端配置文件内容如下</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># grep -vE &#39;^;|^$|^#&#39; /etc/openvpn/server.conf </span>
</span><span class='line'>port 1194
</span><span class='line'>proto udp
</span><span class='line'>dev tun
</span><span class='line'>ca /etc/openvpn/keys/ca.crt
</span><span class='line'>cert /etc/openvpn/keys/kumu_server.crt
</span><span class='line'>key /etc/openvpn/keys/kumu_server.key  <span class="c"># This file should be kept secret</span>
</span><span class='line'>dh /etc/openvpn/keys/dh1024.pem
</span><span class='line'>server 10.8.0.0 255.255.255.0
</span><span class='line'>push <span class="s2">&quot;route 192.168.10.0 255.255.255.0&quot;</span> <span class="c"># 推送路由</span>
</span><span class='line'>client-to-client
</span><span class='line'>keepalive 10 120
</span><span class='line'>tls-auth /etc/openvpn/keys/ta.key 0 <span class="c"># This file is secret</span>
</span><span class='line'>comp-lzo
</span><span class='line'>persist-key
</span><span class='line'>persist-tun
</span><span class='line'>status /etc/openvpn/keys/openvpn-status.log
</span><span class='line'>verb 3
</span></code></pre></td></tr></table></div></figure>


<h3>开启路由转发和启动Openvpn</h3>

<p><strong>开启路由转发</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo </span>1 &gt; /proc/sys/net/ipv4/ip_forward <span class="c">#临时开启</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者修改/etc/sysctl.conf中<code>net.ipv4.ip_forward = 1</code>，执行<code>sysctl -p</code>永久生效</p>

<p><strong>启动服务</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>openvpn --config /etc/openvpn/server.conf --daemon
</span></code></pre></td></tr></table></div></figure>


<h3>Windows客户端连接配置</h3>

<ul>
<li>64位安装<a href="http://swupdate.openvpn.org/community/releases/openvpn-install-2.3.1-I001-x86_64.exe">openvpn-2.3.1-X86_64.exe</a></li>
<li>32位请安装<a href="http://swupdate.openvpn.org/community/releases/openvpn-install-2.3.1-I001-i686.exe">openvpn-2.3.1-i686.exe</a></li>
</ul>


<p>拷贝Server端生成的如下客户端证书到Windows软件安装目录<code>OpenVPN\config</code>下</p>

<ul>
<li>kumu_client1.crt</li>
<li>kumu_client1.key</li>
<li>ca.key</li>
<li>ta.key</li>
</ul>


<p>在<code>OpenVPN\config</code>目录中新建Client端配置文件<code>client.ovpn</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>client
</span><span class='line'>dev tun
</span><span class='line'>proto udp
</span><span class='line'>remote 10.2.0.110 1194
</span><span class='line'>resolv-retry infinite
</span><span class='line'>nobind
</span><span class='line'>persist-key
</span><span class='line'>persist-tun
</span><span class='line'>ca ca.crt
</span><span class='line'>cert kumu_client1.crt
</span><span class='line'>key kumu_client1.key
</span><span class='line'>ns-cert-type server
</span><span class='line'>tls-auth ta.key 1
</span><span class='line'>comp-lzo
</span><span class='line'>verb 3
</span></code></pre></td></tr></table></div></figure>


<p>Win7/Win8以管理员身份启动Openvpn Windows客户端即可，基本的Windows安装这里不作介绍，如果正常，Openvpn Gui客户端显示绿色，ping测试无误，如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>C:<span class="se">\U</span>sers<span class="se">\k</span>umu&gt;ping 10.8.0.1  <span class="c">#测试VPN</span>
</span><span class='line'>
</span><span class='line'>正在 Ping 10.8.0.1 具有 32 字节的数据:
</span><span class='line'>来自 10.8.0.1 的回复: 字节<span class="o">=</span>32 时间&lt;1ms <span class="nv">TTL</span><span class="o">=</span>64
</span><span class='line'>来自 10.8.0.1 的回复: 字节<span class="o">=</span>32 时间&lt;1ms <span class="nv">TTL</span><span class="o">=</span>64
</span><span class='line'>... ...
</span><span class='line'>C:<span class="se">\U</span>sers<span class="se">\k</span>umu&gt;ping 192.168.10.19 <span class="c">#测试内网</span>
</span><span class='line'>
</span><span class='line'>正在 Ping 192.168.10.19 具有 32 字节的数据:
</span><span class='line'>来自 192.168.10.19 的回复: 字节<span class="o">=</span>32 时间<span class="o">=</span>1ms <span class="nv">TTL</span><span class="o">=</span>64
</span><span class='line'>来自 192.168.10.19 的回复: 字节<span class="o">=</span>32 时间<span class="o">=</span>2ms <span class="nv">TTL</span><span class="o">=</span>64
</span><span class='line'>... ...
</span></code></pre></td></tr></table></div></figure>


<h3>Linux客户端配置</h3>

<p><strong>安装</strong>参见Server端安装</p>

<h4>相关配置</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># mkdir /etc/openvpn</span>
</span><span class='line'><span class="c"># cp /usr/local/src/openvpn/openvpn-2.3.1/sample/sample-config-files/client.conf /etc/openvpn/</span>
</span><span class='line'><span class="c"># grep -vE &#39;^$|^#|^;&#39; /etc/openvpn/client.conf</span>
</span><span class='line'>client
</span><span class='line'>dev tun
</span><span class='line'>proto udp
</span><span class='line'>remote 10.2.0.110 1194
</span><span class='line'>resolv-retry infinite
</span><span class='line'>nobind
</span><span class='line'>persist-key
</span><span class='line'>persist-tun
</span><span class='line'>ca ca.crt
</span><span class='line'>cert kumu_client1.crt
</span><span class='line'>key kumu_client1.key
</span><span class='line'>ns-cert-type server
</span><span class='line'>tls-auth ta.key 1
</span><span class='line'>comp-lzo
</span><span class='line'>verb 3
</span></code></pre></td></tr></table></div></figure>


<p>拷贝Server端生成的如下客户端证书到Linux客户端/etc/openvpn下(这里为了方便不再生成一套客户端证书了)</p>

<ul>
<li>kumu_client1.crt</li>
<li>kumu_client1.key</li>
<li>ca.key</li>
<li>ta.key</li>
</ul>


<p><strong>启动Openvpn客户端服务</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>openvpn --config /etc/openvpn/client.conf --daemon
</span></code></pre></td></tr></table></div></figure>


<h4>测试</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ifconfig tun0</span>
</span><span class='line'>tun0      Link encap:UNSPEC  HWaddr 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00
</span><span class='line'>          inet addr:10.8.0.6  P-t-P:10.8.0.5  Mask:255.255.255.255
</span><span class='line'>... ...
</span><span class='line'><span class="c"># route -n</span>
</span><span class='line'>Kernel IP routing table
</span><span class='line'>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
</span><span class='line'>10.8.0.5        0.0.0.0         255.255.255.255 UH    0      0        0 tun0
</span><span class='line'>10.8.0.0        10.8.0.5        255.255.255.0   UG    0      0        0 tun0
</span><span class='line'>192.168.10.0    10.8.0.5        255.255.255.0   UG    0      0        0 tun0
</span><span class='line'>... ...
</span><span class='line'><span class="c"># ping 192.168.10.19</span>
</span><span class='line'>PING 192.168.10.19 <span class="o">(</span>192.168.10.19<span class="o">)</span> 56<span class="o">(</span>84<span class="o">)</span> bytes of data.
</span><span class='line'>64 bytes from 192.168.10.19: <span class="nv">icmp_seq</span><span class="o">=</span>1 <span class="nv">ttl</span><span class="o">=</span>64 <span class="nb">time</span><span class="o">=</span>0.690 ms
</span><span class='line'>64 bytes from 192.168.10.19: <span class="nv">icmp_seq</span><span class="o">=</span>2 <span class="nv">ttl</span><span class="o">=</span>64 <span class="nb">time</span><span class="o">=</span>1.21 ms
</span><span class='line'>... ...
</span></code></pre></td></tr></table></div></figure>


<p>测试正常，无误！</p>

<p>&#8211;EOF&#8211;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DNS chroot rsyslog配置]]></title>
    <link href="http://kumu-Linux.github.com/blog/2013/05/21/named-chroot/"/>
    <updated>2013-05-21T10:53:00+08:00</updated>
    <id>http://kumu-Linux.github.com/blog/2013/05/21/named-chroot</id>
    <content type="html"><![CDATA[<h2>问题描述</h2>

<p>使用rsyslog获取dns查询日志，但是发现每次重启rsyslog服务，dns查询日志就不会再写入，必须重启dns才可以重新获得dns查询日志</p>

<!--more-->


<p>环境： DNS查询日志存放独立分区/data/目录下</p>

<h2>问题解决</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ps -ef | grep name[d]</span>
</span><span class='line'>named     9960     1  0 May20 ?        00:02:09 /usr/sbin/named-sdb -u named -t /var/named/chroot
</span><span class='line'><span class="c"># strace -fp 9960 </span>
</span><span class='line'><span class="c">#使用strace跟踪named进程，在其它终端使用dig查询，截取到如下信息</span>
</span><span class='line'>... ...
</span><span class='line'><span class="o">[</span>pid  9966<span class="o">]</span> connect<span class="o">(</span>6, <span class="o">{</span><span class="nv">sa_family</span><span class="o">=</span>AF_FILE, <span class="nv">path</span><span class="o">=</span><span class="s2">&quot;/dev/log&quot;</span><span class="o">}</span>, 110 &lt;unfinished ...&gt;
</span><span class='line'><span class="o">[</span>pid  9963<span class="o">]</span> recvmsg<span class="o">(</span>537,  &lt;unfinished ...&gt;
</span><span class='line'><span class="o">[</span>pid  9962<span class="o">]</span> futex<span class="o">(</span>0x7f520dc26028, FUTEX_WAKE_PRIVATE, 1<span class="o">)</span> <span class="o">=</span> 0
</span><span class='line'><span class="o">[</span>pid  9963<span class="o">]</span> &lt;... recvmsg resumed&gt; 0x7f5205eaec00, 0<span class="o">)</span> <span class="o">=</span> -1 EAGAIN <span class="o">(</span>Resource temporarily unavailable<span class="o">)</span>
</span><span class='line'><span class="o">[</span>pid  9970<span class="o">]</span> &lt;... epoll_ctl resumed&gt; <span class="o">)</span>   <span class="o">=</span> 0
</span><span class='line'><span class="o">[</span>pid  9966<span class="o">]</span> &lt;... connect resumed&gt; <span class="o">)</span>     <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span><span class='line'><span class="c">#信息显示没有/dev/log该文件</span>
</span><span class='line'>... ...
</span></code></pre></td></tr></table></div></figure>


<p>Google搜索<code>named chroot /dev/log</code>相关获得[CentOS 6: Configure bind logging with bind-chroot] (http://floriancrouzat.net/2011/09/centos-6-configure-bind-logging-bind-chroot-rsyslog/)</p>

<p>修改配置文件<code>/etc/rsyslog.conf</code>添加</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$AddUnixListenSocket</span> /var/named/chroot/dev/log
</span></code></pre></td></tr></table></div></figure>


<p>重启rsyslog,dig查询测试，DNS查询日志接收正常</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ll /var/named/chroot/dev/log </span>
</span><span class='line'>srw-rw-rw- 1 root root 0 May 21 11:30 /var/named/chroot/dev/log
</span></code></pre></td></tr></table></div></figure>


<h2>lsof查看效果</h2>

<p>未添加<code>$AddUnixListenSocket /var/named/chroot/dev/log</code>测试，使用lsof查看rsyslog重启前后named程序占用/dev/log文件对比</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># lsof  -U -p 5986 | grep /dev/log</span>
</span><span class='line'>rsyslogd   5883    root    0u  unix 0xffff8801c10b1840      0t0 14544315 /dev/log
</span><span class='line'><span class="c"># lsof  -U -p 5986 | grep /dev/log</span>
</span><span class='line'>rsyslogd   5883    root    0u  unix 0xffff8801c2bc1580      0t0 14602737 /dev/log
</span></code></pre></td></tr></table></div></figure>


<p>添加<code>$AddUnixListenSocket /var/named/chroot/dev/log</code>后测试rsyslog重启前后named程序占用情况</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># lsof  -U -p 5986 | grep /dev/lo[g]</span>
</span><span class='line'>rsyslogd   5883    root    0u  unix 0xffff8801c2bedac0      0t0 14605223 /dev/log
</span><span class='line'>rsyslogd   5883    root    1u  unix 0xffff8801b39c0840      0t0 14605225 /var/named/chroot/dev/log
</span><span class='line'><span class="c"># lsof  -U -p 5986 | grep /dev/lo[g]</span>
</span><span class='line'>rsyslogd   5883    root    0u  unix 0xffff8801c0913300      0t0 14630150 /dev/log
</span><span class='line'>rsyslogd   5883    root    1u  unix 0xffff8801c2ba7d00      0t0 14630152 /var/named/chroot/dev/log
</span></code></pre></td></tr></table></div></figure>


<p>至于深层次的原因，目前还不是很了解，希望了解的朋友帮解一下。</p>

<p>&#8211;EOF&#8211;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NTP服务]]></title>
    <link href="http://kumu-Linux.github.com/blog/2013/05/20/ntp/"/>
    <updated>2013-05-20T14:53:00+08:00</updated>
    <id>http://kumu-Linux.github.com/blog/2013/05/20/ntp</id>
    <content type="html"><![CDATA[<h2>简介</h2>

<p>Network Time Protocol（NTP）是用来使计算机时间同步化的一种协议，它可以使计算机对其服务器或时钟源（如石英钟，GPS等等)做同步化，它可以提供高精准度的时间校正（LAN上与标准间差小于1毫秒，WAN上几十毫秒），且可使用加密确认的方式来防止恶毒的协议攻击。默认使用<code>UDP 123端口</code></p>

<!--more-->


<p>NTP提供准确时间，首先需要一个准确的UTC时间来源，NTP获得UTC的时间来源可以从原子钟、天文台、卫星，也可从Internet上获取。时间服务器按照NTP服务器的等级传播，根据离外部UTC源的远近将所有服务器归入不用的层(Stratum)中。Stratum-1在顶层由外部UTC接入，stratum-1的时间服务器为整个系统的基础，Stratum的总数限制在15以内。下图为NTP层次图：</p>

<center><img src="http://kumu-Linux.github.com/images/Network_Time_Protocol_servers_and_clients.png" alt="ntp" title="ntp" width="400" /></center>


<h2>NTP Server安装配置</h2>

<p>关于NTP服务器的安装，根据不同版本安装方法也不同。REDHAT系统则可以使用yum安装，Ubuntu系列可以使用apt-get安装，这里不做具体的介绍，主要详细介绍配置文件的信息。</p>

<p>对于Centos过滤注释和空行后，ntp配置文件内容如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># grep -vE &#39;^#|^$&#39; /etc/ntp.conf </span>
</span><span class='line'>driftfile /var/lib/ntp/drift
</span><span class='line'>restrict default kod nomodify notrap nopeer noquery
</span><span class='line'>restrict -6 default kod nomodify notrap nopeer noquery
</span><span class='line'>restrict 127.0.0.1
</span><span class='line'>restrict -6 ::1
</span><span class='line'>server 0.centos.pool.ntp.org
</span><span class='line'>server 1.centos.pool.ntp.org
</span><span class='line'>server 2.centos.pool.ntp.org
</span><span class='line'>includefile /etc/ntp/crypto/pw
</span><span class='line'>keys /etc/ntp/keys
</span></code></pre></td></tr></table></div></figure>


<h3>配置选项说明</h3>

<ul>
<li><code>driftfile</code>选项， 则指定了用来保存系统时钟频率偏差的文件。 ntpd程序使用它来自动地补偿时钟的自然漂移， 从而使时钟即使在切断了外来时源的情况下， 仍能保持相当的准确度。另外，driftfile 选项也保存上一次响应所使用的 NTP 服务器的信息。 这个文件包含了 NTP 的内部信息， 它不应被任何其他进程修改。<code>无需更改</code></li>
<li><code>restrict default kod nomodify notrap nopeer noquery</code>  默认拒绝所有NTP客户端的操作【restrict <IP 地址> &lt;子网掩码>|&lt;网段> [ignore|nomodiy|notrap|notrust|nknod]】 指定可以通信的IP地址和网段。如果没有指定选项，表示客户端访问NTP服务器没有任何限制

<ul>
<li>ignore    关闭所有NTP服务</li>
<li>nomodiy   表示客户端不能更改NTP服务器的时间参数，但可以通过NTP服务器进行时间同步</li>
<li>notrust   拒绝没有通过认证的客户端</li>
<li>knod      kod技术科阻止&#8221;Kiss of Death&#8221;包（一种DOS攻击）对服务器的破坏，使用knod开启功能</li>
<li>nopeer    不与其它同一层的NTP服务器进行同步</li>
</ul>
</li>
<li><code>server 【IP|FQDN|prefer】</code>指该服务器上层NTP Server，使用prefer的优先级最高，没有使用prefer则按照配置文件顺序由高到低，默认情况下至少15min和上层NTP服务器进行时间校对</li>
<li><code>fudge</code>可以指定本地NTP Server层，如<code>fudge 127.0.0.1 stratum 9</code></li>
<li><code>broadcast 网段 子网掩码</code>指定NTP进行时间广播的网段，如<code>broadcast 192.168.1.255</code></li>
<li><code>logfile</code> 可以指定NTP Server日志文件</li>
</ul>


<p>几个与NTP相关的配置文件:<code>/usr/share/zoneinfo/</code>、<code>/etc/sysconfig/clock</code>、<code>/etc/localtime</code>
* /usr/share/zoneinfo/ 存放时区文件目录
* /etc/sysconfig/clock 指定当前系统时区信息
* /etc/localtime 相应的时区文件</p>

<p>如果需要修改当前时区，则可以从/usr/share/zoneinfo/目录拷贝相应时区文件覆盖/etc/localtime并修改/etc/sysconfig/clock 即可</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
</span><span class='line'>sed -i <span class="s1">&#39;s:ZONE=.*:ZONE=&quot;Asia/Shanghai&quot;:g&#39;</span> /etc/sysconfig/clock
</span></code></pre></td></tr></table></div></figure>


<h2>相关命令</h2>

<p><code>ntpstat</code>查看同步状态</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ntpstat </span>
</span><span class='line'>synchronised to NTP server <span class="o">(</span>192.168.0.18<span class="o">)</span> at stratum 4
</span><span class='line'>   <span class="nb">time </span>correct to within 88 ms   <span class="c">#表面时间校正88ms</span>
</span><span class='line'>   polling server every 1024 s        <span class="c">#每隔1024s更新一次</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>ntpq</code>列出上层状态</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ntpq -np</span>
</span><span class='line'>     remote           refid      st t when poll reach   delay   offset  <span class="nv">jitter</span>
</span><span class='line'><span class="o">==============================================================================</span>
</span><span class='line'>*192.168.0.18       202.112.31.197   3 u  101 1024  377   14.268    0.998   0.143
</span></code></pre></td></tr></table></div></figure>


<p>输出说明：</p>

<ul>
<li><code>remote</code>  NTP Server</li>
<li><code>refid</code>   参考的上层ntp地址</li>
<li><code>st</code>  层次</li>
<li><code>when</code>    上次更新时间距离现在时常</li>
<li><code>poll</code>    下次更新时间</li>
<li><code>reach</code>   更新次数</li>
<li><code>delay</code>   延迟</li>
<li><code>offset</code>  时间补偿结果</li>
<li><code>jitter</code>  与BIOS硬件时间差异</li>
</ul>


<h2>参考文档</h2>

<p><a href="http://baike.baidu.com/view/60648.htm">NTP百度百科</a>
<a href="http://en.wikipedia.org/wiki/Network_Time_Protocol">NTP维基百科</a>
鸟哥Linux私房菜</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ping和dns的一个小插曲]]></title>
    <link href="http://kumu-Linux.github.com/blog/2013/05/14/ping-dns/"/>
    <updated>2013-05-14T17:54:00+08:00</updated>
    <id>http://kumu-Linux.github.com/blog/2013/05/14/ping-dns</id>
    <content type="html"><![CDATA[<p>今天遇到一个很奇葩的问题,长话短说，描述下基本问题：修改RHEL6 <code>/etc/resolv.conf</code> 配置文件加入公司内网DNS nameserver，用以解析内网，把之前不能解析外网的DNS nameserver放在第二位作为备，问题就出现了</p>

<!--more-->


<h3>问题重现</h3>

<p>解析正常</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># nslookup mail.server1.test.com</span>
</span><span class='line'>Server:       192.168.0.8
</span><span class='line'>Address:  192.168.0.8#53
</span><span class='line'>
</span><span class='line'>Name: mail.server1.test.com
</span><span class='line'>Address: 192.168.0.8
</span></code></pre></td></tr></table></div></figure>


<p>但是域名ping不通 【strace尝试追踪问题，使用的是公司内网DNS，但是获取不到地址】</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ping mail.server1.test.com</span>
</span><span class='line'>ping: unknown host mail.server1.test.com
</span></code></pre></td></tr></table></div></figure>


<h3>问题解决</h3>

<p>1、查看/etc/nsswitch.conf内容，解析顺序如下，文件没有问题</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># grep ^hosts:  /etc/nsswitch.conf </span>
</span><span class='line'>hosts:      files dns
</span></code></pre></td></tr></table></div></figure>


<p>2、重启nscd【Dns Server Cache】，尝试清空缓存，问题依然存在</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># /etc/init.d/nscd restart</span>
</span></code></pre></td></tr></table></div></figure>


<p>&#8230; &#8230;</p>

<p>期间N种方式的尝试，无解。后来同事发现把之前的<strong>外网DNS注释</strong>，<strong>重启<code>nscd</code></strong>，问题解决。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># /etc/init.d/nscd restart</span>
</span></code></pre></td></tr></table></div></figure>


<p>&#8211;EOF&#8211;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rsync备份之ssh篇]]></title>
    <link href="http://kumu-Linux.github.com/blog/2013/05/06/rsync-ssh/"/>
    <updated>2013-05-06T20:19:00+08:00</updated>
    <id>http://kumu-Linux.github.com/blog/2013/05/06/rsync-ssh</id>
    <content type="html"><![CDATA[<p><code>rsync</code>是类unix系统下的数据镜像备份工具，从软件的命名上就可以看出来了——remote sync。它的特性如下：</p>

<!--more-->


<ul>
<li>1、可以镜像保存整个目录树和文件系统。</li>
<li>2、可以很容易做到保持原来文件的权限、时间、软硬链接等等。</li>
<li>3、无须特殊权限即可安装。</li>
<li>4、优化的流程，文件传输效率高。</li>
<li>5、可以使用rsh、ssh等方式来传输文件，当然也可以通过直接的socket连接。</li>
<li>6、支持匿名传输。</li>
</ul>


<p>在使用rsync 进行远程同步时，可以使用两种方式：<strong>远程Shell方式</strong>（用户验证由 ssh 负责）和 <strong>C/S 方式</strong>（即客户连接远程rsync服务器，用户验证由rsync服务器负责）。</p>

<p>无论本地同步目录还是远程同步数据，首次运行时将会把全部文件拷贝一次，以后再运行时将只拷贝有变化的文件（对于新文件）或文件的变化部分（对于原有文件）。</p>

<h2>rsync+ssh</h2>

<p>在常驻模式（daemon mode）下，rsync默认监听TCP端口873。SSH情况下，rsync用户端执行程式必须同时在本地和远程机器上安装。</p>

<p>rsync在首次复制时没有速度优势，速度不如tar，因此当数据量很大时您可以考虑先使用tar 进行首次复制，然后再使用rsync进行数据同步。</p>

<p>另外，无法实现实时更新，如果想实现实时更新rsync需要借助lsyncd工具</p>

<p>rsync一些选项：</p>

<ul>
<li>&#8211;delete : delete files that don&#8217;t exist on sender (system)     删除DST中SRC没有的文件</li>
<li>-v : Verbose (try -vv for more detailed information)    详细模式显示</li>
<li>-e &#8220;ssh options&#8221; : specify the ssh as remote shell  指定ssh作为远程shell</li>
<li>-a : archive mode   归档模式，表示以递归方式传输文件，并保持所有文件属性，等于-rlptgoD

<ul>
<li>-l(&#8211;links) 保留软链接</li>
<li>-p(&#8211;perms) 保留文件权限</li>
<li>-t(&#8211;times) 保留文件时间信息</li>
<li>-g(&#8211;group) 保留属组信息</li>
<li>-o(&#8211;owner) 保留文件属主信息</li>
<li>-D(&#8211;devices)   保留设备文件信息</li>
</ul>
</li>
<li>-r : recurse into directories 递归</li>
<li>-z : compress file data 压缩文件</li>
</ul>


<h3>增量备份</h3>

<p><strong>A&#8211;>B 同步  本地到远端:</strong></p>

<p><code>rsync -av /src_dir/ user@IP_Addres:/dest_dir/</code></p>

<p><strong>B&#8211;>A 同步   远端到本地:</strong></p>

<p><code>rsync -av user@IP_Addres:/src_dir/  /dest_dir/</code></p>

<h3>镜像备份</h3>

<p><strong>A&#8211;>B 同步  本地到远端:</strong></p>

<p><code>rsync -av --delete /src_dir/ user@IP_Addres:/dest_dir/</code></p>

<p><strong>B&#8211;>A 同步  远端到本地:</strong></p>

<p><code>rsync -av --delete user@IP_Addres:/src_dir/  /dest_dir/</code></p>

<h2>举例：</h2>

<h3>常规增量备份</h3>

<p>A:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>root@server www<span class="o">]</span><span class="c"># ls</span>
</span><span class='line'>a  b  c  d
</span><span class='line'><span class="o">[</span>root@server www<span class="o">]</span><span class="c"># rsync -av /www/ root@10.1.1.95:/www/</span>
</span><span class='line'>root@10.1.1.95<span class="err">&#39;</span>s password:
</span><span class='line'>building file list ... <span class="k">done</span>
</span><span class='line'>./
</span><span class='line'>a
</span><span class='line'>b
</span><span class='line'>c
</span><span class='line'>d
</span><span class='line'>
</span><span class='line'>sent 262 bytes  received 114 bytes  107.43 bytes/sec
</span><span class='line'>total size is 0  speedup is 0.00
</span><span class='line'><span class="o">[</span>root@server www<span class="o">]</span><span class="c">#</span>
</span></code></pre></td></tr></table></div></figure>


<p>B:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>root@localhost www<span class="o">]</span><span class="c"># ls   //发现同步成功</span>
</span><span class='line'>a  b  c  d
</span><span class='line'><span class="o">[</span>root@localhost www<span class="o">]</span><span class="c">#</span>
</span></code></pre></td></tr></table></div></figure>


<h3>镜像备份</h3>

<p>A：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>root@server www<span class="o">]</span><span class="c"># rm -rf *</span>
</span><span class='line'><span class="o">[</span>root@server www<span class="o">]</span><span class="c"># rsync -av --delete /www/ root@10.1.1.95:/www/</span>
</span><span class='line'>root@10.1.1.95<span class="err">&#39;</span>s password:
</span><span class='line'>building file list ... <span class="k">done</span>
</span><span class='line'>deleting d
</span><span class='line'>deleting c
</span><span class='line'>deleting b
</span><span class='line'>deleting a
</span><span class='line'>./
</span><span class='line'>
</span><span class='line'>sent 62 bytes  received 26 bytes  35.20 bytes/sec
</span><span class='line'>total size is 0  speedup is 0.00
</span><span class='line'><span class="o">[</span>root@server www<span class="o">]</span><span class="c">#</span>
</span></code></pre></td></tr></table></div></figure>


<p>B：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>root@localhost www<span class="o">]</span><span class="c"># ls   </span>
</span><span class='line'><span class="o">[</span>root@localhost www<span class="o">]</span><span class="c">#</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>使用增量备份后就会删除同步另一端的文件保持两者相同，即镜像同步，而增量备份则不会出现这种现象。推荐在使用过程中使用<code>-n</code>选项先测试一遍再真实操作，以防误操作</strong></p>

<p>&#8211;EOF&#8211;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2-2、Global Flag (g flag)[译]]]></title>
    <link href="http://kumu-Linux.github.com/blog/2013/05/05/sed-7/"/>
    <updated>2013-05-05T09:15:00+08:00</updated>
    <id>http://kumu-Linux.github.com/blog/2013/05/05/sed-7</id>
    <content type="html"><![CDATA[<p>SED替代标志g表示全局。sed默认替换命令将只替换每一行第一个出现的{original-string}。如果你想改变所有出现的{original-string}在行中变为{replacement-string}，你应该使用全局标志g。</p>

<!--more-->


<p><strong>替换每行的第一个<code>a</code>变为<code>A</code></strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sed <span class="s1">&#39;s/a/A/&#39;</span> employee.txt
</span><span class='line'>101,John Doe,CEO
</span><span class='line'>102,JAson Smith,IT Manager
</span><span class='line'>103,RAj Reddy,Sysadmin
</span><span class='line'>104,AnAnd Ram,Developer
</span><span class='line'>105,JAne Miller,Sales Manager
</span></code></pre></td></tr></table></div></figure>


<p><strong>替换每行所有的<code>a</code>变为<code>A</code></strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sed <span class="s1">&#39;s/a/A/g&#39;</span> employee.txt
</span><span class='line'>101,John Doe,CEO
</span><span class='line'>102,JAson Smith,IT MAnAger
</span><span class='line'>103,RAj Reddy,SysAdmin
</span><span class='line'>104,AnAnd RAm,Developer
</span><span class='line'>105,JAne Miller,SAles MAnAger
</span></code></pre></td></tr></table></div></figure>


<p><strong>注</strong>:因为没有指定地址范围，所以以上例子都是针对文件所有行的</p>

<p>&#8211;EOF&#8211;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2-1、Sed Substitute Command[译]]]></title>
    <link href="http://kumu-Linux.github.com/blog/2013/05/04/sed-6/"/>
    <updated>2013-05-04T23:29:00+08:00</updated>
    <id>http://kumu-Linux.github.com/blog/2013/05/04/sed-6</id>
    <content type="html"><![CDATA[<h2>Sed 替换命令语法</h2>

<p>Sed替换命令语法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sed <span class="s1">&#39;[address-range|pattern-range] s/originalstring/</span>
</span><span class='line'><span class="s1">replacement-string/[substitute-flags]&#39;</span> inputfile
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>在上面的sed语法中:</p>

<ul>
<li>地址范围或者模式范围是可选的，如果你没有指定任何一个，那么sed会在所有的行中执行替换命令</li>
<li><code>s</code>&#8211;告诉sed执行替换命令</li>
<li>原始字符串&#8211;这个字符串将会在输入文件中被搜索。原始字符串也可以是一个正则表达式</li>
<li>替换字符串&#8211;Sed将会通过这个字符串替换原始字符串</li>
</ul>


<p><strong>注</strong>:记住源文件不改变;替换是在模式空间的buffer中完成并且打印输出。</p>

<h2>以下是几个简单的sed替代的例子</h2>

<p><strong>更换所有出现的Director:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sed <span class="s1">&#39;s/Manager/Director/&#39;</span> employee.txt
</span><span class='line'>101,John Doe,CEO
</span><span class='line'>102,Jason Smith,IT Director
</span><span class='line'>103,Raj Reddy,Sysadmin
</span><span class='line'>104,Anand Ram,Developer
</span><span class='line'>105,Jane Miller,Sales Director
</span></code></pre></td></tr></table></div></figure>


<p><strong>只替换行中含有关键词&#8217;Sales&#8217;行中的Manager为Director:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sed <span class="s1">&#39;/Sales/s/Manager/Director/&#39;</span> employee.txt
</span><span class='line'>101,John Doe,CEO
</span><span class='line'>102,Jason Smith,IT Manager
</span><span class='line'>103,Raj Reddy,Sysadmin
</span><span class='line'>104,Anand Ram,Developer
</span><span class='line'>105,Jane Miller,Sales Director
</span></code></pre></td></tr></table></div></figure>


<p><strong>注</strong>:使用地址范围造成只替换了一个，而之前例子显示是替换两个</p>

<p>&#8211;EOF&#8211;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[通过sysfs获取dmi硬件信息]]></title>
    <link href="http://kumu-Linux.github.com/blog/2013/05/02/hardware/"/>
    <updated>2013-05-02T22:27:00+08:00</updated>
    <id>http://kumu-Linux.github.com/blog/2013/05/02/hardware</id>
    <content type="html"><![CDATA[<p>获取dmi系统硬件信息的方法有很多，之前笔者在<a href="http://kumu-linux.github.io//blog/2013/04/27/dmidecode/">Dmidecode</a> 一文中介绍了命令dmidecode获取dmi硬件信息的方法。本文补充另外一种获取dmi硬件信息的方法，主要是通过查看sys文件系统的文件获取。关于sysfs的具体信息可以参考维基百科<a href="https://zh.wikipedia.org/wiki/Sysfs">sysfs</a></p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># pwd</span>
</span><span class='line'>/sys/class/dmi/id
</span><span class='line'><span class="c"># ls </span>
</span><span class='line'>bios_date        board_name     chassis_asset_tag  chassis_version  product_serial   subsystem
</span><span class='line'>bios_vendor      board_serial   chassis_serial     modalias         product_uuid     sys_vendor
</span><span class='line'>bios_version     board_vendor   chassis_type       power            product_version  uevent
</span><span class='line'>board_asset_tag  board_version  chassis_vendor     product_name     smbios_version
</span></code></pre></td></tr></table></div></figure>


<p><code>/sys/class/dmi/id</code>目录中存放了很多的硬件信息，包括产品信息、主板信息、Bios信息、底板信息等，我们可以直接<code>cat</code>所有获取信息的文件名即可，如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># cat product_serial #查看产品序列号，实验在Vmware下操作，因此显示是VMware类型</span>
</span><span class='line'>VMware-56 4d 55 a2 5e ff cf 90-57 50 f8 4d 13 60 c4 16
</span><span class='line'><span class="c"># cat product_name </span>
</span><span class='line'>VMware Virtual Platform
</span></code></pre></td></tr></table></div></figure>


<p>根据需要获取的硬件信息类别，查看相应的文件即可，这里不再一一说明，可以对照<code>dmidecode</code>学习。</p>

<p>&#8211;EOF&#8211;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1-5. Write Pattern Space to File[译]]]></title>
    <link href="http://kumu-Linux.github.com/blog/2013/05/02/sed-5/"/>
    <updated>2013-05-02T00:06:00+08:00</updated>
    <id>http://kumu-Linux.github.com/blog/2013/05/02/sed-5</id>
    <content type="html"><![CDATA[<p>使用sed <code>w</code>命令，你可以把当前模式空间内容写入到文件。默认的每一行sed标准流都会打印输出，因此如果你想输出文件但不想打印到屏幕，那么你还是需要使用-n选项。</p>

<!--more-->


<p>接下来的是一些例子。</p>

<p><strong>把employee.txt文件内容写入到output.txt（并且打印到屏幕）:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sed <span class="s1">&#39;w output.txt&#39;</span> employee.txt
</span><span class='line'>101,John Doe,CEO
</span><span class='line'>102,Jason Smith,IT Manager
</span><span class='line'>… …
</span><span class='line'><span class="nv">$ </span>cat output.txt
</span><span class='line'>101,John Doe,CEO
</span><span class='line'>102,Jason Smith,IT Manager
</span><span class='line'>… …   
</span></code></pre></td></tr></table></div></figure>


<p><strong>把employee.txt文件内容写入到output.txt，但是不打印到屏幕：</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sed -n <span class="s1">&#39;w output.txt&#39;</span> employee.txt
</span><span class='line'><span class="nv">$ </span>cat output.txt
</span><span class='line'>101,John Doe,CEO
</span><span class='line'>102,Jason Smith,IT Manager
</span><span class='line'>… …
</span></code></pre></td></tr></table></div></figure>


<p><strong>只写入第二行:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sed -n <span class="s1">&#39;2 w output.txt&#39;</span> employee.txt
</span><span class='line'><span class="nv">$ </span>cat output.txt
</span><span class='line'>102,Jason Smith,IT Manager
</span></code></pre></td></tr></table></div></figure>


<p><strong>写入1到4行:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sed -n <span class="s1">&#39;1,4 w output.txt&#39;</span> employee.txt
</span><span class='line'><span class="nv">$ </span>cat output.txt
</span><span class='line'>101,John Doe,CEO
</span><span class='line'>102,Jason Smith,IT Manager
</span><span class='line'>… …
</span></code></pre></td></tr></table></div></figure>


<p><strong>写入第二行到最后一行：</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sed -n <span class="s1">&#39;2,$ w output.txt&#39;</span> employee.txt
</span><span class='line'><span class="nv">$ </span>cat output.txt
</span><span class='line'>102,Jason Smith,IT Manager
</span><span class='line'>103,Raj Reddy,Sysadmin
</span><span class='line'>… …
</span></code></pre></td></tr></table></div></figure>


<p><strong>只写入奇数行：</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sed -n <span class="s1">&#39;1~2 w output.txt&#39;</span> employee.txt
</span><span class='line'><span class="nv">$ </span>cat output.txt
</span><span class='line'>101,John Doe,CEO
</span><span class='line'>103,Raj Reddy,Sysadmin
</span><span class='line'>105,Jane Miller,Sales Manager
</span></code></pre></td></tr></table></div></figure>


<p><strong>写入匹配词”Jane”的行：</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sed -n <span class="s1">&#39;/Jane/ w output.txt&#39;</span> employee.txt
</span><span class='line'><span class="nv">$ </span>cat output.txt
</span><span class='line'>105,Jane Miller,Sales Manager
</span></code></pre></td></tr></table></div></figure>


<p><strong>从第一行开始写入匹配”Jason”的行到第四行：</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sed -n <span class="s1">&#39;/Jason/,4 w output.txt&#39;</span> employee.txt
</span><span class='line'><span class="nv">$ </span>cat output.txt
</span><span class='line'>102,Jason Smith,IT Manager
</span><span class='line'>103,Raj Reddy,Sysadmin
</span><span class='line'>104,Anand Ram,Developer
</span></code></pre></td></tr></table></div></figure>


<p><strong>注</strong>：如果1到4行没有匹配到”Jason”，这条命令只写入第四行后匹配”Jason”的行</p>

<p><strong>写入行从第一行开始匹配”Raj”的行到结束行：</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sed -n <span class="s1">&#39;/Raj/,$ w output.txt&#39;</span> employee.txt
</span><span class='line'><span class="nv">$ </span>cat output.txt
</span><span class='line'>103,Raj Reddy,Sysadmin
</span><span class='line'>104,Anand Ram,Developer
</span><span class='line'>105,Jane Miller,Sales Manager
</span></code></pre></td></tr></table></div></figure>


<p><strong>写入匹配”Raj”行开始直到匹配到“Jane”行：</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sed -n <span class="s1">&#39;/Raj/,/Jane/ w output.txt&#39;</span> employee.txt
</span><span class='line'><span class="nv">$ </span>cat output.txt
</span><span class='line'>103,Raj Reddy,Sysadmin
</span><span class='line'>104,Anand Ram,Developer
</span><span class='line'>105,Jane Miller,Sales Manager
</span></code></pre></td></tr></table></div></figure>


<p><strong>写入匹配“Jason”的行和其之后的2行：</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sed -n <span class="s1">&#39;/Jason/,+2 w output.txt&#39;</span> employee.txt
</span><span class='line'><span class="nv">$ </span>cat output.txt
</span><span class='line'>102,Jason Smith,IT Manager
</span><span class='line'>103,Raj Reddy,Sysadmin
</span><span class='line'>104,Anand Ram,Developer
</span></code></pre></td></tr></table></div></figure>


<p><strong>注</strong>：你可能不经常使用w命令，大多数人使用UNIX输出重定向，来保存sed输出到一个文件，如: sed ‘p’ exployee.txt > output.txt</p>

<p>&#8211;EOF&#8211;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1-4、Delete Lines[译]]]></title>
    <link href="http://kumu-Linux.github.com/blog/2013/04/29/sed-4/"/>
    <updated>2013-04-29T23:29:00+08:00</updated>
    <id>http://kumu-Linux.github.com/blog/2013/04/29/sed-4</id>
    <content type="html"><![CDATA[<p>使用sed <code>d</code>命令，你可以删除行。请注意被删除的行只是输出流。就像其它sed命令一样，<code>d</code>命令也不能修改原始文件的内容。</p>

<!--more-->


<p>默认如果你使用sed命令没有指定地址范围，它匹配所有的行。因此，接下来例子将不会打印任何输出，它匹配employee.txt文件中所有的行并且删除它们。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sed <span class="s1">&#39;d&#39;</span> employee.txt
</span></code></pre></td></tr></table></div></figure>


<p>指定删除的地址范围是非常有用的。接下来有很多类似的例子：</p>

<p><strong>仅删除第二行:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sed <span class="s1">&#39;2 d&#39;</span> employee.txt
</span><span class='line'>101,John Doe,CEO
</span><span class='line'>103,Raj Reddy,Sysadmin
</span><span class='line'>... ...
</span></code></pre></td></tr></table></div></figure>


<p><strong>删除1到4行:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sed <span class="s1">&#39;1,4 d&#39;</span> employee.txt
</span><span class='line'>105,Jane Miller,Sales Manager
</span></code></pre></td></tr></table></div></figure>


<p><strong>删除行2到最后一行:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sed <span class="s1">&#39;2,$ d&#39;</span> employee.txt
</span><span class='line'>101,John Doe,CEO
</span></code></pre></td></tr></table></div></figure>


<p><strong>仅删除奇数行:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sed <span class="s1">&#39;1~2 d&#39;</span> employee.txt
</span><span class='line'>102,Jason Smith,IT Manager
</span><span class='line'>104,Anand Ram,Developer
</span></code></pre></td></tr></table></div></figure>


<p><strong>删除匹配词“Manager”的行：</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sed <span class="s1">&#39;/Manager/ d&#39;</span> employee.txt
</span><span class='line'>101,John Doe,CEO
</span><span class='line'>103,Raj Reddy,Sysadmin
</span><span class='line'>104,Anand Ram,Developer
</span></code></pre></td></tr></table></div></figure>


<p><strong>删除匹配有”Jason”的行到第四行：</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sed <span class="s1">&#39;/Jason/,4 d&#39;</span> employee.txt
</span><span class='line'>101,John Doe,CEO
</span><span class='line'>105,Jane Miller,Sales Manager
</span></code></pre></td></tr></table></div></figure>


<p><strong>注</strong>：如果这儿没有匹配“Jason“的行在1到4行中，这条命令只删除第四行后匹配”Jason“的行</p>

<p><strong>删除匹配“Raj“的行到最后一行:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sed <span class="s1">&#39;/Raj/,$ d&#39;</span> employee.txt
</span><span class='line'>101,John Doe,CEO
</span><span class='line'>102,Jason Smith,IT Manager
</span></code></pre></td></tr></table></div></figure>


<p><strong>删除匹配”Raj”的行到匹配“Jane“的行：</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sed <span class="s1">&#39;/Raj/,/Jane/ d&#39;</span> employee.txt
</span><span class='line'>101,John Doe,CEO
</span><span class='line'>102,Jason Smith,IT Manager
</span></code></pre></td></tr></table></div></figure>


<p><strong>删除匹配”Jason”的行和其之后的两行：</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sed <span class="s1">&#39;/Jason/,+2 d&#39;</span> employee.txt
</span><span class='line'>101,John Doe,CEO
</span><span class='line'>105,Jane Miller,Sales Manager
</span></code></pre></td></tr></table></div></figure>


<h2>有用的删除实例</h2>

<p>下面的实例在日常操作中是非常有用的</p>

<p><strong>删除所有的空行</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sed <span class="s1">&#39;/^$/ d&#39;</span> employee.txt
</span></code></pre></td></tr></table></div></figure>


<p>grep实现过滤空行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>grep -v <span class="s1">&#39;^$&#39;</span> employee.txt
</span></code></pre></td></tr></table></div></figure>


<p><strong>删除所有注释的行(假设注释行以#号开头)</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sed <span class="s1">&#39;/^#/ d&#39;</span> employee.txt
</span></code></pre></td></tr></table></div></figure>


<p>grep实现过滤注释行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>grep -v <span class="s1">&#39;^#&#39;</span> employee.txt
</span></code></pre></td></tr></table></div></figure>


<p><strong>注</strong>：当你使用多个sed命令时，此时sed遇到&#8217;d&#8217;命令，整个匹配的匹配行将被删除，并且之后的命令对于删除的行将不会执行。</p>

<p>&#8211;EOF&#8211;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1-3、Print Pattern Space[译]]]></title>
    <link href="http://kumu-Linux.github.com/blog/2013/04/28/sed-3/"/>
    <updated>2013-04-28T00:25:00+08:00</updated>
    <id>http://kumu-Linux.github.com/blog/2013/04/28/sed-3</id>
    <content type="html"><![CDATA[<p>使用sed的p命令，你可以打印当前模式空间中的行。</p>

<p>你也许会好奇为什么需要p命令，默认的sed会在执行完命令后输出模式空间的缓存。</p>

<p>其实这是有原因的，等会你将看到，这个命令将允许你专门控制打印到标准输出。通常来说，你应该使用-n选项来抑制作为标准sed流一部分的默认输出。否则，当执行p命令的时候，该行会输出两次。</p>

<!--more-->


<p>接下来的例子employee.txt文件中的行将输出两次：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sed <span class="s1">&#39;p&#39;</span> employee.txt
</span><span class='line'>101,John Doe,CEO
</span><span class='line'>101,John Doe,CEO
</span><span class='line'>102,Jason Smith,IT Manager
</span><span class='line'>102,Jason Smith,IT Manager
</span><span class='line'>… …
</span></code></pre></td></tr></table></div></figure>


<p>打印每行一次(作用和’cat expolyee.txt’相同)：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sed -n <span class="s1">&#39;p&#39;</span> employee.txt
</span><span class='line'>101,John Doe,CEO
</span><span class='line'>102,Jason Smith,IT Manager
</span></code></pre></td></tr></table></div></figure>


<h2>特定的地址范围</h2>

<p>如果你在使用sed命令前不指定地址范围，那么默认会匹配所有的行，接下来的一些例子是在使用sed命令前指定一个范围</p>

<p><strong>只打印第二行</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sed -n <span class="s1">&#39;2 p&#39;</span> employee.txt
</span><span class='line'>102,Jason Smith,IT Manager
</span></code></pre></td></tr></table></div></figure>


<p><strong>打印1到2行</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sed -n <span class="s1">&#39;1,2 p&#39;</span> employee.txt
</span><span class='line'>101,John Doe,CEO
</span><span class='line'>102,Jason Smith,IT Manager
</span></code></pre></td></tr></table></div></figure>


<p><strong>打印第2行到结尾($表示到最后一行)</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sed -n <span class="s1">&#39;2,$ p&#39;</span> employee.txt
</span></code></pre></td></tr></table></div></figure>


<h2>修改地址范围</h2>

<p>你可以通过逗号、+和~修改地址范围。</p>

<ul>
<li>,在上面的例子中，我们看到了使用逗号(,)修改地址范围规范的一部分。它的意义很明了：n,m显示n到m的值。</li>
<li>+号可以和逗号结合，指定的是行数而不是绝对的行号。例如，n,+m意味着从n开始往后m行。</li>
<li>~号也可用于修好地址范围。它的特殊的意思表示跳过命令之间的行。例如，地址范围n~m表面sed从第n行开始并且每次跳过m行。

<ul>
<li>1~2 匹配1,3,5,7,等。</li>
<li>2~2 匹配 2,4,6,8,等。</li>
<li>1~3 匹配 1,4,7,10,等。</li>
<li>2~3 匹配 2,5,8,11,等。</li>
</ul>
</li>
</ul>


<p><strong>只打印奇数行：</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sed -n <span class="s1">&#39;1~2 p&#39;</span> employee.txt
</span><span class='line'>101,John Doe,CEO
</span><span class='line'>103,Raj Reddy,Sysadmin
</span><span class='line'>… …
</span></code></pre></td></tr></table></div></figure>


<h2>词匹配</h2>

<p>正如你可以指定一定数量地址（或者地址范围），你也可以指定一个特定的词(或者词的范围)匹配，在接下来的例子中将会演示。</p>

<p><strong>打印匹配有“Jane”的行：</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sed -n ‘/Jane/ p’ employee.txt
</span><span class='line'>105,Jane Miller,Sales Manager
</span></code></pre></td></tr></table></div></figure>


<p><strong>打印从第一行到第四行匹配“Jason”的行：</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sed -n <span class="s1">&#39;/Jason/,4 p&#39;</span> employee.txt
</span><span class='line'>102,Jason Smith,IT Manager
</span><span class='line'>103,Raj Reddy,Sysadmin
</span><span class='line'>104,Anand Ram,Developer
</span></code></pre></td></tr></table></div></figure>


<pre><code>注：如果这里再1到4行没有匹配到”Jason”，那么这条命令会打印出包含“Jason”之后的行。
</code></pre>

<p><strong>打印从第一行到最后一行匹配”Raj”的行：</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sed -n <span class="s1">&#39;/Raj/,$ p&#39;</span> employee.txt
</span><span class='line'>103,Raj Reddy,Sysadmin
</span><span class='line'>104,Anand Ram,Developer
</span><span class='line'>105,Jane Miller,Sales Manager
</span></code></pre></td></tr></table></div></figure>


<p><strong>打印匹配行”Raj”直到匹配到”Jane”行：</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sed -n <span class="s1">&#39;/Raj/,/Jane/ p&#39;</span> employee.txt
</span><span class='line'>103,Raj Reddy,Sysadmin
</span><span class='line'>104,Anand Ram,Developer
</span><span class='line'>105,Jane Miller,Sales Manager
</span></code></pre></td></tr></table></div></figure>


<pre><code>注：如果没有匹配到Jane，则打印“Raj“行到最后一行
</code></pre>

<p><strong>打印匹配“Jason”的行并且打印“Jason”行后的两行：</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sed -n <span class="s1">&#39;/Jason/,+2 p&#39;</span> employee.txt
</span><span class='line'>102,Jason Smith,IT Manager
</span><span class='line'>103,Raj Reddy,Sysadmin
</span><span class='line'>104,Anand Ram,Developer
</span></code></pre></td></tr></table></div></figure>


<p>&#8211;EOF&#8211;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dmidecode]]></title>
    <link href="http://kumu-Linux.github.com/blog/2013/04/27/dmidecode/"/>
    <updated>2013-04-27T07:39:00+08:00</updated>
    <id>http://kumu-Linux.github.com/blog/2013/04/27/dmidecode</id>
    <content type="html"><![CDATA[<p>在介绍dmidecode命令之前，先介绍一下DMI。所谓DMI，即DesktopManagement Interface。也有被称为SMBIOS，即System Management BIOS。DMI表的意义在于让我们在不探测硬件实体的情况下获取硬件的部分信息，方便了用户，但也同时表明，表中的信息可能是不可靠的。</p>

<!--more-->


<p><code>dmidecode</code>的作用则是将DMI表中的信息用人可以读懂的方式显示出来。</p>

<p>最简单的使用方法，它将显示dmidecode所能获取到的全部dmi信息：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># dmidecode</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是显示所有的信息不便于我们获取想要获取的信息，那么就需要结合其它选项获取信息</p>

<p><strong>常用参数:</strong></p>

<ul>
<li>-q 或 &#8211;quiet

<ul>
<li>不显示太多信息，比如某条数据是从哪里读来的等等，为了得到简洁的信息，此条很有用</li>
</ul>
</li>
<li>-t 或 &#8211;type TYPE

<ul>
<li>指定要显示类型的信息</li>
</ul>
</li>
<li>-s 或 &#8211;string KEYWORD

<ul>
<li>显示特定的关键字</li>
</ul>
</li>
</ul>


<p><strong>-t或&#8211;type后的文本参数</strong></p>

<pre><code>bios        bios的各项信息
system      系统信息，在我的笔记本上可以看到版本、型号、序号等信息。
baseboard   主板信息
chassis     底板信息
processor   CPU的详细信息
memory      内存信息，包括目前插的内存条数及大小，支持的单条最大内存和总内存大小等
cache       缓存信息
connector   PCI设备信息
slot        插槽信息 
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># dmidecode -t </span>
</span><span class='line'>dmidecode: option requires an argument -- <span class="s1">&#39;t&#39;</span>
</span><span class='line'>Type number or keyword expected
</span><span class='line'>Valid <span class="nb">type </span>keywords are:
</span><span class='line'>  bios
</span><span class='line'>  system
</span><span class='line'>  baseboard
</span><span class='line'>  chassis
</span><span class='line'>  processor
</span><span class='line'>  memory
</span><span class='line'>  cache
</span><span class='line'>  connector
</span><span class='line'>  slot
</span></code></pre></td></tr></table></div></figure>


<p><strong>dmidecode -s</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># dmidecode -s</span>
</span><span class='line'>dmidecode: option requires an argument -- <span class="s1">&#39;s&#39;</span>
</span><span class='line'>String keyword expected
</span><span class='line'>Valid string keywords are:
</span><span class='line'>  bios-vendor
</span><span class='line'>  bios-version
</span><span class='line'>  bios-release-date
</span><span class='line'>  system-manufacturer
</span><span class='line'>  system-product-name
</span><span class='line'>  system-version
</span><span class='line'>  system-serial-number
</span><span class='line'>  system-uuid
</span><span class='line'>  baseboard-manufacturer
</span><span class='line'>  baseboard-product-name
</span><span class='line'>  baseboard-version
</span><span class='line'>  baseboard-serial-number
</span><span class='line'>  baseboard-asset-tag
</span><span class='line'>  chassis-manufacturer
</span><span class='line'>  chassis-type
</span><span class='line'>  chassis-version
</span><span class='line'>  chassis-serial-number
</span><span class='line'>  chassis-asset-tag
</span><span class='line'>  processor-family
</span><span class='line'>  processor-manufacturer
</span><span class='line'>  processor-version
</span><span class='line'>  processor-frequency
</span></code></pre></td></tr></table></div></figure>


<p><strong>常用命令举例</strong></p>

<ul>
<li>1、查看服务器型号：dmidecode | grep &#8216;Product Name&#8217;</li>
<li>2、查看系统序列号：dmidecode -s system-serial-number</li>
<li>3、查看内存信息：dmidecode -t memory</li>
<li>4、查看OEM信息：dmidecode -t 11</li>
</ul>


<p>&#8211;EOF&#8211;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1-2、Sed Scripting Flow[译]]]></title>
    <link href="http://kumu-Linux.github.com/blog/2013/04/26/sed-2/"/>
    <updated>2013-04-26T16:28:00+08:00</updated>
    <id>http://kumu-Linux.github.com/blog/2013/04/26/sed-2</id>
    <content type="html"><![CDATA[<p>Sed脚本遵循易容易记住的顺序阅读、执行、输出、重复。可以使用<code>REPE</code>首字母缩写来记住sed的执行流程。</p>

<!--more-->


<p>我们来看这个序列的步骤。Sed将会：</p>

<ul>
<li><strong>Read</strong> 读取一行到模式空间(一个内部sed的缓冲池，被用来存放从输入文件的读取行)</li>
<li><strong>Execute</strong> sed命令在sed的模式空间中执行。如果有一个以上的sed命令，无论通过sed脚本、-e选项或者是{}，它会在模式空间中按照行的顺序执行所有的命令</li>
<li><strong>Print</strong> 从模式空间中输出行。当输出该行以后，模式空间就会变成空的状态</li>
<li><strong>Repeat</strong> 一直重复直到到达输入文件的行尾结束</li>
</ul>


<p>下图为以上四步的一个示意图：</p>

<center><img src="http://kumu-Linux.github.com/images/sed-2.png" alt="sed-flow" title="sed-flow" width="600" /></center>


<p>&#8211;EOF&#8211;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github Drinkup]]></title>
    <link href="http://kumu-Linux.github.com/blog/2013/04/25/github-drinkup/"/>
    <updated>2013-04-25T19:52:00+08:00</updated>
    <id>http://kumu-Linux.github.com/blog/2013/04/25/github-drinkup</id>
    <content type="html"><![CDATA[<p>昨天晚上在北京贝塔咖啡参加了InfoQ主办的GitHub首届中国Drinkup活动，作为一个伪码农能够参加这样的晚会感觉还是非常荣幸的。首先自己之前也从未参加类似的活动，其次这样的活动会有技术圈内很多技术达人，再次是这样的活动可以说是一个学习交流的好机会。</p>

<!--more-->


<p>其实自己从一开始也只是抱着侥幸的心理去报名的，因为报名的时候需要提供自己的Github账号，而自己的账号就只有一个新建Octopress搭建的博客，心想估计也没有什么戏了。可是有些事往往是意想不到的，4月23号查收邮件收到了InfoQ Drinkup的确认函。后来到会后听到现场主持人的解说之后才明白我选中的原因，报名的人一共有200多个，而InfoQ是根据Github贡献值排名取前80位的，而博客这个时候就沾了不少光了，所以说一切都很偶然。</p>

<p>话说偶然的事情很多，之前一直和<code>lazycai</code>在Gtalk上聊天，也没有见过面，没想到昨晚还能在Drinkup活动见上一面。其实参会者那么多，可能面对面也不一定能认出，但是她居然还偶然的存了我的号码，而我来北京也没有换号，呃，好吧，我承认真的很偶然。lazycai是一个好妹子，当然好妹子也肯定有一个好男朋友，听说她的这个男朋友还是Linux内核开发的大咖。</p>

<p>作为参会为数不多的运维者来说，很高兴的是Github的两位嘉宾都和运维相关，虽然他们在会场的讲话我很认真很认真地听，可是依然没有听明白几句。说到英文，我突然想到了和冯的简单对话。能够在贝塔见到冯也是我始料未及的，关键还那么近。当主持人说现场有多少人关注微信<code>小道消息</code>的，很多人举起了手，然后主持人说今天<code>小道消息</code>的作者也到现场了，现场立刻鼓起了掌声。我突然觉得技术就是一个江湖，而冯因为这么多年的积累，在业界也算得上一位大侠了，值得尊敬。在会上很想问冯一些问题，可是只能在旁边听他们交流也插不上什么，后来说到英文的时候，我插了一句说“老外讲话挺快的”，冯说“还好吧”。仅此而已，这好比我说“今天天气不错”这样没有营养的话。我想下次见到之后应该说“其实老外讲话也挺慢的”，然后冯说“还好吧”，英文其实算是技术的一个必修课。</p>

<p>2个多小时的晚会中间很多小插曲，喝了两杯啤酒，吃了一份三文治。会中感触颇深的是遇到了5个年纪和我相仿的创业团队，听其中的一个队员说他们一起成立了一家小公司，开发自己的游戏，然后现在拿到风投了，创业初期，现在什么事情都要做。我很佩服他们的勇气，虽然时间有限，聊的不多。我想每一个创业者都值得尊敬，因为只有他们自己才知道自己的艰辛。</p>

<p>另外，想说的是，国内这种类型的活动的气氛活跃度还是差一点的。印象比较深刻的是，同一公司或者是认识的一伙聚在一起，而不去接触一些新面孔的朋友，这样就导致过于分散。还有一个就是很多人都围着两位Github的嘉宾了，估计他们被围的也很累。不过总而言之，个人觉得这种活动是一个很好的尝试，努力让自己的技术和思维的层次更高，Fighting！</p>

<p>附上Github的小礼物照片</p>

<center><img src="http://kumu-Linux.github.com/images/github.png" alt="github" title="github" width="600" /></center>


<p>&#8211;EOF&#8211;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1-1、sed Command Syntax[译]]]></title>
    <link href="http://kumu-Linux.github.com/blog/2013/04/24/sed-1/"/>
    <updated>2013-04-24T23:33:00+08:00</updated>
    <id>http://kumu-Linux.github.com/blog/2013/04/24/sed-1</id>
    <content type="html"><![CDATA[<p>本章节的目的是为了让你更熟悉sed语法和命令结构。这并不表示介绍单个的sed命令使用方法，后面的章节将会作详细的介绍。
基本的语法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sed <span class="o">[</span>options<span class="o">]</span> <span class="o">{</span>sed-commands<span class="o">}</span> <span class="o">{</span>input-file<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>Sed在同一个时间点从输入处理文件{input-file}中读取一行内容并在特定的行上执行sed的命令选项。也就是说sed从输入处理文件中读取第一行并且在第一行执行sed命令选项。然后读取第二行并且在第二行执行sed命令选项。sed重复这个过程直到文件读取结束。</p>

<p>对于sed，这里当然也有一些可选的命令行选项通过[options]表示。</p>

<p>接下来的例子演示了sed的基本用法，这个简单的sed例子将打印/etc/passwd中所有的行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sed -n <span class="s1">&#39;p&#39;</span> /etc/passwd
</span></code></pre></td></tr></table></div></figure>


<p>这里主要的一个点在{sed-commands}，它可以是一个单个的sed命令或者多个sed命令。你也可以结合多个sed-commands写入到一个文件当中，并让sed使用-f选项调用，如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sed <span class="o">[</span>options<span class="o">]</span> -f <span class="o">{</span>sed-commands-in-a-file<span class="o">}</span> <span class="o">{</span>input-file<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来的例子演示了基本的sed语法。这个例子从/etc/passwd文件中打印以root和nobody开头的行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># cat test-script.sed </span>
</span><span class='line'>/^root/ p
</span><span class='line'>/^nobody/ p
</span><span class='line'><span class="c"># sed -n -f test-script.sed /etc/passwd</span>
</span><span class='line'>root:x:0:0:root:/root:/bin/bash
</span><span class='line'>nobody:x:99:99:Nobody:/:/sbin/nologin
</span></code></pre></td></tr></table></div></figure>


<p>当执行多个sed命令的时候，你也可以通过-e选项直接在命令行上使用它们。
基本的sed -e用法: sed [options] -e {sed-command-1} -e {sed-command-2} {input-file}
接下来的行就演示了-e的基本使用方法。它打印/etc/passwd文件中所有以root和nobody开头的行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># sed -n -e &#39;/^root/p&#39; -e &#39;/^nobody/p&#39; /etc/passwd </span>
</span><span class='line'>root:x:0:0:root:/root:/bin/bash
</span><span class='line'>nobody:x:99:99:Nobody:/:/sbin/nologin
</span></code></pre></td></tr></table></div></figure>


<p>如果你要在单个的命令行上通过-e选项执行多个命令，你可以使用\换行让命令分行显示，这样将会更利于阅读，如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># sed -n \</span>
</span><span class='line'>&gt; -e <span class="s1">&#39;/^root/ p&#39;</span> <span class="se">\</span>
</span><span class='line'>&gt; -e <span class="s1">&#39;/^nobody/ p&#39;</span> <span class="se">\</span>
</span><span class='line'>&gt; /etc/passwd
</span><span class='line'>root:x:0:0:root:/root:/bin/bash
</span><span class='line'>nobody:x:99:99:Nobody:/:/sbin/nologin
</span></code></pre></td></tr></table></div></figure>


<p>当然你也可以使用{}选项实现如上相同的功能：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sed <span class="o">[</span>options<span class="o">]</span> <span class="s1">&#39;{</span>
</span><span class='line'><span class="s1">sed-command-1</span>
</span><span class='line'><span class="s1">sed-command-2</span>
</span><span class='line'><span class="s1">}&#39;</span> input-file
</span></code></pre></td></tr></table></div></figure>


<p>接下来的例子演示了{}的基本使用方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># sed -n &#39;{</span>
</span><span class='line'>&gt; /^root/ p
</span><span class='line'>&gt; /^nobody/ p
</span><span class='line'>&gt; <span class="o">}</span><span class="err">&#39;</span> /etc/passwd
</span><span class='line'>root:x:0:0:root:/root:/bin/bash
</span><span class='line'>nobody:x:99:99:Nobody:/:/sbin/nologin
</span></code></pre></td></tr></table></div></figure>


<p><strong>注</strong>：Sed的以上选项都不会更改源文件，它打印输出到标准输出。如果你想保存文件，可以使用-i选项或者使用重定向输出，这个之后的章节将会介绍。</p>

<p>&#8211;EOF&#8211;</p>

<p><strong>扯一句</strong>:本系列文章主要翻译自sed and awk 101 hacks一书，争取每日一篇，确保每两日一篇</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LogAnalyzer网页日志分析之安装篇]]></title>
    <link href="http://kumu-Linux.github.com/blog/2013/04/23/loganalyzer/"/>
    <updated>2013-04-23T14:50:00+08:00</updated>
    <id>http://kumu-Linux.github.com/blog/2013/04/23/loganalyzer</id>
    <content type="html"><![CDATA[<h2>LogAnalyzer简介</h2>

<p>LogAnalyzer 是一个syslog和其他网络事件数据的Web前端工具，提供简单易用的日志浏览、搜索和基本分析以及图表显示，PHP语言开发。<a href="http://loganalyzer.adiscon.com/">官方地址</a></p>

<!--more-->


<h2>LogAnalyzer在RHEL6上的安装</h2>

<p>RHEL系列从RHEL6开始日志服务器，缺省的由原来RHEL5的syslog改为rsyslog。关于rsyslog和syslog的优缺点可以查看<a href="http://www.rsyslog.com/doc/rsyslog_ng_comparison.html">链接</a>，ryslog有很多优势，因此本文以rsyslog为例。rsyslog支持TCP/UDP协议，并且可以将日志直接写入到数据库中，如Mongodb、MySQL，本文将以MySQL为例。</p>

<p>ryslog优势：</p>

<ul>
<li>支持Multi-threading功能，处理效率比传统的syslog服务器更高</li>
<li>提供SSL加密功能，提高syslog传输安全性</li>
<li>提供数据库输出功能&lt;MySQL、Mongodb &#8230; &#8230;></li>
<li>提供过滤功能，可自定义相关的过滤条件</li>
</ul>


<h3>中心日志服务器配置</h3>

<h4>Log Server端配置</h4>

<p>安装<code>rsyslog</code>、<code>rsyslog-mysql</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>yum install rsyslog rsyslog-mysql -y
</span></code></pre></td></tr></table></div></figure>


<p>安装<code>MySQL</code>和<code>Apache</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>yum install mysql-server
</span><span class='line'>yum install httpd php php-mysyql php-gd
</span></code></pre></td></tr></table></div></figure>


<p>导入rsyslog写入数据需要的MySQL库文件，默认安装好之后会在目录/usr/share/doc/rsyslog-mysql-x.x.x/createDB.sql有该文件，rsyslog-mysql的版本不同，具体的位置也相应的不同</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="n">mysql</span> <span class="o">-</span><span class="n">u</span> <span class="n">root</span> <span class="o">-</span><span class="n">p</span> <span class="o">&lt;</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">share</span><span class="o">/</span><span class="n">doc</span><span class="o">/</span><span class="n">rsyslog</span><span class="o">-</span><span class="n">mysql</span><span class="o">-</span><span class="mi">5</span><span class="p">.</span><span class="mi">8</span><span class="p">.</span><span class="mi">10</span><span class="o">/</span><span class="n">createDB</span><span class="p">.</span><span class="k">sql</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果导入正常的话，MySQL会生成Syslog库</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">use</span> <span class="n">Syslog</span>
</span><span class='line'><span class="n">Reading</span> <span class="k">table</span> <span class="n">information</span> <span class="k">for</span> <span class="n">completion</span> <span class="n">of</span> <span class="k">table</span> <span class="k">and</span> <span class="k">column</span> <span class="n">names</span>
</span><span class='line'><span class="n">You</span> <span class="n">can</span> <span class="n">turn</span> <span class="n">off</span> <span class="n">this</span> <span class="n">feature</span> <span class="k">to</span> <span class="n">get</span> <span class="n">a</span> <span class="n">quicker</span> <span class="n">startup</span> <span class="k">with</span> <span class="o">-</span><span class="n">A</span>
</span><span class='line'>
</span><span class='line'><span class="k">Database</span> <span class="n">changed</span>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">show</span> <span class="kp">tables</span><span class="p">;</span>
</span><span class='line'><span class="o">+------------------------+</span>
</span><span class='line'><span class="o">|</span> <span class="n">Tables_in_Syslog</span>       <span class="o">|</span>
</span><span class='line'><span class="o">+------------------------+</span>
</span><span class='line'><span class="o">|</span> <span class="n">SystemEvents</span>           <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">SystemEventsProperties</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">charts</span>                 <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">config</span>                 <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">dbmappings</span>             <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">fields</span>                 <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">groupmembers</span>           <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">groups</span>                 <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">savedreports</span>           <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">searches</span>               <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">sources</span>                <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">users</span>                  <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">views</span>                  <span class="o">|</span>
</span><span class='line'><span class="o">+------------------------+</span>
</span><span class='line'><span class="mi">13</span> <span class="n">rows</span> <span class="k">in</span> <span class="kt">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>赋权，这里新增用户给insert权限即可，可参考<a href="http://www.rsyslog.com/doc/rsyslog_mysql.html">rsyslog_mysql</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">grant</span> <span class="k">insert</span> <span class="k">on</span> <span class="n">Syslog</span><span class="p">.</span><span class="o">*</span> <span class="k">to</span> <span class="s1">&#39;sysloguser&#39;</span><span class="o">@</span><span class="s1">&#39;localhost&#39;</span> <span class="n">identified</span> <span class="k">by</span> <span class="s1">&#39;123321&#39;</span><span class="p">;</span>
</span><span class='line'><span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">0</span> <span class="n">rows</span> <span class="nf">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">34</span> <span class="n">sec</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="n">flush</span> <span class="n">privileges</span><span class="p">;</span>
</span><span class='line'><span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">0</span> <span class="n">rows</span> <span class="nf">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">08</span> <span class="n">sec</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>修改rsyslog配置文件<code>/etc/rsyslog.conf</code>,添加mysql支持</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ModLoad</span> ommysql.so
</span><span class='line'>*.*       :ommysql:localhost,Syslog,sysloguser,123321
</span><span class='line'><span class="c">#*.*       :ommysql:database-server,database-name,database-userid,database-password</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>修改rsyslog配置文件<code>/etc/rsyslog.conf</code>,配置udp和tcp接受监听</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ModLoad</span> imudp
</span><span class='line'><span class="nv">$UDPServerRun</span> 514
</span><span class='line'><span class="nv">$ModLoad</span> imtcp
</span><span class='line'><span class="nv">$InputTCPServerRun</span> 514
</span><span class='line'><span class="nv">$AllowedSender</span> UDP, 127.0.0.1, 10.2.0.0/16  <span class="c">#10.2.0.0为接受某个网段发来的IP</span>
</span><span class='line'><span class="nv">$AllowedSender</span> TCP, 127.0.0.1, 10.2.0.0/16
</span></code></pre></td></tr></table></div></figure>


<p>完成以上步骤之后重新启动rsyslog即可</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/etc/init.d/rsyslog restart
</span></code></pre></td></tr></table></div></figure>


<p>这时登陆MySQL执行<code>mysql&gt; select * from Syslog.SystemEvents;</code>就可以看到rsyslog日志内容了</p>

<h4>Log Client端配置</h4>

<p>安装<code>rsyslog</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>yum install rsyslog -y
</span></code></pre></td></tr></table></div></figure>


<p>修改rsyslog配置文件<code>/etc/rsyslog.conf</code>,添加如下内容</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>*.* @@Server_ip <span class="c">#Server_ip为Log Server端的ip</span>
</span></code></pre></td></tr></table></div></figure>


<p>完成以上步骤之后重新启动rsyslog即可</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/etc/init.d/rsyslog restart
</span></code></pre></td></tr></table></div></figure>


<h3>安装LogAnalyzer</h3>

<p>下载解压</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget http://download.adiscon.com/loganalyzer/loganalyzer-3.6.3.tar.gz
</span><span class='line'>tar xf loganalyzer-3.6.3.tar.gz
</span><span class='line'><span class="nb">cd </span>loganalyzer-3.6.3
</span><span class='line'>mkdir /var/www/html/rsyslog
</span><span class='line'>cp -r contrib/* src/* /var/www/html/rsyslog <span class="c">#拷贝到web家目录下</span>
</span><span class='line'>chown apache:apache -R /var/www/html/rsyslog
</span><span class='line'>bash /var/www/html/rsyslog/configure.sh
</span></code></pre></td></tr></table></div></figure>


<p>浏览器打开http://web_url/rsyslog</p>

<p>Next1，点击here执行安装</p>

<center><img src="http://kumu-Linux.github.com/images/loganlyzer1.png" alt="loganlyzer" title="loganlyzer" width="500" /></center>


<p>Next2</p>

<center><img src="http://kumu-Linux.github.com/images/loganlyzer2.png" alt="loganlyzer" title="loganlyzer" width="500" /></center>


<p>Next3</p>

<p>在Server端创建一个用户管理库和一个用户,然后输入到web中，开启使用数据库管理用户选项</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">create</span> <span class="k">database</span> <span class="n">loganalyzer</span><span class="p">;</span>
</span><span class='line'><span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">1</span> <span class="n">row</span> <span class="nf">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">02</span> <span class="n">sec</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">grant</span> <span class="k">all</span> <span class="k">on</span> <span class="n">loganalyzer</span><span class="p">.</span><span class="o">*</span> <span class="k">to</span> <span class="s1">&#39;loganalyzer&#39;</span><span class="o">@</span><span class="s1">&#39;localhost&#39;</span> <span class="n">identified</span> <span class="k">by</span> <span class="s1">&#39;123321&#39;</span><span class="p">;</span>
</span><span class='line'><span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">0</span> <span class="n">rows</span> <span class="nf">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="n">flush</span> <span class="n">privileges</span><span class="p">;</span>
</span><span class='line'><span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">0</span> <span class="n">rows</span> <span class="nf">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<center><img src="http://kumu-Linux.github.com/images/loganlyzer4.png" alt="loganlyzer" title="loganlyzer" width="500" /></center>


<p>Next4</p>

<center><img src="http://kumu-Linux.github.com/images/loganlyzer5.png" alt="loganlyzer" title="loganlyzer" width="500" /></center>


<p>Next5</p>

<center><img src="http://kumu-Linux.github.com/images/loganlyzer6.png" alt="loganlyzer" title="loganlyzer" width="500" /></center>


<p>Next6</p>

<p>添加登陆用户</p>

<center><img src="http://kumu-Linux.github.com/images/loganlyzer7.png" alt="loganlyzer" title="loganlyzer" width="500" /></center>


<p>Next7</p>

<p>选择数据库类型，并且添加相关数据库用户，修改用户权限如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">grant</span> <span class="k">all</span> <span class="k">on</span> <span class="n">Syslog</span><span class="p">.</span><span class="o">*</span> <span class="k">to</span> <span class="s1">&#39;sysloguser&#39;</span><span class="o">@</span><span class="s1">&#39;localhost&#39;</span> <span class="n">identified</span> <span class="k">by</span> <span class="s1">&#39;123321&#39;</span><span class="p">;</span>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="n">flush</span> <span class="n">privileges</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果只是日志写入到数据库中，那么只需要insert权限即可。如果使用loganlyzer，那么安装过程需要额外的权限，可以新增用户，也可先给sysloguser所有的权限，安装完成之后，再次恢复权限如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">grant</span> <span class="k">insert</span><span class="p">,</span><span class="k">select</span> <span class="k">on</span> <span class="n">Syslog</span><span class="p">.</span><span class="o">*</span> <span class="k">to</span> <span class="s1">&#39;sysloguser&#39;</span><span class="o">@</span><span class="s1">&#39;localhost&#39;</span> <span class="n">identified</span> <span class="k">by</span> <span class="s1">&#39;123321&#39;</span><span class="p">;</span> <span class="c1">#loganlyzer安装完成后需要使用select权限查询输出到页面，因此这里赋予select权限</span>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="n">flush</span> <span class="n">privileges</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<center><img src="http://kumu-Linux.github.com/images/loganlyzer8.png" alt="loganlyzer" title="loganlyzer" width="500" /></center>


<p>Next8安装成功</p>

<center><img src="http://kumu-Linux.github.com/images/loganlyzer9.png" alt="loganlyzer" title="loganlyzer" width="500" /></center>


<p>登陆，输入之前的用户名和密码即可：</p>

<center><img src="http://kumu-Linux.github.com/images/loganlyzer10.png" alt="loganlyzer" title="loganlyzer" width="500" /></center>


<p>登陆之后页面如下：</p>

<center><img src="http://kumu-Linux.github.com/images/loganlyzer11.png" alt="loganlyzer" title="loganlyzer" width="500" /></center>


<p>&#8211;EOF&#8211;</p>

<p>未完待续</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013-04-22 我所理解的生活]]></title>
    <link href="http://kumu-Linux.github.com/blog/2013/04/22/life/"/>
    <updated>2013-04-22T22:27:00+08:00</updated>
    <id>http://kumu-Linux.github.com/blog/2013/04/22/life</id>
    <content type="html"><![CDATA[<blockquote><p>人，其实不需要太多东西，只要健康活着，真诚爱着，也不失为一种富有。</p></blockquote>

<p>最近几天新闻、微博都是关于雅安地震的消息，看到新闻中的报道，触动着身体的每一处神经。突然想想，其实相对灾区的人们来说，我们已经很幸福了。可是人总是不知足的，得到想得到的，又向着更好的看去。然后等到失去后才懂得珍惜，可是有些逝去的也就永远逝去了，我们总是在这种圈子中不停的恶性循环，不断的犯错。</p>

<!--more-->


<p>人总是太容易迷失自己了，在北京的这些日子里，总是感觉找不到自我。每天3个小时的来来回回，时常感到心力交瘁。我想有时候对自己期望太高了，做一件事总是想一下子做好，做技术总想一下子达到某种高度。有时，抱怨生活的各种不公，总是不能安安静静的放下自己好好思量。现在回想起来，又是觉得那么可笑。其实我想只需要看准方向，每天坚持一点点，不断的积累，这比无病呻吟来说要好的多。</p>

<p>好好的做自己，好好的活着。为雅安人民祈福，我们遭受了很多，但我们还是要坚强的活下去，雅安加油！</p>

<p>&#8211;EOF&#8211;</p>
]]></content>
  </entry>
  
</feed>
