<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Shell/Python | Linux SA Notes By 枯木]]></title>
  <link href="http://kumu-Linux.github.io/blog/categories/shell-slash-python/atom.xml" rel="self"/>
  <link href="http://kumu-Linux.github.io/"/>
  <updated>2014-02-21T09:29:55+08:00</updated>
  <id>http://kumu-Linux.github.io/</id>
  <author>
    <name><![CDATA[枯木]]></name>
    <email><![CDATA[1988.wulei@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[paramiko解析AES加密算法]]></title>
    <link href="http://kumu-Linux.github.io/blog/2013/11/05/paramiko/"/>
    <updated>2013-11-05T21:01:00+08:00</updated>
    <id>http://kumu-Linux.github.io/blog/2013/11/05/paramiko</id>
    <content type="html"><![CDATA[<blockquote><p>对等加密（Reciprocal cipher）又称为对称密钥加密（Symmetric-key algorithm）、对称加密、私钥加密、共享密钥加密，是密码学中的一类加密算法。该类密码的加密算法是它自己本身的逆反函数，所以其解密算法等同于加密算法，也就是说，要还原对等加密的密文，套用加密同样的算法即可得到明文。换句话说，若参数（或密钥）合适的话，两次连续的对等加密运算后会回复原始文字。在数学上，这有时称之为对合。在实际应用中，体现为加密和解密使用同一个密钥，或者知道一方密钥能够轻易计算出另一方密钥。常见的对称加密算法有DES、3DES、AES、Blowfish、IDEA、RC4、RC5、RC6。</p></blockquote>

<!--more-->


<p>在说明问题之前，引用维基百科对对称加密的一个说明。今天使用paramiko解析DSA密钥时出现如下ERROR：</p>

<p><code>bash
... ...
paramiko.SSHException: Unknown private key cipher "AES-128-CBC"
</code></p>

<p>DSA密钥内容如下：
``` bash
-----BEGIN DSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: AES-128-CBC,381624AF862F1717C46EF898D9E1FA92</p>

<p>... ...
OCGYNLsO68FToi8qJEP1DI9Jvk6tpU3y4ebBqSZnX7jr1M5+Hj5rfMqv7+kp3T4R
314ae9Ism9AXLIK2miTAcvbexZpbcesadqvo69DMsfhSmKKJYABK3eRYaDlUwkzN
... ...
-----END DSA PRIVATE KEY-----
```</p>

<p>使用<code>ssh-keygen -t rsa</code>测试没有问题，后来得知之前的DSA密钥时使用Secure CRT生成的，查了相关AES算法加密，发现paramiko默认并不支持AES算法，所以出现之前的<code>Unknown Error</code>错误。后来借助Google找到了相关的答案，<a href="http://comments.gmane.org/gmane.comp.python.paramiko/479">Unknown private key cipher AES-128-CBC</a> ，顺便记录下。</p>

<p>解决方法需要修改<code>paramiko</code>代码，打开<code>/usr/lib/pythonX.X/site-packages/paramiko/pkey.py</code>修改如下：
``` python
...
from Crypto.Cipher import DES3, AES</p>

<p>...</p>

<pre><code>_CIPHER_TABLE = {
    'AES-128-CBC': { 'cipher': AES, 'keysize': 16, 'blocksize': 16, 'mode': AES.MODE_CBC },
    'DES-EDE3-CBC': { 'cipher': DES3, 'keysize': 24, 'blocksize': 8, 'mode': DES3.MODE_CBC }
}
</code></pre>

<p>...
```</p>

<p>以上修改，保存之后退出即可。</p>

<p>顺便附带我的paramiko测试代码</p>

<p>``` python</p>

<h1>!/usr/bin/env python</h1>

<h1>-<em>- coding: utf-8 -</em>-</h1>

<p>import paramiko</p>

<p>def paramiko_ssh(hostip, cmd):</p>

<pre><code>ssh = paramiko.SSHClient()
pkey_file = '/root/.ssh/dsa'
pkey_pass = '123321'
ssh_port = 22
ssh_user = 'root'
key = paramiko.DSSKey.from_private_key_file(pkey_file, password=pkey_pass) 
# 如果是RSA KEY，上一行修改DSS为RSA
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
ssh.connect(hostip, ssh_port, ssh_user, pkey=key)
stdin, stdout, stderr = ssh.exec_command(cmd)
print stderr.read()
ssh.close()
</code></pre>

<p>if <strong>name</strong> == "<strong>main</strong>":</p>

<pre><code>ssh_cmd='touch /tmp/test'
paramiko_ssh('127.0.0.1', ssh_cmd)
</code></pre>

<p>```</p>

<p>--EOF--</p>
]]></content>
  </entry>
  
</feed>
