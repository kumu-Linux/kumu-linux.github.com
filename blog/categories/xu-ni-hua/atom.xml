<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 虚拟化 | Linux SA Notes By 枯木]]></title>
  <link href="http://kumu-Linux.github.com/blog/categories/xu-ni-hua/atom.xml" rel="self"/>
  <link href="http://kumu-Linux.github.com/"/>
  <updated>2013-09-09T12:56:19+08:00</updated>
  <id>http://kumu-Linux.github.com/</id>
  <author>
    <name><![CDATA[枯木]]></name>
    <email><![CDATA[1988.wulei@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CentOS6.4 X86_64 kvm+PXE备忘]]></title>
    <link href="http://kumu-Linux.github.com/blog/2013/08/22/kvm/"/>
    <updated>2013-08-22T13:10:00+08:00</updated>
    <id>http://kumu-Linux.github.com/blog/2013/08/22/kvm</id>
    <content type="html"><![CDATA[<h3>Install 安装</h3>

<p>``` bash</p>

<h1>yum install qemu-kvm qemu-img</h1>

<h1>使用kvm至少要安装的包，一个提供用户级别kvm模拟器，一个提供磁盘镜像的管理</h1>

<h1>安装虚拟化管理的相关工具</h1>

<h1>yum install virt-manager libvirt \</h1>

<p>libvirt-python python-virtinst libvirt-client
```</p>

<p>也可以yum groupinstall虚拟化组件，具体可参考<a href="https://access.redhat.com/site/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Virtualization_Host_Configuration_and_Guest_Installation_Guide/sect-Virtualization_Host_Configuration_and_Guest_Installation_Guide-Host_Installation-Installing_KVM_packages_on_an_existing_Red_Hat_Enterprise_Linux_system.html">Redhat官方文档</a></p>

<!--more-->


<ul>
<li>KVM 管理工具

<ul>
<li>kvm 内核模块 &lt;- qemu 管理工具 (可用性低)</li>
<li>qemu 是开源虚拟化软件, 虚拟不同 CPU 架构, 可以 x86 虚拟 power cpu</li>
<li>libvirt, virsh, virt-manager (redhat 的辅助工具)</li>
<li>libvirt api 提供管理接口工具</li>
<li>virt-manager 调用 libvirt 工具</li>
</ul>
</li>
</ul>


<p></p>


<ul>
<li>ibvirt接口

<ul>
<li>virsh 命令行工具</li>
<li>virt-manager 图形工具</li>
<li>RHEV-M (redhat专用收费软件)</li>
</ul>
</li>
</ul>


<p></p>


<ul>
<li>支持三种虚拟设备

<ul>
<li>Emulated software devices 仿真设备 ->  南北桥, USB, PS/2 ISA PCI</li>
<li>Para-virtualized devices  -> 时钟, 网络, 串口</li>
<li>Physically shared devices --> 光纤设备</li>
</ul>
</li>
</ul>


<p>安装完之后就可以启动kvm了</p>

<p>``` bash</p>

<h1>/etc/init.d/libvirtd start</h1>

<p>```</p>

<h4>桥接网络</h4>

<p>``` bash</p>

<h1>yum install bridge-utils -y</h1>

<p>```</p>

<p>桥接实例:
``` bash</p>

<h1>cat /etc/sysconfig/network-scripts/ifcfg-eth0</h1>

<p>DEVICE=eth0
TYPE=Ethernet
ONBOOT=yes
NAME="System eth0"
BRIDGE="br0"</p>

<h1>cat /etc/sysconfig/network-scripts/ifcfg-br0</h1>

<p>DEVICE="br0"
TYPE="Bridge"  # 注意大小写
BOOTPROTO="static"
IPADDR=192.168.80.131
NETMASK=255.255.255.0
GATEWAY=192.168.80.2
ONBOOT="yes"
DELAY=0
```</p>

<p>具体可参考: <a href="http://www.cyberciti.biz/faq/rhel-linux-kvm-virtualization-bridged-networking-with-libvirt/">CentOS / Redhat: KVM Bridged Network Configuration</a></p>

<h3>构建无人值守，实现KVM PXE安装</h3>

<h4>安装相关软件</h4>

<p>``` bash</p>

<h1>yum install tftp-server syslinux dhcp vsftpd -y</h1>

<p>```</p>

<h5>dhcp</h5>

<p><strong>dhcp</strong> example:</p>

<p>``` bash dhcp</p>

<h1>cat /etc/dhcp/dhcpd.conf</h1>

<p>subnet 192.168.80.0 netmask 255.255.255.0 {</p>

<pre><code>range 192.168.80.10 192.168.80.100;
default-lease-time 600;
max-lease-time 7200;
next-server 192.168.80.131; # PXE Server地址
filename "pxelinux.0";      # 引导文件名
</code></pre>

<p>}</p>

<h1>/etc/init.d/dhcpd restart</h1>

<p>```</p>

<h4>tftp</h4>

<p><strong>tftp</strong> example:</p>

<p>``` bash tftp</p>

<h1>cat /etc/xinetd.d/tftp</h1>

<p>service tftp
{</p>

<pre><code>socket_type     = dgram
protocol        = udp
wait            = yes
user            = root
server          = /usr/sbin/in.tftpd
server_args     = -s /var/lib/tftpboot
disable         = no # 默认yes，改为no即可
per_source      = 11
cps             = 100 2
flags           = IPv4
</code></pre>

<p>}</p>

<h1>/etc/init.d/xinetd restart</h1>

<p>```</p>

<h4>vsftpd</h4>

<p>新建/var/ftp/centos目录，把CentOS光盘镜像挂载至/var/ftp/centos下</p>

<p>``` bash</p>

<h1>mkdir /var/ftp/centos</h1>

<h1>mount /dev/cdrom /var/ftp/centos # 挂载镜像使用-o loop</h1>

<h1>/etc/init.d/vsftpd restart</h1>

<p>```</p>

<h4>无人值守</h4>

<p>``` bash</p>

<h1>mkdir /var/lib/tftpboot/CentOS6</h1>

<h1>cp /var/ftp/centos/images/pxeboot/{initrd.img,vmlinuz} /var/lib/tftpboot/CentOS6</h1>

<h1>cp /var/ftp/centos/isolinux/{boot.msg,vesamenu.c32} /var/lib/tftpboot/</h1>

<h1>cp /usr/share/syslinux/pxelinux.0 /var/lib/tftpboot/</h1>

<h1>mkdir /var/ftp/tftpboot/pxelinux.cfg</h1>

<h1>cp /var/ftp/centos/isolinux/isolinux.cfg /var/lib/tftpboot/pxelinux.cfg/default</h1>

<p>```</p>

<p>``` bash tftpboot目录树结构</p>

<h1>tree /var/lib/tftpboot/</h1>

<p>/var/lib/tftpboot/
├── boot.msg
├── CentOS6
│   ├── initrd.img
│   └── vmlinuz
├── pxelinux.0
├── pxelinux.cfg
│   └── default
└── vesamenu.c32</p>

<p>2 directories, 6 files
```</p>

<p><strong>pxelinux.cfg/default</strong> example:</p>

<p>``` bash pxe default</p>

<h1>cat /var/lib/tftpboot/pxelinux.cfg/default</h1>

<h1>default CentOS6_PXE # 默认启动'default CentOS6_PXE'标记的内核</h1>

<p>default vesamenu.c32  # 菜单选项
timeout 100 # 单位是1/10s</p>

<h1>prompt 1  # 为 '0' 时则不提示'boot: '，将会直接启动 'default' 参数中指定的内容</h1>

<p>display boot.msg    # 启动时显示</p>

<h1>menu background splash.jpg    # 菜单背景等</h1>

<p>menu title Welcome to CentOS 6.4!
menu color border 0 #ffffffff #00000000
menu color sel 7 #ffffffff #ff000000
menu color title 0 #ffffffff #00000000
menu color tabmsg 0 #ffffffff #00000000
menu color unsel 0 #ffffffff #00000000
menu color hotsel 0 #ff000000 #ffffffff
menu color hotkey 7 #ffffffff #ff000000
menu color scrollbar 0 #ffffffff #00000000</p>

<p>label CentOS6_PXE
  menu label ^PXE Install CentOS KVM
  kernel /CentOS6/vmlinuz
  append ks=ftp://192.168.80.131/ks.cfg initrd=/CentOS6/initrd.img
label rescue
  menu label ^Rescue installed system
  kernel /CentOS6/vmlinuz
  append initrd=/CentOS6/initrd.img rescue
```</p>

<p>关于PXE的进一步细节可以参考<a href="http://www.syslinux.org/wiki/index.php/PXELINUX">pxelinux官方文档</a></p>

<p><strong>ks.cfg</strong> example:</p>

<p>``` bash ks.cfg</p>

<h1>cat /var/ftp/ks.cfg</h1>

<h1>System authorization information</h1>

<p>auth  --useshadow  --enablemd5</p>

<h1>System bootloader configuration</h1>

<p>bootloader --location=mbr</p>

<h1>Clear the Master Boot Record</h1>

<p>zerombr</p>

<h1>Partition clearing information</h1>

<p>clearpart --all --initlabel</p>

<h1>Use text mode install</h1>

<p>text</p>

<h1>Firewall configuration</h1>

<p>firewall --disabled
skipx</p>

<h1>Run the Setup Agent on first boot</h1>

<p>firstboot --disable</p>

<h1>System keyboard</h1>

<p>keyboard us</p>

<h1>System language</h1>

<p>lang en_US</p>

<h1>Installation logging level</h1>

<p>logging --level=info</p>

<h1>Use network installation</h1>

<p>url --url=ftp://192.168.80.131/centos</p>

<h1>Network information</h1>

<p>network --bootproto=dhcp --device=eth0 --onboot=on</p>

<h1>Reboot after installation</h1>

<p>reboot</p>

<h1>Root password</h1>

<p>rootpw --iscrypted $1$duSkJ1$1P5qGnqUGn3S1MTTFiPJY.</p>

<h1>SELinux configuration</h1>

<p>selinux --disabled</p>

<h1>System timezone</h1>

<p>timezone  Asia/Shanghai</p>

<h1>Install OS instead of upgrade</h1>

<p>install</p>

<h1>Disk partitioning information</h1>

<p>part /boot --asprimary --bytes-per-inode=4096 --fstype="ext3" --size=100
part / --bytes-per-inode=4096 --fstype="ext3" --size=5000
part swap --bytes-per-inode=4096 --fstype="swap" --size=512</p>

<p>%packages --nobase
@core
@Development tools
acpid   # 如果不安装acpid服务，virsh shutdown virtual_name 命令会失效
vim
wget
lsof
%end
```</p>

<p>如果最小化安装则软件包选择如下：</p>

<p><code>bash Minimal install
%packages --nobase
@core
</code></p>

<p>关于kickstart的更进一步了解可参考红帽官档<a href="https://access.redhat.com/site/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Installation_Guide/s1-kickstart2-options.html">Kickstart Options</a> <a href="https://access.redhat.com/site/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Virtualization_Host_Configuration_and_Guest_Installation_Guide/sect-Virtualization_Host_Configuration_and_Guest_Installation_Guide-Guest_Installation-Installing_guests_with_PXE.html">Installing guest virtual machines with PXE</a></p>

<h3>PXE 安装KVM虚拟机</h3>

<p>如果要开启--graphics vnc选项，则需要修改vnc监听端口，默认监听的是127.0.0.1，修改为0.0.0.0即可
``` bash</p>

<h1>grep '<sup>vnc_listen'</sup> /etc/libvirt/qemu.conf</h1>

<p>vnc_listen = "0.0.0.0"</p>

<h1>/etc/init.d/libvirtd restart</h1>

<p>```
man手册关于vnc端口介绍摘录：</p>

<pre><code>Address to listen on for VNC/Spice connections. Default is typically 127.0.0.1   
(localhost only), but some hypervisors allow changing this globally     
(for example, the qemu driver default can be changed   in /etc/libvirt/qemu.conf).   
Use 0.0.0.0 to allow access from other machines. This is use by ’vnc’ and ’spice.  
</code></pre>

<h4>安装实例：</h4>

<h5>通过location方式结合Kickstart安装</h5>

<ul>
<li>--extra-args指定ks相关选项，并且指定console类型使得virsh console可以连接操作，也可指定客户机IP、网关、DNS等，无需DHCP：</li>
</ul>


<p>``` bash</p>

<h1>virt-install --name centos --ram=1024 --vcpus=1 --os-type=linux --os-variant=rhel6 \</h1>

<p>--network bridge:br0 --disk path=/var/lib/libvirt/images/centos6-machine1.img,size=10 \
--location ftp://192.168.80.131/centos/ --extra-args "ks=ftp://192.168.80.131/ks.cfg \
ksdevice=eth0 ip=192.168.80.150  netmask=255.255.255.0 console=ttyS0"
```</p>

<h5>PXE方式安装</h5>

<p>``` bash</p>

<h1>virt-install --connect qemu:///system --network=bridge:br0 \</h1>

<p>--pxe --name rhel6-machine1 --ram=1024 --vcpus=1 \
--os-type=linux --os-variant=rhel6 --disk \
path=/var/lib/libvirt/images/rhel6-machine1.img,size=10
```</p>

<p><strong>注意</strong>: 如果需要指定console，--pxe是不支持--extra-args额外选项的，所以需要在pxe <code>default</code> 文件添加相关内容[SERIAL和console]，如下example</p>

<p>``` bash
SERIAL 0 115200
label CentOS6_PXE</p>

<pre><code>menu label ^PXE Install CentOS KVM
kernel /CentOS6/vmlinuz
append ks=ftp://192.168.80.131/ks.cfg initrd=/CentOS6/initrd.img console=tty0 console=ttyS0,115200
</code></pre>

<p>```</p>

<h5>本地安装：</h5>

<p>``` bash</p>

<h1>virt-install --name centos --ram=1024 --vcpus=1 --os-type=linux \</h1>

<p>--os-variant=rhel6 --location /mnt/ --network bridge:br0 \
--disk path=/var/lib/libvirt/images/rhel6.img,size=10 --extra-args "console=ttyS0"
```</p>

<p>关于KVM的Guest安装方式，virt-install man手册中也有很多实例，这里不一一介绍。</p>

<p>开启--graphics vnc选项可在Windows下下载vncviewer客户端，输入对应IP和端口即可[ 笔者个人还是习惯通过console连接安装，不开启vnc选项 ]，如下</p>

<p>``` bash 查看对应端口</p>

<h1>netstat -tulnp | grep kvm</h1>

<p>tcp        0      0 0.0.0.0:5900                0.0.0.0:<em>                   LISTEN      55762/qemu-kvm    <br/>
tcp        0      0 0.0.0.0:5901                0.0.0.0:</em>                   LISTEN      56656/qemu-kvm  <br/>
```</p>

<p>连接对应端口<br/>
<img src="http://kumu-Linux.github.com/images/vnc1.png" width="500"></p>

<p></p>


<p>连接之后,就可以正常安装了</p>

<p><img src="http://kumu-Linux.github.com/images/vnc2.png" width="500"></p>

<h3>virsh 操作命令</h3>

<p>这里只介绍一些常用的virsh使用方法，具体的命令可以参看virsh的man手册介绍或者参考红帽官方文档<a href="https://access.redhat.com/site/documentation/en-US/Red_Hat_Enterprise_Linux/5/html/Virtualization/chap-Virtualization-Managing_guests_with_virsh.html">Managing guests with virsh</a></p>

<p>默认只输入virsh命令会进入virsh的终端：如下，help可以获取命令帮助</p>

<p>``` bash</p>

<h1>virsh</h1>

<p>Welcome to virsh, the virtualization interactive terminal.</p>

<p>Type:  'help' for help with commands</p>

<pre><code>   'quit' to quit
</code></pre>

<p>virsh #
```</p>

<p>virsh简单操作</p>

<p>``` bash
virsh # list    # 显示运行或者暂停的Guest</p>

<h2> Id    Name                           State</h2>

<p> 28    centos6_1                      running</p>

<p>virsh # list --all  # 显示所有的Guest，包括状态为shut off的</p>

<h2> Id    Name                           State</h2>

<p> 28    centos6_1                      running
 -     centos                         shut off</p>

<p>virsh # console centos6_1   # console方式连接Guest
Connected to domain centos6_1
Escape character is ^]      # 使用Ctrl+]即可退出</p>

<p>CentOS release 6.4 (Final)
Kernel 2.6.32-358.el6.x86_64 on an x86_64</p>

<p>localhost.localdomain login:
virsh # start centos        # 开启某个Guest
Domain centos started</p>

<p>virsh # list</p>

<h2> Id    Name                           State</h2>

<p> 28    centos6_1                      running
 32    centos                         running
virsh # shutdown centos</p>

<h1>关闭某个Guest，这里一定要注意，如果Guest没有安装运行acpid服务，</h1>

<h1>则此方式失效，可以kill强制关闭，或者console/ssh连接执行关闭</h1>

<p>Domain centos is being shutdown
```</p>

<p>删除某个Guest，一般需要两步走，对于正在运行的Guest则需要先关闭再继续两步走[也可以直接virsh destroy virtual_name], 这里就演示三步：
<code>bash
virsh destroy guest_name
virsh undefine guest_name
rm -rf guest_img  # 删除虚拟存储
</code></p>

<p>挂起主机
``` bash
virsh # list</p>

<h2> Id    Name                           State</h2>

<p> 28    centos6_1                      running</p>

<p>virsh # suspend centos6_1   # 挂起主机
Domain centos6_1 suspended</p>

<p>virsh # list</p>

<h2> Id    Name                           State</h2>

<p> 28    centos6_1                      paused</p>

<p>virsh # resume centos6_1    # 把主机从挂起状态切换至运行状态
Domain centos6_1 resumed</p>

<p>virsh # list</p>

<h2> Id    Name                           State</h2>

<p> 28    centos6_1                      running</p>

<p>virsh #
```</p>

<h4>virt-clone 克隆Guest</h4>

<p>``` bash</p>

<h1>virt-clone --connect=qemu:///system --original=centos6_1 \</h1>

<p>--name=centos6_2 -f /var/lib/libvirt/images/centos6_2.img
ERROR    Domain with devices to clone must be paused or shutoff.</p>

<h1>virsh suspend centos6_1</h1>

<p>Domain centos6_1 suspended</p>

<h1>virsh list</h1>

<h2> Id    Name                           State</h2>

<p> 28    centos6_1                      paused</p>

<h1>virt-clone --connect=qemu:///system --original=centos6_1 \</h1>

<p>--name=centos6_2 -f /var/lib/libvirt/images/centos6_2.img
Allocating 'centos6_2.img'           1% [-              ] 9.0 MB/s | 112 MB     18:44 ETA
```</p>

<h3>参考和拓展资料</h3>

<ul>
<li><a href="http://www.joshbolling.com/blog/2013/01/automate-rhel-based-os-deployments-with-pxe-boot-and-kickstart/">Automate RHEL Based OS Deployments with PXE Boot and Kickstart</a></li>
<li><a href="http://www.linuxquestions.org/questions/linux-networking-3/centos-and-and-serial-console-login-894380/">Centos&amp; and serial console login</a></li>
<li><a href="http://zhumeng8337797.blog.163.com/blog/static/1007689142011715111317513/">kvm virsh console</a></li>
<li><a href="http://docs.fedoraproject.org/zh-CN/Fedora/12/html/Virtualization_Guide/chap-Virtualization_Guide-KVM_live_migration.html">KVM 实时迁移</a></li>
<li><a href="http://blog.csdn.net/signmem/article/details/7489135">rhel6 kvm备忘</a></li>
</ul>


<p>自己之前的两篇挫文： <a href="http://blog.csdn.net/kumu_linux/article/details/8263987">KVM在线迁移(动态迁移)</a> <a href="http://blog.csdn.net/kumu_linux/article/details/8263326">RHEL6 KVM安装备忘</a></p>

<p>--EOF--</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenNebula在CentOS6.4安装备忘]]></title>
    <link href="http://kumu-Linux.github.com/blog/2013/08/22/opennebula-install/"/>
    <updated>2013-08-22T11:10:00+08:00</updated>
    <id>http://kumu-Linux.github.com/blog/2013/08/22/opennebula-install</id>
    <content type="html"><![CDATA[<h3>简介</h3>

<p>OpenNebula是一款为云计算而打造的开源工具箱。它允许你和Xen、KVM或VMware ESX一起建立和管理私有云，同时还提供Deltacloud适配器与Amazon EC2相配合来管理混合云。目前版本4.2，可支持XEN、KVM和VMware，以及实时存取EC2和 ElasticHosts，OpenNebula可以构建私有云、混合云、公开云。</p>

<!--more-->


<h3>OpenNebula 4.2 相关</h3>

<ul>
<li>(OpenNebula 4.2 Guides)[http://opennebula.org/documentation:rel4.2]</li>
<li>ruby >= 1.8.7 #　CentOS6.4默认支持版本</li>
<li>OpenNebula<a href="http://downloads.opennebula.org/">下载地址</a>

<ul>
<li>CentOS选择对应版本即可<strong>CentOS-6-opennebula-4.2.0-1.tar.gz</strong></li>
</ul>
</li>
</ul>


<h3>更新配置源和update软件</h3>

<p>``` bash</p>

<h1>rpm -ivh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</h1>

<h1>rpm -ivh http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el6.rf.x86_64.rpm</h1>

<h1>yum update</h1>

<p>```</p>

<h3>安装OpenNubula4.2</h3>

<h4>解压下载的OpenNebula4.2软件包</h4>

<p>``` bash</p>

<h1>tar xf CentOS-6-opennebula-4.2.0-1.tar.gz</h1>

<h1>cd opennebula-4.2.0-1</h1>

<h1>yum localinstall opennebula-4.2.0-1.x86_64.rpm \</h1>

<p>opennebula-common-4.2.0-1.x86_64.rpm opennebula-java-4.2.0-1.x86_64.rpm \
opennebula-gate-4.2.0-1.x86_64.rpm opennebula-flow-4.2.0-1.x86_64.rpm \
opennebula-server-4.2.0-1.x86_64.rpm opennebula-ozones-4.2.0-1.x86_64.rpm \
opennebula-ruby-4.2.0-1.x86_64.rpm opennebula-sunstone-4.2.0-1.x86_64.rpm -y
```</p>

<h3>启动相关服务</h3>

<p>``` bash</p>

<h1>/etc/init.d/opennebula start</h1>

<h1>/etc/init.d/opennebula-sunstone start</h1>

<p>```</p>

<h3>修改sunstone默认监听网址</h3>

<p>``` bash</p>

<h1>lsof -i:9869  # 默认监听本地9869端口，如果连接需要修改为和外网通信地址</h1>

<p>COMMAND   PID     USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
ruby    22131 oneadmin    6u  IPv4 107999      0t0  TCP localhost:9869 (LISTEN)</p>

<h1>grep ':host' /etc/one/sunstone-server.conf</h1>

<p>:host: 127.0.0.1</p>

<h1>sed -i '/:host/s/127.0.0.1/192.168.80.130/g' /etc/one/sunstone-server.conf</h1>

<h1>grep ':host' /etc/one/sunstone-server.conf</h1>

<p>:host: 192.168.80.130</p>

<h1>/etc/init.d/opennebula-sunstone restart</h1>

<p>```</p>

<h3>浏览器登录测试</h3>

<p>http://192.168.80.130:9869</p>

<p><img src="http://kumu-Linux.github.com/images/OpenNebula_web.png" width="500" /></p>

<p>用户名和密码在安装的时候已经随机生成，oneadmin 是用户名，后面的一串是密码</p>

<p>``` bash</p>

<h1>cat /var/lib/one/.one/one_auth</h1>

<p>oneadmin:023c0bd7b09d0631074cc16aa61b7d60
```</p>

<h3>参考文档</h3>

<p><a href="http://opennebula.org/documentation:rel4.2:ignc#centos_platform_notes">One install doc</a></p>
]]></content>
  </entry>
  
</feed>
